
Projekt_roboty_transportowe_sterujacy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f2c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  080080b8  080080b8  000180b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082c8  080082c8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080082c8  080082c8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080082c8  080082c8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082c8  080082c8  000182c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082cc  080082cc  000182cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080082d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000544  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000554  20000554  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001295d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002726  00000000  00000000  0003299d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e08  00000000  00000000  000350c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d00  00000000  00000000  00035ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c3ad  00000000  00000000  00036bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000126aa  00000000  00000000  00052f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a609f  00000000  00000000  00065627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0010b6c6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d84  00000000  00000000  0010b71c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800809c 	.word	0x0800809c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	0800809c 	.word	0x0800809c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <motor_update_count>:
 *      Author: ciesl
 */
#include "MOT.h"

void motor_update_count(motor *m, TIM_HandleTypeDef *timer)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
	m->pulse_count = (int16_t)__HAL_TIM_GET_COUNTER(timer);
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	871a      	strh	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COUNTER(timer, 0);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <motor_calculate_speed>:
int16_t motor_calculate_speed(motor *m, TIM_HandleTypeDef *timer, int16_t timer_hz)
{
 8000b90:	b5b0      	push	{r4, r5, r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	80fb      	strh	r3, [r7, #6]
	motor_update_count(m,timer);
 8000b9e:	68b9      	ldr	r1, [r7, #8]
 8000ba0:	68f8      	ldr	r0, [r7, #12]
 8000ba2:	f7ff ffdf 	bl	8000b64 <motor_update_count>

	m->speedlist[m->iterator] = (int16_t) ( ((float) (m->pulse_count * timer_hz * SEC_IN_MIN)) / (m->resolution*MOT_RPM_TO_1000PROMILE) );
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8000bac:	461a      	mov	r2, r3
 8000bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bb2:	fb03 f302 	mul.w	r3, r3, r2
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fc58 	bl	800046c <__aeabi_i2d>
 8000bbc:	f04f 0200 	mov.w	r2, #0
 8000bc0:	4b3b      	ldr	r3, [pc, #236]	; (8000cb0 <motor_calculate_speed+0x120>)
 8000bc2:	f7ff fcbd 	bl	8000540 <__aeabi_dmul>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	460b      	mov	r3, r1
 8000bca:	4610      	mov	r0, r2
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f7ff ff79 	bl	8000ac4 <__aeabi_d2f>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fc5b 	bl	8000490 <__aeabi_f2d>
 8000bda:	4604      	mov	r4, r0
 8000bdc:	460d      	mov	r5, r1
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fc54 	bl	8000490 <__aeabi_f2d>
 8000be8:	a32f      	add	r3, pc, #188	; (adr r3, 8000ca8 <motor_calculate_speed+0x118>)
 8000bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bee:	f7ff fca7 	bl	8000540 <__aeabi_dmul>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	4620      	mov	r0, r4
 8000bf8:	4629      	mov	r1, r5
 8000bfa:	f7ff fdcb 	bl	8000794 <__aeabi_ddiv>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	460b      	mov	r3, r1
 8000c02:	4610      	mov	r0, r2
 8000c04:	4619      	mov	r1, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000c0c:	461c      	mov	r4, r3
 8000c0e:	f7ff ff31 	bl	8000a74 <__aeabi_d2iz>
 8000c12:	4603      	mov	r3, r0
 8000c14:	b219      	sxth	r1, r3
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	1d23      	adds	r3, r4, #4
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	4413      	add	r3, r2
 8000c1e:	460a      	mov	r2, r1
 8000c20:	805a      	strh	r2, [r3, #2]

	m->iterator++;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	b21a      	sxth	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	811a      	strh	r2, [r3, #8]

	if (m->iterator >= SMOOTHING) { m->iterator = 0; }
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000c3a:	2b13      	cmp	r3, #19
 8000c3c:	dd02      	ble.n	8000c44 <motor_calculate_speed+0xb4>
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	2200      	movs	r2, #0
 8000c42:	811a      	strh	r2, [r3, #8]

	m->speed = 0;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	2200      	movs	r2, #0
 8000c48:	875a      	strh	r2, [r3, #58]	; 0x3a

	for(int i=0; i<SMOOTHING;i++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	e013      	b.n	8000c78 <motor_calculate_speed+0xe8>
	{
		m->speed += m->speedlist[i];
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	68f9      	ldr	r1, [r7, #12]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	440b      	add	r3, r1
 8000c62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	4413      	add	r3, r2
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	b21a      	sxth	r2, r3
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	875a      	strh	r2, [r3, #58]	; 0x3a
	for(int i=0; i<SMOOTHING;i++)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3301      	adds	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	2b13      	cmp	r3, #19
 8000c7c:	dde8      	ble.n	8000c50 <motor_calculate_speed+0xc0>
	}

	if(m->DIRECTION == DIR_CCW)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d108      	bne.n	8000c9a <motor_calculate_speed+0x10a>
	{
		m->speed = -m->speed;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	425b      	negs	r3, r3
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	b21a      	sxth	r2, r3
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	875a      	strh	r2, [r3, #58]	; 0x3a
	}

	return m->speed;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ca8:	33333333 	.word	0x33333333
 8000cac:	3fd33333 	.word	0x3fd33333
 8000cb0:	404e0000 	.word	0x404e0000

08000cb4 <motor_init>:
void motor_init(motor *m, GPIO_TypeDef * DIR_GPIO_IN,uint16_t DIR_PIN_IN)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b087      	sub	sp, #28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	80fb      	strh	r3, [r7, #6]
	m->DIR_PIN = DIR_PIN_IN;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	88fa      	ldrh	r2, [r7, #6]
 8000cc6:	809a      	strh	r2, [r3, #4]

	m->DIR_GPIO = DIR_GPIO_IN;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	601a      	str	r2, [r3, #0]

	m->resolution = (ENCODER_RESOLUTION * TIMER_COUNTS * GEAR_RATIO);
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <motor_init+0x60>)
 8000cd2:	635a      	str	r2, [r3, #52]	; 0x34

	m->pulse_count = 0;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	871a      	strh	r2, [r3, #56]	; 0x38
	m->speed = 0;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	875a      	strh	r2, [r3, #58]	; 0x3a
	m->iterator = 0;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	811a      	strh	r2, [r3, #8]
	for(int i = 0; i<10;i++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	e009      	b.n	8000d00 <motor_init+0x4c>
	{
		m->speedlist[i] = 0;
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	4413      	add	r3, r2
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	805a      	strh	r2, [r3, #2]
	for(int i = 0; i<10;i++)
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	2b09      	cmp	r3, #9
 8000d04:	ddf2      	ble.n	8000cec <motor_init+0x38>
	}
}
 8000d06:	bf00      	nop
 8000d08:	bf00      	nop
 8000d0a:	371c      	adds	r7, #28
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	45e3d70a 	.word	0x45e3d70a

08000d18 <set_motor_dir>:
void set_motor_dir(motor *m, int16_t process)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	807b      	strh	r3, [r7, #2]
	if(process > 0)
 8000d24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	dd0b      	ble.n	8000d44 <set_motor_dir+0x2c>
	{
		HAL_GPIO_WritePin(m->DIR_GPIO, m->DIR_PIN, 0);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6818      	ldr	r0, [r3, #0]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	889b      	ldrh	r3, [r3, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	4619      	mov	r1, r3
 8000d38:	f002 f9fa 	bl	8003130 <HAL_GPIO_WritePin>
		m->DIRECTION = DIR_CW;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	80da      	strh	r2, [r3, #6]
	else if(process < 0)
	{
		HAL_GPIO_WritePin(m->DIR_GPIO, m->DIR_PIN, 1);
		m->DIRECTION = DIR_CCW;
	}
}
 8000d42:	e00e      	b.n	8000d62 <set_motor_dir+0x4a>
	else if(process < 0)
 8000d44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	da0a      	bge.n	8000d62 <set_motor_dir+0x4a>
		HAL_GPIO_WritePin(m->DIR_GPIO, m->DIR_PIN, 1);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6818      	ldr	r0, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	889b      	ldrh	r3, [r3, #4]
 8000d54:	2201      	movs	r2, #1
 8000d56:	4619      	mov	r1, r3
 8000d58:	f002 f9ea 	bl	8003130 <HAL_GPIO_WritePin>
		m->DIRECTION = DIR_CCW;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2201      	movs	r2, #1
 8000d60:	80da      	strh	r2, [r3, #6]
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <pid_init>:
 *  Created on: 6 kwi 2022
 *      Author: Grzegorz Cieslar
 */
#include "PID.h"

void pid_init(PID_t * pid, float p, float i, float d, float dt_ms, int16_t power) {
 8000d6c:	b480      	push	{r7}
 8000d6e:	b087      	sub	sp, #28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6178      	str	r0, [r7, #20]
 8000d74:	ed87 0a04 	vstr	s0, [r7, #16]
 8000d78:	edc7 0a03 	vstr	s1, [r7, #12]
 8000d7c:	ed87 1a02 	vstr	s2, [r7, #8]
 8000d80:	edc7 1a01 	vstr	s3, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	807b      	strh	r3, [r7, #2]

	pid->p = p;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	601a      	str	r2, [r3, #0]
	pid->i = i;
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	605a      	str	r2, [r3, #4]
	pid->d = d;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	609a      	str	r2, [r3, #8]
	pid->p_val = 0.0;
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	f04f 0200 	mov.w	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
	pid->i_val = 0.0;
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	f04f 0200 	mov.w	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
	pid->d_val = 0.0;
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	f04f 0200 	mov.w	r2, #0
 8000db0:	615a      	str	r2, [r3, #20]

	pid->PID_max_val = FLOAT_MAX;
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	4a0f      	ldr	r2, [pc, #60]	; (8000df4 <pid_init+0x88>)
 8000db6:	619a      	str	r2, [r3, #24]
	pid->PID_min_val = FLOAT_MIN;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	4a0f      	ldr	r2, [pc, #60]	; (8000df8 <pid_init+0x8c>)
 8000dbc:	61da      	str	r2, [r3, #28]
	pid->total_max = FLOAT_MAX;
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	4a0c      	ldr	r2, [pc, #48]	; (8000df4 <pid_init+0x88>)
 8000dc2:	621a      	str	r2, [r3, #32]
	pid->total_min = FLOAT_MIN;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	4a0c      	ldr	r2, [pc, #48]	; (8000df8 <pid_init+0x8c>)
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24

	pid->e_last = 0.0;
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	f04f 0200 	mov.w	r2, #0
 8000dd0:	631a      	str	r2, [r3, #48]	; 0x30
	pid->sum = 0.0;
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	f04f 0200 	mov.w	r2, #0
 8000dd8:	635a      	str	r2, [r3, #52]	; 0x34

	pid->dt_ms = dt_ms;
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	63da      	str	r2, [r3, #60]	; 0x3c

	pid->power = power;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	887a      	ldrh	r2, [r7, #2]
 8000de4:	875a      	strh	r2, [r3, #58]	; 0x3a

}
 8000de6:	bf00      	nop
 8000de8:	371c      	adds	r7, #28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	49742400 	.word	0x49742400
 8000df8:	c9742400 	.word	0xc9742400

08000dfc <pid_calc>:

int16_t pid_calc(PID_t * pid, int16_t mv, int16_t dv) {
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	807b      	strh	r3, [r7, #2]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	803b      	strh	r3, [r7, #0]

	float p, i, d, e, total;

	//PID process variables
	pid->mv = (float)mv*pid->power;
 8000e0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e10:	ee07 3a90 	vmov	s15, r3
 8000e14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8000e1e:	ee07 3a90 	vmov	s15, r3
 8000e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	pid->dv = (float)dv*pid->power;
 8000e30:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000e34:	ee07 3a90 	vmov	s15, r3
 8000e38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8000e42:	ee07 3a90 	vmov	s15, r3
 8000e46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	//Error
	e = dv - mv;
 8000e54:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000e58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	ee07 3a90 	vmov	s15, r3
 8000e62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e66:	edc7 7a03 	vstr	s15, [r7, #12]

	//P
	p = e * pid->p;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	edd3 7a00 	vldr	s15, [r3]
 8000e70:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e78:	edc7 7a07 	vstr	s15, [r7, #28]
	if (p > pid->PID_max_val)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000e82:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e8e:	dd03      	ble.n	8000e98 <pid_calc+0x9c>
	p = pid->PID_max_val;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	61fb      	str	r3, [r7, #28]
 8000e96:	e00c      	b.n	8000eb2 <pid_calc+0xb6>
	else if (p < pid->PID_min_val)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	edd3 7a07 	vldr	s15, [r3, #28]
 8000e9e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ea2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eaa:	d502      	bpl.n	8000eb2 <pid_calc+0xb6>
	p = pid->PID_min_val;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	69db      	ldr	r3, [r3, #28]
 8000eb0:	61fb      	str	r3, [r7, #28]
	pid->p_val = p;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	69fa      	ldr	r2, [r7, #28]
 8000eb6:	60da      	str	r2, [r3, #12]

	//I
	i = pid->sum;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ebc:	61bb      	str	r3, [r7, #24]
	i += pid->dt_ms * e / pid->i;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8000ec4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ec8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	ed93 7a01 	vldr	s14, [r3, #4]
 8000ed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ed6:	ed97 7a06 	vldr	s14, [r7, #24]
 8000eda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ede:	edc7 7a06 	vstr	s15, [r7, #24]
	if (i > pid->PID_max_val)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	edd3 7a06 	vldr	s15, [r3, #24]
 8000ee8:	ed97 7a06 	vldr	s14, [r7, #24]
 8000eec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef4:	dd03      	ble.n	8000efe <pid_calc+0x102>
	i = pid->PID_max_val;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	61bb      	str	r3, [r7, #24]
 8000efc:	e00c      	b.n	8000f18 <pid_calc+0x11c>
	else if (i < pid->PID_min_val)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f04:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f10:	d502      	bpl.n	8000f18 <pid_calc+0x11c>
	i = pid->PID_min_val;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	61bb      	str	r3, [r7, #24]
	pid->sum = i;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	635a      	str	r2, [r3, #52]	; 0x34

	//D
	d = ((e - pid->e_last) * pid->d)/pid->dt_ms;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000f24:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f32:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8000f3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f40:	edc7 7a05 	vstr	s15, [r7, #20]
	if (d > pid->PID_max_val)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f4a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f56:	dd03      	ble.n	8000f60 <pid_calc+0x164>
	d = pid->PID_max_val;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	e00c      	b.n	8000f7a <pid_calc+0x17e>
	else if (d < pid->PID_min_val)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f66:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f72:	d502      	bpl.n	8000f7a <pid_calc+0x17e>
	d = pid->PID_min_val;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	617b      	str	r3, [r7, #20]
	pid->d_val = d;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	697a      	ldr	r2, [r7, #20]
 8000f7e:	615a      	str	r2, [r3, #20]

	//Total
	total = (p + i + d)/(float)pid->power;
 8000f80:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f84:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f90:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8000f9a:	ee07 3a90 	vmov	s15, r3
 8000f9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fa6:	edc7 7a04 	vstr	s15, [r7, #16]
	if (total > pid->total_max)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	edd3 7a08 	vldr	s15, [r3, #32]
 8000fb0:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbc:	dd03      	ble.n	8000fc6 <pid_calc+0x1ca>
	total = pid->total_max;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a1b      	ldr	r3, [r3, #32]
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	e00c      	b.n	8000fe0 <pid_calc+0x1e4>
	else if (total < pid->total_min)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000fcc:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd8:	d502      	bpl.n	8000fe0 <pid_calc+0x1e4>
	total = pid->total_min;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fde:	613b      	str	r3, [r7, #16]

	//Write computed variables
	pid->control = (int16_t)total;
 8000fe0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fe4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fe8:	ee17 3a90 	vmov	r3, s15
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	871a      	strh	r2, [r3, #56]	; 0x38
	pid->e_last = e;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	631a      	str	r2, [r3, #48]	; 0x30

	return pid->control;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3724      	adds	r7, #36	; 0x24
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <pid_scaling>:

void pid_scaling(PID_t* pid, float  pid_max, float pid_min, float total_max, float total_min)
{
 800100a:	b480      	push	{r7}
 800100c:	b087      	sub	sp, #28
 800100e:	af00      	add	r7, sp, #0
 8001010:	6178      	str	r0, [r7, #20]
 8001012:	ed87 0a04 	vstr	s0, [r7, #16]
 8001016:	edc7 0a03 	vstr	s1, [r7, #12]
 800101a:	ed87 1a02 	vstr	s2, [r7, #8]
 800101e:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->PID_max_val = pid_max*pid->power;
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8001028:	ee07 3a90 	vmov	s15, r3
 800102c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001030:	edd7 7a04 	vldr	s15, [r7, #16]
 8001034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->PID_min_val = pid_min*pid->power;
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8001044:	ee07 3a90 	vmov	s15, r3
 8001048:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800104c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	edc3 7a07 	vstr	s15, [r3, #28]
	pid->total_max = total_max;
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	621a      	str	r2, [r3, #32]
	pid->total_min = total_min;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001066:	bf00      	nop
 8001068:	371c      	adds	r7, #28
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800108a:	4b42      	ldr	r3, [pc, #264]	; (8001194 <MX_GPIO_Init+0x120>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	4a41      	ldr	r2, [pc, #260]	; (8001194 <MX_GPIO_Init+0x120>)
 8001090:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001094:	6153      	str	r3, [r2, #20]
 8001096:	4b3f      	ldr	r3, [pc, #252]	; (8001194 <MX_GPIO_Init+0x120>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	4b3c      	ldr	r3, [pc, #240]	; (8001194 <MX_GPIO_Init+0x120>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	4a3b      	ldr	r2, [pc, #236]	; (8001194 <MX_GPIO_Init+0x120>)
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	6153      	str	r3, [r2, #20]
 80010ae:	4b39      	ldr	r3, [pc, #228]	; (8001194 <MX_GPIO_Init+0x120>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	4b36      	ldr	r3, [pc, #216]	; (8001194 <MX_GPIO_Init+0x120>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	4a35      	ldr	r2, [pc, #212]	; (8001194 <MX_GPIO_Init+0x120>)
 80010c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c4:	6153      	str	r3, [r2, #20]
 80010c6:	4b33      	ldr	r3, [pc, #204]	; (8001194 <MX_GPIO_Init+0x120>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_PT_Pin|DIR_LT_Pin|DIR_SERWO_Pin|WYLACZNIK_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	f249 0130 	movw	r1, #36912	; 0x9030
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010dc:	f002 f828 	bl	8003130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_LP_Pin|DIR_PP_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2103      	movs	r1, #3
 80010e4:	482c      	ldr	r0, [pc, #176]	; (8001198 <MX_GPIO_Init+0x124>)
 80010e6:	f002 f823 	bl	8003130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STOP_AW_Pin;
 80010ea:	2302      	movs	r3, #2
 80010ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010ee:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80010f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(STOP_AW_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	4619      	mov	r1, r3
 80010fe:	4827      	ldr	r0, [pc, #156]	; (800119c <MX_GPIO_Init+0x128>)
 8001100:	f001 fe8c 	bl	8002e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DIR_PT_Pin|DIR_LT_Pin|DIR_SERWO_Pin|WYLACZNIK_Pin;
 8001104:	f249 0330 	movw	r3, #36912	; 0x9030
 8001108:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	4619      	mov	r1, r3
 800111c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001120:	f001 fe7c 	bl	8002e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIR_LP_Pin|DIR_PP_Pin;
 8001124:	2303      	movs	r3, #3
 8001126:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	4619      	mov	r1, r3
 800113a:	4817      	ldr	r0, [pc, #92]	; (8001198 <MX_GPIO_Init+0x124>)
 800113c:	f001 fe6e 	bl	8002e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = KRANCOWKA_1_Pin|KRANCOWKA_2_Pin;
 8001140:	2318      	movs	r3, #24
 8001142:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001144:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001148:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	4619      	mov	r1, r3
 8001154:	4810      	ldr	r0, [pc, #64]	; (8001198 <MX_GPIO_Init+0x124>)
 8001156:	f001 fe61 	bl	8002e1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	2007      	movs	r0, #7
 8001160:	f001 fdaf 	bl	8002cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001164:	2007      	movs	r0, #7
 8001166:	f001 fdc8 	bl	8002cfa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	2009      	movs	r0, #9
 8001170:	f001 fda7 	bl	8002cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001174:	2009      	movs	r0, #9
 8001176:	f001 fdc0 	bl	8002cfa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	2100      	movs	r1, #0
 800117e:	200a      	movs	r0, #10
 8001180:	f001 fd9f 	bl	8002cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001184:	200a      	movs	r0, #10
 8001186:	f001 fdb8 	bl	8002cfa <HAL_NVIC_EnableIRQ>

}
 800118a:	bf00      	nop
 800118c:	3720      	adds	r7, #32
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000
 8001198:	48000400 	.word	0x48000400
 800119c:	48001400 	.word	0x48001400

080011a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a4:	f001 fc4c 	bl	8002a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a8:	f000 fc78 	bl	8001a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ac:	f7ff ff62 	bl	8001074 <MX_GPIO_Init>
  MX_TIM7_Init();
 80011b0:	f001 f92e 	bl	8002410 <MX_TIM7_Init>
  MX_TIM3_Init();
 80011b4:	f001 f89e 	bl	80022f4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80011b8:	f001 fb34 	bl	8002824 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80011bc:	f000 ff92 	bl	80020e4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80011c0:	f001 f844 	bl	800224c <MX_TIM2_Init>
  MX_TIM6_Init();
 80011c4:	f001 f8ec 	bl	80023a0 <MX_TIM6_Init>
  MX_TIM17_Init();
 80011c8:	f001 f95a 	bl	8002480 <MX_TIM17_Init>
  MX_USART2_UART_Init();
 80011cc:	f001 fb5a 	bl	8002884 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //INIT komunikacji ze zdalna aparatura
  //ibus_init();

  //timery dla PID i komunikacji z PC
  HAL_TIM_Base_Start_IT(PID_TIMER);
 80011d0:	48b4      	ldr	r0, [pc, #720]	; (80014a4 <main+0x304>)
 80011d2:	f003 fa9b 	bl	800470c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(COMM_TIMER);
 80011d6:	48b4      	ldr	r0, [pc, #720]	; (80014a8 <main+0x308>)
 80011d8:	f003 fa98 	bl	800470c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(ENCODER_LEWY, TIM_CHANNEL_ALL);
 80011dc:	213c      	movs	r1, #60	; 0x3c
 80011de:	48b3      	ldr	r0, [pc, #716]	; (80014ac <main+0x30c>)
 80011e0:	f003 fcda 	bl	8004b98 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(ENCODER_PRAWY, TIM_CHANNEL_ALL);
 80011e4:	213c      	movs	r1, #60	; 0x3c
 80011e6:	48b2      	ldr	r0, [pc, #712]	; (80014b0 <main+0x310>)
 80011e8:	f003 fcd6 	bl	8004b98 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(PWM_TIMER_SILNIKI, TIM_CHANNEL_1);
 80011ec:	2100      	movs	r1, #0
 80011ee:	48b1      	ldr	r0, [pc, #708]	; (80014b4 <main+0x314>)
 80011f0:	f003 fb40 	bl	8004874 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(PWM_TIMER_SILNIKI, TIM_CHANNEL_2);
 80011f4:	2104      	movs	r1, #4
 80011f6:	48af      	ldr	r0, [pc, #700]	; (80014b4 <main+0x314>)
 80011f8:	f003 fb3c 	bl	8004874 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(PWM_TIMER_SILNIKI, TIM_CHANNEL_3);
 80011fc:	2108      	movs	r1, #8
 80011fe:	48ad      	ldr	r0, [pc, #692]	; (80014b4 <main+0x314>)
 8001200:	f003 fb38 	bl	8004874 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(PWM_TIMER_SILNIKI, TIM_CHANNEL_4);
 8001204:	210c      	movs	r1, #12
 8001206:	48ab      	ldr	r0, [pc, #684]	; (80014b4 <main+0x314>)
 8001208:	f003 fb34 	bl	8004874 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(PWM_TIMER_SERWO, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	48aa      	ldr	r0, [pc, #680]	; (80014b8 <main+0x318>)
 8001210:	f003 fb30 	bl	8004874 <HAL_TIM_PWM_Start>
  __HAL_UART_ENABLE_IT(MCU_UART, UART_IT_RXNE);  // Interrupt Enable
 8001214:	4ba9      	ldr	r3, [pc, #676]	; (80014bc <main+0x31c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	4ba8      	ldr	r3, [pc, #672]	; (80014bc <main+0x31c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f042 0220 	orr.w	r2, r2, #32
 8001222:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(MCU_UART, UART_IT_TC);
 8001224:	4ba5      	ldr	r3, [pc, #660]	; (80014bc <main+0x31c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4ba4      	ldr	r3, [pc, #656]	; (80014bc <main+0x31c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001232:	601a      	str	r2, [r3, #0]

  //Pid inicjalizacja
  ms = (int16_t)1000/PID_HZ;
 8001234:	4ba2      	ldr	r3, [pc, #648]	; (80014c0 <main+0x320>)
 8001236:	2232      	movs	r2, #50	; 0x32
 8001238:	801a      	strh	r2, [r3, #0]
  pid_init(&Pid_tyl_lewy, KP, TI, TD, ms,PID_POWER);
 800123a:	4ba1      	ldr	r3, [pc, #644]	; (80014c0 <main+0x320>)
 800123c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001240:	ee07 3a90 	vmov	s15, r3
 8001244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001248:	2164      	movs	r1, #100	; 0x64
 800124a:	eef0 1a67 	vmov.f32	s3, s15
 800124e:	ed9f 1a9d 	vldr	s2, [pc, #628]	; 80014c4 <main+0x324>
 8001252:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001256:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800125a:	489b      	ldr	r0, [pc, #620]	; (80014c8 <main+0x328>)
 800125c:	f7ff fd86 	bl	8000d6c <pid_init>
  pid_scaling(&Pid_tyl_lewy, Counter_20kHz_360, -Counter_20kHz_360, Counter_20kHz_360, -Counter_20kHz_360);
 8001260:	eddf 1a9a 	vldr	s3, [pc, #616]	; 80014cc <main+0x32c>
 8001264:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 80014d0 <main+0x330>
 8001268:	eddf 0a98 	vldr	s1, [pc, #608]	; 80014cc <main+0x32c>
 800126c:	ed9f 0a98 	vldr	s0, [pc, #608]	; 80014d0 <main+0x330>
 8001270:	4895      	ldr	r0, [pc, #596]	; (80014c8 <main+0x328>)
 8001272:	f7ff feca 	bl	800100a <pid_scaling>
  pid_init(&Pid_tyl_prawy, KP, TI, TD, ms,PID_POWER);
 8001276:	4b92      	ldr	r3, [pc, #584]	; (80014c0 <main+0x320>)
 8001278:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127c:	ee07 3a90 	vmov	s15, r3
 8001280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001284:	2164      	movs	r1, #100	; 0x64
 8001286:	eef0 1a67 	vmov.f32	s3, s15
 800128a:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 80014c4 <main+0x324>
 800128e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001292:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001296:	488f      	ldr	r0, [pc, #572]	; (80014d4 <main+0x334>)
 8001298:	f7ff fd68 	bl	8000d6c <pid_init>
  pid_scaling(&Pid_tyl_prawy, Counter_20kHz_360, -Counter_20kHz_360, Counter_20kHz_360, -Counter_20kHz_360);
 800129c:	eddf 1a8b 	vldr	s3, [pc, #556]	; 80014cc <main+0x32c>
 80012a0:	ed9f 1a8b 	vldr	s2, [pc, #556]	; 80014d0 <main+0x330>
 80012a4:	eddf 0a89 	vldr	s1, [pc, #548]	; 80014cc <main+0x32c>
 80012a8:	ed9f 0a89 	vldr	s0, [pc, #548]	; 80014d0 <main+0x330>
 80012ac:	4889      	ldr	r0, [pc, #548]	; (80014d4 <main+0x334>)
 80012ae:	f7ff feac 	bl	800100a <pid_scaling>
  pid_init(&Pid_przod_lewy, KP, TI, TD, ms,PID_POWER);
 80012b2:	4b83      	ldr	r3, [pc, #524]	; (80014c0 <main+0x320>)
 80012b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b8:	ee07 3a90 	vmov	s15, r3
 80012bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c0:	2164      	movs	r1, #100	; 0x64
 80012c2:	eef0 1a67 	vmov.f32	s3, s15
 80012c6:	ed9f 1a7f 	vldr	s2, [pc, #508]	; 80014c4 <main+0x324>
 80012ca:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80012ce:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80012d2:	4881      	ldr	r0, [pc, #516]	; (80014d8 <main+0x338>)
 80012d4:	f7ff fd4a 	bl	8000d6c <pid_init>
  pid_scaling(&Pid_przod_lewy, Counter_20kHz_360, -Counter_20kHz_360, Counter_20kHz_360, -Counter_20kHz_360);
 80012d8:	eddf 1a7c 	vldr	s3, [pc, #496]	; 80014cc <main+0x32c>
 80012dc:	ed9f 1a7c 	vldr	s2, [pc, #496]	; 80014d0 <main+0x330>
 80012e0:	eddf 0a7a 	vldr	s1, [pc, #488]	; 80014cc <main+0x32c>
 80012e4:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 80014d0 <main+0x330>
 80012e8:	487b      	ldr	r0, [pc, #492]	; (80014d8 <main+0x338>)
 80012ea:	f7ff fe8e 	bl	800100a <pid_scaling>
  pid_init(&Pid_przod_prawy, KP, TI, TD, ms,PID_POWER);
 80012ee:	4b74      	ldr	r3, [pc, #464]	; (80014c0 <main+0x320>)
 80012f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f4:	ee07 3a90 	vmov	s15, r3
 80012f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012fc:	2164      	movs	r1, #100	; 0x64
 80012fe:	eef0 1a67 	vmov.f32	s3, s15
 8001302:	ed9f 1a70 	vldr	s2, [pc, #448]	; 80014c4 <main+0x324>
 8001306:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800130a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800130e:	4873      	ldr	r0, [pc, #460]	; (80014dc <main+0x33c>)
 8001310:	f7ff fd2c 	bl	8000d6c <pid_init>
  pid_scaling(&Pid_przod_prawy, Counter_20kHz_360, -Counter_20kHz_360, Counter_20kHz_360, -Counter_20kHz_360);
 8001314:	eddf 1a6d 	vldr	s3, [pc, #436]	; 80014cc <main+0x32c>
 8001318:	ed9f 1a6d 	vldr	s2, [pc, #436]	; 80014d0 <main+0x330>
 800131c:	eddf 0a6b 	vldr	s1, [pc, #428]	; 80014cc <main+0x32c>
 8001320:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 80014d0 <main+0x330>
 8001324:	486d      	ldr	r0, [pc, #436]	; (80014dc <main+0x33c>)
 8001326:	f7ff fe70 	bl	800100a <pid_scaling>

  //Motor inicjalizacja
  motor_init(&mot_tyl_lewy,DIR_LT_GPIO_Port,DIR_LT_Pin);
 800132a:	2220      	movs	r2, #32
 800132c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001330:	486b      	ldr	r0, [pc, #428]	; (80014e0 <main+0x340>)
 8001332:	f7ff fcbf 	bl	8000cb4 <motor_init>
  motor_init(&mot_tyl_prawy,DIR_PT_GPIO_Port,DIR_PT_Pin);
 8001336:	2210      	movs	r2, #16
 8001338:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800133c:	4869      	ldr	r0, [pc, #420]	; (80014e4 <main+0x344>)
 800133e:	f7ff fcb9 	bl	8000cb4 <motor_init>
  motor_init(&mot_przod_lewy,DIR_LP_GPIO_Port,DIR_LP_Pin);
 8001342:	2201      	movs	r2, #1
 8001344:	4968      	ldr	r1, [pc, #416]	; (80014e8 <main+0x348>)
 8001346:	4869      	ldr	r0, [pc, #420]	; (80014ec <main+0x34c>)
 8001348:	f7ff fcb4 	bl	8000cb4 <motor_init>
  motor_init(&mot_przod_prawy,DIR_PP_GPIO_Port,DIR_PP_Pin);
 800134c:	2202      	movs	r2, #2
 800134e:	4966      	ldr	r1, [pc, #408]	; (80014e8 <main+0x348>)
 8001350:	4867      	ldr	r0, [pc, #412]	; (80014f0 <main+0x350>)
 8001352:	f7ff fcaf 	bl	8000cb4 <motor_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(PID_flaga == 1){
 8001356:	4b67      	ldr	r3, [pc, #412]	; (80014f4 <main+0x354>)
 8001358:	f993 3000 	ldrsb.w	r3, [r3]
 800135c:	2b01      	cmp	r3, #1
 800135e:	f040 8105 	bne.w	800156c <main+0x3cc>

		  PID_flaga = 0;
 8001362:	4b64      	ldr	r3, [pc, #400]	; (80014f4 <main+0x354>)
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]

		  //LEWE TYL - PID OBLICZA NAWET W TRYBIE MANUALNYM
		  pomiar_tyl_lewy = to_process_range(motor_calculate_speed(&mot_tyl_lewy, ENCODER_LEWY, PID_HZ));
 8001368:	2214      	movs	r2, #20
 800136a:	4950      	ldr	r1, [pc, #320]	; (80014ac <main+0x30c>)
 800136c:	485c      	ldr	r0, [pc, #368]	; (80014e0 <main+0x340>)
 800136e:	f7ff fc0f 	bl	8000b90 <motor_calculate_speed>
 8001372:	4603      	mov	r3, r0
 8001374:	4618      	mov	r0, r3
 8001376:	f000 fc1b 	bl	8001bb0 <to_process_range>
 800137a:	4603      	mov	r3, r0
 800137c:	461a      	mov	r2, r3
 800137e:	4b5e      	ldr	r3, [pc, #376]	; (80014f8 <main+0x358>)
 8001380:	801a      	strh	r2, [r3, #0]
		  sterowanie_tyl_lewy = pid_calc(&Pid_tyl_lewy, pomiar_tyl_lewy, setpoint_tyl_lewy);
 8001382:	4b5d      	ldr	r3, [pc, #372]	; (80014f8 <main+0x358>)
 8001384:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001388:	4a5c      	ldr	r2, [pc, #368]	; (80014fc <main+0x35c>)
 800138a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800138e:	4619      	mov	r1, r3
 8001390:	484d      	ldr	r0, [pc, #308]	; (80014c8 <main+0x328>)
 8001392:	f7ff fd33 	bl	8000dfc <pid_calc>
 8001396:	4603      	mov	r3, r0
 8001398:	461a      	mov	r2, r3
 800139a:	4b59      	ldr	r3, [pc, #356]	; (8001500 <main+0x360>)
 800139c:	801a      	strh	r2, [r3, #0]

		  //PRZOD
		  sterowanie_przod_lewy = pid_calc(&Pid_przod_lewy, pomiar_przod_lewy, setpoint_przod_lewy);
 800139e:	4b59      	ldr	r3, [pc, #356]	; (8001504 <main+0x364>)
 80013a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a4:	4a58      	ldr	r2, [pc, #352]	; (8001508 <main+0x368>)
 80013a6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80013aa:	4619      	mov	r1, r3
 80013ac:	484a      	ldr	r0, [pc, #296]	; (80014d8 <main+0x338>)
 80013ae:	f7ff fd25 	bl	8000dfc <pid_calc>
 80013b2:	4603      	mov	r3, r0
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b55      	ldr	r3, [pc, #340]	; (800150c <main+0x36c>)
 80013b8:	801a      	strh	r2, [r3, #0]

		  //PRAWE TYL
		  pomiar_tyl_prawy = to_process_range(motor_calculate_speed(&mot_tyl_prawy, ENCODER_PRAWY, PID_HZ));
 80013ba:	2214      	movs	r2, #20
 80013bc:	493c      	ldr	r1, [pc, #240]	; (80014b0 <main+0x310>)
 80013be:	4849      	ldr	r0, [pc, #292]	; (80014e4 <main+0x344>)
 80013c0:	f7ff fbe6 	bl	8000b90 <motor_calculate_speed>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 fbf2 	bl	8001bb0 <to_process_range>
 80013cc:	4603      	mov	r3, r0
 80013ce:	461a      	mov	r2, r3
 80013d0:	4b4f      	ldr	r3, [pc, #316]	; (8001510 <main+0x370>)
 80013d2:	801a      	strh	r2, [r3, #0]
		  sterowanie_tyl_prawy = pid_calc(&Pid_tyl_prawy, pomiar_tyl_prawy, setpoint_tyl_prawy);
 80013d4:	4b4e      	ldr	r3, [pc, #312]	; (8001510 <main+0x370>)
 80013d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013da:	4a4e      	ldr	r2, [pc, #312]	; (8001514 <main+0x374>)
 80013dc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80013e0:	4619      	mov	r1, r3
 80013e2:	483c      	ldr	r0, [pc, #240]	; (80014d4 <main+0x334>)
 80013e4:	f7ff fd0a 	bl	8000dfc <pid_calc>
 80013e8:	4603      	mov	r3, r0
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b4a      	ldr	r3, [pc, #296]	; (8001518 <main+0x378>)
 80013ee:	801a      	strh	r2, [r3, #0]

		  //PRZOD
		  sterowanie_przod_prawy = pid_calc(&Pid_przod_prawy, pomiar_przod_prawy, setpoint_przod_prawy);
 80013f0:	4b4a      	ldr	r3, [pc, #296]	; (800151c <main+0x37c>)
 80013f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f6:	4a4a      	ldr	r2, [pc, #296]	; (8001520 <main+0x380>)
 80013f8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80013fc:	4619      	mov	r1, r3
 80013fe:	4837      	ldr	r0, [pc, #220]	; (80014dc <main+0x33c>)
 8001400:	f7ff fcfc 	bl	8000dfc <pid_calc>
 8001404:	4603      	mov	r3, r0
 8001406:	461a      	mov	r2, r3
 8001408:	4b46      	ldr	r3, [pc, #280]	; (8001524 <main+0x384>)
 800140a:	801a      	strh	r2, [r3, #0]

		  //STEROWANIE DLA TRYBU AUTOMATYCZNEGO
		  //if(MA == 1){  TU I NA KONCU ZAKOMENTOWANE
		  if (I1_V != 0){
 800140c:	4b46      	ldr	r3, [pc, #280]	; (8001528 <main+0x388>)
 800140e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 808a 	beq.w	800152c <main+0x38c>

			  set_motor_dir(&mot_tyl_lewy,sterowanie_tyl_lewy);
 8001418:	4b39      	ldr	r3, [pc, #228]	; (8001500 <main+0x360>)
 800141a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141e:	4619      	mov	r1, r3
 8001420:	482f      	ldr	r0, [pc, #188]	; (80014e0 <main+0x340>)
 8001422:	f7ff fc79 	bl	8000d18 <set_motor_dir>
			  __HAL_TIM_SetCompare(PWM_TIMER_SILNIKI, CH_TYL_LEWY,abs(sterowanie_tyl_lewy));
 8001426:	4b36      	ldr	r3, [pc, #216]	; (8001500 <main+0x360>)
 8001428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142c:	2b00      	cmp	r3, #0
 800142e:	bfb8      	it	lt
 8001430:	425b      	neglt	r3, r3
 8001432:	b29a      	uxth	r2, r3
 8001434:	4b1f      	ldr	r3, [pc, #124]	; (80014b4 <main+0x314>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	635a      	str	r2, [r3, #52]	; 0x34
			  set_motor_dir(&mot_przod_lewy,sterowanie_przod_lewy);
 800143a:	4b34      	ldr	r3, [pc, #208]	; (800150c <main+0x36c>)
 800143c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001440:	4619      	mov	r1, r3
 8001442:	482a      	ldr	r0, [pc, #168]	; (80014ec <main+0x34c>)
 8001444:	f7ff fc68 	bl	8000d18 <set_motor_dir>
			  __HAL_TIM_SetCompare(PWM_TIMER_SILNIKI, CH_PRZOD_LEWY,abs(sterowanie_przod_lewy));
 8001448:	4b30      	ldr	r3, [pc, #192]	; (800150c <main+0x36c>)
 800144a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800144e:	2b00      	cmp	r3, #0
 8001450:	bfb8      	it	lt
 8001452:	425b      	neglt	r3, r3
 8001454:	b29a      	uxth	r2, r3
 8001456:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <main+0x314>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	63da      	str	r2, [r3, #60]	; 0x3c

			  set_motor_dir(&mot_tyl_prawy,sterowanie_tyl_prawy);
 800145c:	4b2e      	ldr	r3, [pc, #184]	; (8001518 <main+0x378>)
 800145e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001462:	4619      	mov	r1, r3
 8001464:	481f      	ldr	r0, [pc, #124]	; (80014e4 <main+0x344>)
 8001466:	f7ff fc57 	bl	8000d18 <set_motor_dir>
			  __HAL_TIM_SetCompare(PWM_TIMER_SILNIKI, CH_TYL_PRAWY,abs(sterowanie_tyl_prawy));
 800146a:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <main+0x378>)
 800146c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001470:	2b00      	cmp	r3, #0
 8001472:	bfb8      	it	lt
 8001474:	425b      	neglt	r3, r3
 8001476:	b29a      	uxth	r2, r3
 8001478:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <main+0x314>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	639a      	str	r2, [r3, #56]	; 0x38
			  set_motor_dir(&mot_przod_prawy,sterowanie_przod_prawy);
 800147e:	4b29      	ldr	r3, [pc, #164]	; (8001524 <main+0x384>)
 8001480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001484:	4619      	mov	r1, r3
 8001486:	481a      	ldr	r0, [pc, #104]	; (80014f0 <main+0x350>)
 8001488:	f7ff fc46 	bl	8000d18 <set_motor_dir>
			  __HAL_TIM_SetCompare(PWM_TIMER_SILNIKI, CH_PRZOD_PRAWY,abs(sterowanie_przod_prawy));
 800148c:	4b25      	ldr	r3, [pc, #148]	; (8001524 <main+0x384>)
 800148e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001492:	2b00      	cmp	r3, #0
 8001494:	bfb8      	it	lt
 8001496:	425b      	neglt	r3, r3
 8001498:	b29a      	uxth	r2, r3
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <main+0x314>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	641a      	str	r2, [r3, #64]	; 0x40
 80014a0:	e064      	b.n	800156c <main+0x3cc>
 80014a2:	bf00      	nop
 80014a4:	20000318 	.word	0x20000318
 80014a8:	200003fc 	.word	0x200003fc
 80014ac:	200003b0 	.word	0x200003b0
 80014b0:	200002cc 	.word	0x200002cc
 80014b4:	20000364 	.word	0x20000364
 80014b8:	20000280 	.word	0x20000280
 80014bc:	20000448 	.word	0x20000448
 80014c0:	20000002 	.word	0x20000002
 80014c4:	00000000 	.word	0x00000000
 80014c8:	200001bc 	.word	0x200001bc
 80014cc:	c3b38000 	.word	0xc3b38000
 80014d0:	43b38000 	.word	0x43b38000
 80014d4:	2000015c 	.word	0x2000015c
 80014d8:	200000e0 	.word	0x200000e0
 80014dc:	200001fc 	.word	0x200001fc
 80014e0:	20000240 	.word	0x20000240
 80014e4:	20000120 	.word	0x20000120
 80014e8:	48000400 	.word	0x48000400
 80014ec:	200000a4 	.word	0x200000a4
 80014f0:	20000058 	.word	0x20000058
 80014f4:	2000002f 	.word	0x2000002f
 80014f8:	2000003a 	.word	0x2000003a
 80014fc:	2000003e 	.word	0x2000003e
 8001500:	20000036 	.word	0x20000036
 8001504:	20000046 	.word	0x20000046
 8001508:	2000004a 	.word	0x2000004a
 800150c:	20000042 	.word	0x20000042
 8001510:	2000003c 	.word	0x2000003c
 8001514:	20000040 	.word	0x20000040
 8001518:	20000038 	.word	0x20000038
 800151c:	20000048 	.word	0x20000048
 8001520:	2000004c 	.word	0x2000004c
 8001524:	20000044 	.word	0x20000044
 8001528:	2000004e 	.word	0x2000004e
		  }
		  else{
			  set_motor_dir(&mot_tyl_lewy,0);
 800152c:	2100      	movs	r1, #0
 800152e:	489e      	ldr	r0, [pc, #632]	; (80017a8 <main+0x608>)
 8001530:	f7ff fbf2 	bl	8000d18 <set_motor_dir>
			  __HAL_TIM_SetCompare(PWM_TIMER_SILNIKI, CH_TYL_LEWY,0);
 8001534:	4b9d      	ldr	r3, [pc, #628]	; (80017ac <main+0x60c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2200      	movs	r2, #0
 800153a:	635a      	str	r2, [r3, #52]	; 0x34
			  set_motor_dir(&mot_przod_lewy,0);
 800153c:	2100      	movs	r1, #0
 800153e:	489c      	ldr	r0, [pc, #624]	; (80017b0 <main+0x610>)
 8001540:	f7ff fbea 	bl	8000d18 <set_motor_dir>
			  __HAL_TIM_SetCompare(PWM_TIMER_SILNIKI, CH_PRZOD_LEWY,0);
 8001544:	4b99      	ldr	r3, [pc, #612]	; (80017ac <main+0x60c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2200      	movs	r2, #0
 800154a:	63da      	str	r2, [r3, #60]	; 0x3c

			  set_motor_dir(&mot_tyl_prawy,0);
 800154c:	2100      	movs	r1, #0
 800154e:	4899      	ldr	r0, [pc, #612]	; (80017b4 <main+0x614>)
 8001550:	f7ff fbe2 	bl	8000d18 <set_motor_dir>
			  __HAL_TIM_SetCompare(PWM_TIMER_SILNIKI, CH_TYL_PRAWY,0);
 8001554:	4b95      	ldr	r3, [pc, #596]	; (80017ac <main+0x60c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2200      	movs	r2, #0
 800155a:	639a      	str	r2, [r3, #56]	; 0x38
			  set_motor_dir(&mot_przod_prawy,0);
 800155c:	2100      	movs	r1, #0
 800155e:	4896      	ldr	r0, [pc, #600]	; (80017b8 <main+0x618>)
 8001560:	f7ff fbda 	bl	8000d18 <set_motor_dir>
			  __HAL_TIM_SetCompare(PWM_TIMER_SILNIKI, CH_PRZOD_PRAWY,0);
 8001564:	4b91      	ldr	r3, [pc, #580]	; (80017ac <main+0x60c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2200      	movs	r2, #0
 800156a:	641a      	str	r2, [r3, #64]	; 0x40
				  __HAL_TIM_SetCompare(PWM_TIMER, CH_PRZOD_PRAWY,0);
			  }
		  }
	  } */

	  if(COMM_flaga == 1){
 800156c:	4b93      	ldr	r3, [pc, #588]	; (80017bc <main+0x61c>)
 800156e:	f993 3000 	ldrsb.w	r3, [r3]
 8001572:	2b01      	cmp	r3, #1
 8001574:	f47f aeef 	bne.w	8001356 <main+0x1b6>
		  COMM_flaga = 0;
 8001578:	4b90      	ldr	r3, [pc, #576]	; (80017bc <main+0x61c>)
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]

		  //Odbior danych
		  if(UART_flaga == 1)
 800157e:	4b90      	ldr	r3, [pc, #576]	; (80017c0 <main+0x620>)
 8001580:	f993 3000 	ldrsb.w	r3, [r3]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d102      	bne.n	800158e <main+0x3ee>
		  {
			  UART_flaga = 0;
 8001588:	4b8d      	ldr	r3, [pc, #564]	; (80017c0 <main+0x620>)
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
			  //recv_mcu = HAL_UART_Receive_IT(MCU_UART,mcu_data,sizeof(mcu_data));
		  }
		  recv_mcu = HAL_UART_Receive_IT(MCU_UART,mcu_data,sizeof(mcu_data));
 800158e:	220e      	movs	r2, #14
 8001590:	498c      	ldr	r1, [pc, #560]	; (80017c4 <main+0x624>)
 8001592:	488d      	ldr	r0, [pc, #564]	; (80017c8 <main+0x628>)
 8001594:	f004 fbe5 	bl	8005d62 <HAL_UART_Receive_IT>
 8001598:	4603      	mov	r3, r0
 800159a:	b29a      	uxth	r2, r3
 800159c:	4b8b      	ldr	r3, [pc, #556]	; (80017cc <main+0x62c>)
 800159e:	801a      	strh	r2, [r3, #0]
		  //recv_mcu = HAL_UART_Receive(MCU_UART,mcu_data,sizeof(mcu_data),100);
		  recv_pc = HAL_UART_Receive(PC_UART,pc_recv_data,PC_RECV_LEN,200);
 80015a0:	23c8      	movs	r3, #200	; 0xc8
 80015a2:	2205      	movs	r2, #5
 80015a4:	498a      	ldr	r1, [pc, #552]	; (80017d0 <main+0x630>)
 80015a6:	488b      	ldr	r0, [pc, #556]	; (80017d4 <main+0x634>)
 80015a8:	f004 fb0a 	bl	8005bc0 <HAL_UART_Receive>
 80015ac:	4603      	mov	r3, r0
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	4b89      	ldr	r3, [pc, #548]	; (80017d8 <main+0x638>)
 80015b2:	801a      	strh	r2, [r3, #0]

		  //Przetwarzanie warunkow dla OFF ON oraz MA
		  if(mcu_data[0] == 1){OFF_ON = 1;}
 80015b4:	4b83      	ldr	r3, [pc, #524]	; (80017c4 <main+0x624>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d103      	bne.n	80015c4 <main+0x424>
 80015bc:	4b87      	ldr	r3, [pc, #540]	; (80017dc <main+0x63c>)
 80015be:	2201      	movs	r2, #1
 80015c0:	701a      	strb	r2, [r3, #0]
 80015c2:	e002      	b.n	80015ca <main+0x42a>
		  else{OFF_ON = 0;}
 80015c4:	4b85      	ldr	r3, [pc, #532]	; (80017dc <main+0x63c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]

		  if(mcu_data[1] == 1){MA = 1;}
 80015ca:	4b7e      	ldr	r3, [pc, #504]	; (80017c4 <main+0x624>)
 80015cc:	785b      	ldrb	r3, [r3, #1]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d103      	bne.n	80015da <main+0x43a>
 80015d2:	4b83      	ldr	r3, [pc, #524]	; (80017e0 <main+0x640>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	701a      	strb	r2, [r3, #0]
 80015d8:	e00d      	b.n	80015f6 <main+0x456>
		  else if(mcu_data[1] == 0){MA = 0;}
 80015da:	4b7a      	ldr	r3, [pc, #488]	; (80017c4 <main+0x624>)
 80015dc:	785b      	ldrb	r3, [r3, #1]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d103      	bne.n	80015ea <main+0x44a>
 80015e2:	4b7f      	ldr	r3, [pc, #508]	; (80017e0 <main+0x640>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
 80015e8:	e005      	b.n	80015f6 <main+0x456>
		  else
		  {
			  MA = 0;
 80015ea:	4b7d      	ldr	r3, [pc, #500]	; (80017e0 <main+0x640>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
			  OFF_ON = 0;
 80015f0:	4b7a      	ldr	r3, [pc, #488]	; (80017dc <main+0x63c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
		  }

		  //Odczyt pomiarow z enkoderow na masterze
		  pomiar_przod_lewy = (int16_t)((mcu_data[3] << 8) | mcu_data[2]);
 80015f6:	4b73      	ldr	r3, [pc, #460]	; (80017c4 <main+0x624>)
 80015f8:	78db      	ldrb	r3, [r3, #3]
 80015fa:	021b      	lsls	r3, r3, #8
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	4b71      	ldr	r3, [pc, #452]	; (80017c4 <main+0x624>)
 8001600:	789b      	ldrb	r3, [r3, #2]
 8001602:	b21b      	sxth	r3, r3
 8001604:	4313      	orrs	r3, r2
 8001606:	b21a      	sxth	r2, r3
 8001608:	4b76      	ldr	r3, [pc, #472]	; (80017e4 <main+0x644>)
 800160a:	801a      	strh	r2, [r3, #0]
		  if(mot_przod_lewy.DIRECTION == DIR_CCW)
 800160c:	4b68      	ldr	r3, [pc, #416]	; (80017b0 <main+0x610>)
 800160e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d108      	bne.n	8001628 <main+0x488>
		  {
			  pomiar_przod_lewy = -pomiar_przod_lewy;
 8001616:	4b73      	ldr	r3, [pc, #460]	; (80017e4 <main+0x644>)
 8001618:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161c:	b29b      	uxth	r3, r3
 800161e:	425b      	negs	r3, r3
 8001620:	b29b      	uxth	r3, r3
 8001622:	b21a      	sxth	r2, r3
 8001624:	4b6f      	ldr	r3, [pc, #444]	; (80017e4 <main+0x644>)
 8001626:	801a      	strh	r2, [r3, #0]
		  }
		  pomiar_przod_prawy = (int16_t)((mcu_data[5] << 8) | mcu_data[4]);
 8001628:	4b66      	ldr	r3, [pc, #408]	; (80017c4 <main+0x624>)
 800162a:	795b      	ldrb	r3, [r3, #5]
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	b21a      	sxth	r2, r3
 8001630:	4b64      	ldr	r3, [pc, #400]	; (80017c4 <main+0x624>)
 8001632:	791b      	ldrb	r3, [r3, #4]
 8001634:	b21b      	sxth	r3, r3
 8001636:	4313      	orrs	r3, r2
 8001638:	b21a      	sxth	r2, r3
 800163a:	4b6b      	ldr	r3, [pc, #428]	; (80017e8 <main+0x648>)
 800163c:	801a      	strh	r2, [r3, #0]
		  if(mot_przod_prawy.DIRECTION == DIR_CCW)
 800163e:	4b5e      	ldr	r3, [pc, #376]	; (80017b8 <main+0x618>)
 8001640:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d108      	bne.n	800165a <main+0x4ba>
		  {
			  pomiar_przod_prawy = -pomiar_przod_prawy;
 8001648:	4b67      	ldr	r3, [pc, #412]	; (80017e8 <main+0x648>)
 800164a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164e:	b29b      	uxth	r3, r3
 8001650:	425b      	negs	r3, r3
 8001652:	b29b      	uxth	r3, r3
 8001654:	b21a      	sxth	r2, r3
 8001656:	4b64      	ldr	r3, [pc, #400]	; (80017e8 <main+0x648>)
 8001658:	801a      	strh	r2, [r3, #0]
		  }

		  //Zwrotka z serwo i maksymalna predkosc
		  pomiar_serwo_kat = (int16_t)((mcu_data[7] << 8) | mcu_data[6]);
 800165a:	4b5a      	ldr	r3, [pc, #360]	; (80017c4 <main+0x624>)
 800165c:	79db      	ldrb	r3, [r3, #7]
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	b21a      	sxth	r2, r3
 8001662:	4b58      	ldr	r3, [pc, #352]	; (80017c4 <main+0x624>)
 8001664:	799b      	ldrb	r3, [r3, #6]
 8001666:	b21b      	sxth	r3, r3
 8001668:	4313      	orrs	r3, r2
 800166a:	b21a      	sxth	r2, r3
 800166c:	4b5f      	ldr	r3, [pc, #380]	; (80017ec <main+0x64c>)
 800166e:	801a      	strh	r2, [r3, #0]
		  I4_Vmax = (int16_t)((mcu_data[13] << 8) | mcu_data[12]);
 8001670:	4b54      	ldr	r3, [pc, #336]	; (80017c4 <main+0x624>)
 8001672:	7b5b      	ldrb	r3, [r3, #13]
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	b21a      	sxth	r2, r3
 8001678:	4b52      	ldr	r3, [pc, #328]	; (80017c4 <main+0x624>)
 800167a:	7b1b      	ldrb	r3, [r3, #12]
 800167c:	b21b      	sxth	r3, r3
 800167e:	4313      	orrs	r3, r2
 8001680:	b21a      	sxth	r2, r3
 8001682:	4b5b      	ldr	r3, [pc, #364]	; (80017f0 <main+0x650>)
 8001684:	801a      	strh	r2, [r3, #0]

		  //Jeśli MA == 0 to odczyt z PILOTA z mastera
		  if(MA == 0){
 8001686:	4b56      	ldr	r3, [pc, #344]	; (80017e0 <main+0x640>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	f083 0301 	eor.w	r3, r3, #1
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	d015      	beq.n	80016c0 <main+0x520>
			  I1_V = (int16_t)((mcu_data[9] << 8) | mcu_data[8]);
 8001694:	4b4b      	ldr	r3, [pc, #300]	; (80017c4 <main+0x624>)
 8001696:	7a5b      	ldrb	r3, [r3, #9]
 8001698:	021b      	lsls	r3, r3, #8
 800169a:	b21a      	sxth	r2, r3
 800169c:	4b49      	ldr	r3, [pc, #292]	; (80017c4 <main+0x624>)
 800169e:	7a1b      	ldrb	r3, [r3, #8]
 80016a0:	b21b      	sxth	r3, r3
 80016a2:	4313      	orrs	r3, r2
 80016a4:	b21a      	sxth	r2, r3
 80016a6:	4b53      	ldr	r3, [pc, #332]	; (80017f4 <main+0x654>)
 80016a8:	801a      	strh	r2, [r3, #0]
			  I2_OMEGA = (int16_t)((mcu_data[11] << 8) | mcu_data[10]);
 80016aa:	4b46      	ldr	r3, [pc, #280]	; (80017c4 <main+0x624>)
 80016ac:	7adb      	ldrb	r3, [r3, #11]
 80016ae:	021b      	lsls	r3, r3, #8
 80016b0:	b21a      	sxth	r2, r3
 80016b2:	4b44      	ldr	r3, [pc, #272]	; (80017c4 <main+0x624>)
 80016b4:	7a9b      	ldrb	r3, [r3, #10]
 80016b6:	b21b      	sxth	r3, r3
 80016b8:	4313      	orrs	r3, r2
 80016ba:	b21a      	sxth	r2, r3
 80016bc:	4b4e      	ldr	r3, [pc, #312]	; (80017f8 <main+0x658>)
 80016be:	801a      	strh	r2, [r3, #0]
		  }

		  //Jeśli MA == 1 to odczyt z PC
		  if(MA == 1){
 80016c0:	4b47      	ldr	r3, [pc, #284]	; (80017e0 <main+0x640>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d020      	beq.n	800170a <main+0x56a>

			  I1_V = (int16_t)((pc_recv_data[2] << 8) | pc_recv_data[1]);
 80016c8:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <main+0x630>)
 80016ca:	789b      	ldrb	r3, [r3, #2]
 80016cc:	021b      	lsls	r3, r3, #8
 80016ce:	b21a      	sxth	r2, r3
 80016d0:	4b3f      	ldr	r3, [pc, #252]	; (80017d0 <main+0x630>)
 80016d2:	785b      	ldrb	r3, [r3, #1]
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	4313      	orrs	r3, r2
 80016d8:	b21a      	sxth	r2, r3
 80016da:	4b46      	ldr	r3, [pc, #280]	; (80017f4 <main+0x654>)
 80016dc:	801a      	strh	r2, [r3, #0]
			  I2_OMEGA = (int16_t)((pc_recv_data[4] << 8) | pc_recv_data[3]);
 80016de:	4b3c      	ldr	r3, [pc, #240]	; (80017d0 <main+0x630>)
 80016e0:	791b      	ldrb	r3, [r3, #4]
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	4b3a      	ldr	r3, [pc, #232]	; (80017d0 <main+0x630>)
 80016e8:	78db      	ldrb	r3, [r3, #3]
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	4313      	orrs	r3, r2
 80016ee:	b21a      	sxth	r2, r3
 80016f0:	4b41      	ldr	r3, [pc, #260]	; (80017f8 <main+0x658>)
 80016f2:	801a      	strh	r2, [r3, #0]

			  if(pc_recv_data[0] == 1){OFF_ON = 1;}
 80016f4:	4b36      	ldr	r3, [pc, #216]	; (80017d0 <main+0x630>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d103      	bne.n	8001704 <main+0x564>
 80016fc:	4b37      	ldr	r3, [pc, #220]	; (80017dc <main+0x63c>)
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
 8001702:	e002      	b.n	800170a <main+0x56a>
			  else{OFF_ON = 0;}
 8001704:	4b35      	ldr	r3, [pc, #212]	; (80017dc <main+0x63c>)
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]
		  }

		  if(STOP_AW == 1){
 800170a:	4b3c      	ldr	r3, [pc, #240]	; (80017fc <main+0x65c>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d005      	beq.n	800171e <main+0x57e>
			  OFF_ON = 0;
 8001712:	4b32      	ldr	r3, [pc, #200]	; (80017dc <main+0x63c>)
 8001714:	2200      	movs	r2, #0
 8001716:	701a      	strb	r2, [r3, #0]
			  MA = 0;
 8001718:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <main+0x640>)
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
		  }

		  if(OFF_ON == 0){
 800171e:	4b2f      	ldr	r3, [pc, #188]	; (80017dc <main+0x63c>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	f083 0301 	eor.w	r3, r3, #1
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	d010      	beq.n	800174e <main+0x5ae>
			  I1_V = 0;
 800172c:	4b31      	ldr	r3, [pc, #196]	; (80017f4 <main+0x654>)
 800172e:	2200      	movs	r2, #0
 8001730:	801a      	strh	r2, [r3, #0]
			  I2_OMEGA = 0;
 8001732:	4b31      	ldr	r3, [pc, #196]	; (80017f8 <main+0x658>)
 8001734:	2200      	movs	r2, #0
 8001736:	801a      	strh	r2, [r3, #0]
			  sterowanie_serwo_kat = 0;
 8001738:	4b31      	ldr	r3, [pc, #196]	; (8001800 <main+0x660>)
 800173a:	2200      	movs	r2, #0
 800173c:	801a      	strh	r2, [r3, #0]

			  HAL_GPIO_WritePin(WYLACZNIK_GPIO_Port, WYLACZNIK_Pin, 1);
 800173e:	2201      	movs	r2, #1
 8001740:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001748:	f001 fcf2 	bl	8003130 <HAL_GPIO_WritePin>
 800174c:	e00a      	b.n	8001764 <main+0x5c4>
		  }
		  else if(OFF_ON == 1){
 800174e:	4b23      	ldr	r3, [pc, #140]	; (80017dc <main+0x63c>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d006      	beq.n	8001764 <main+0x5c4>
			  HAL_GPIO_WritePin(WYLACZNIK_GPIO_Port, WYLACZNIK_Pin, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800175c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001760:	f001 fce6 	bl	8003130 <HAL_GPIO_WritePin>
		  }

		  //Sterowanie serwonapędem oraz sprawdzenie ograniczeń
		  if (OFF_ON == 1){
 8001764:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <main+0x63c>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d078      	beq.n	800185e <main+0x6be>
			  if (krancowka == 1){
 800176c:	4b25      	ldr	r3, [pc, #148]	; (8001804 <main+0x664>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d049      	beq.n	8001808 <main+0x668>
				  if (sterowanie_serwo_kat > 0){
 8001774:	4b22      	ldr	r3, [pc, #136]	; (8001800 <main+0x660>)
 8001776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177a:	2b00      	cmp	r3, #0
 800177c:	dd09      	ble.n	8001792 <main+0x5f2>
					  I2_OMEGA = sterowanie_serwo_kat - 2;
 800177e:	4b20      	ldr	r3, [pc, #128]	; (8001800 <main+0x660>)
 8001780:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001784:	b29b      	uxth	r3, r3
 8001786:	3b02      	subs	r3, #2
 8001788:	b29b      	uxth	r3, r3
 800178a:	b21a      	sxth	r2, r3
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <main+0x658>)
 800178e:	801a      	strh	r2, [r3, #0]
 8001790:	e03f      	b.n	8001812 <main+0x672>

				  }
				  else{
					  I2_OMEGA = sterowanie_serwo_kat + 2;
 8001792:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <main+0x660>)
 8001794:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001798:	b29b      	uxth	r3, r3
 800179a:	3302      	adds	r3, #2
 800179c:	b29b      	uxth	r3, r3
 800179e:	b21a      	sxth	r2, r3
 80017a0:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <main+0x658>)
 80017a2:	801a      	strh	r2, [r3, #0]
 80017a4:	e035      	b.n	8001812 <main+0x672>
 80017a6:	bf00      	nop
 80017a8:	20000240 	.word	0x20000240
 80017ac:	20000364 	.word	0x20000364
 80017b0:	200000a4 	.word	0x200000a4
 80017b4:	20000120 	.word	0x20000120
 80017b8:	20000058 	.word	0x20000058
 80017bc:	20000030 	.word	0x20000030
 80017c0:	20000031 	.word	0x20000031
 80017c4:	20000094 	.word	0x20000094
 80017c8:	20000448 	.word	0x20000448
 80017cc:	20000034 	.word	0x20000034
 80017d0:	2000019c 	.word	0x2000019c
 80017d4:	200004cc 	.word	0x200004cc
 80017d8:	20000032 	.word	0x20000032
 80017dc:	20000000 	.word	0x20000000
 80017e0:	2000002c 	.word	0x2000002c
 80017e4:	20000046 	.word	0x20000046
 80017e8:	20000048 	.word	0x20000048
 80017ec:	20000054 	.word	0x20000054
 80017f0:	20000052 	.word	0x20000052
 80017f4:	2000004e 	.word	0x2000004e
 80017f8:	20000050 	.word	0x20000050
 80017fc:	2000002e 	.word	0x2000002e
 8001800:	20000056 	.word	0x20000056
 8001804:	2000002d 	.word	0x2000002d
				  }
			  }
			  else{sterowanie_serwo_kat = I2_OMEGA;}
 8001808:	4b8e      	ldr	r3, [pc, #568]	; (8001a44 <main+0x8a4>)
 800180a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800180e:	4b8e      	ldr	r3, [pc, #568]	; (8001a48 <main+0x8a8>)
 8001810:	801a      	strh	r2, [r3, #0]

			  //Sprawdzenie ograniczeń predkosci
			  if (I1_V > 0){
 8001812:	4b8e      	ldr	r3, [pc, #568]	; (8001a4c <main+0x8ac>)
 8001814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001818:	2b00      	cmp	r3, #0
 800181a:	dd0d      	ble.n	8001838 <main+0x698>
				  if(I1_V > I4_Vmax){
 800181c:	4b8b      	ldr	r3, [pc, #556]	; (8001a4c <main+0x8ac>)
 800181e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001822:	4b8b      	ldr	r3, [pc, #556]	; (8001a50 <main+0x8b0>)
 8001824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001828:	429a      	cmp	r2, r3
 800182a:	dd18      	ble.n	800185e <main+0x6be>
					  I1_V = I4_Vmax;
 800182c:	4b88      	ldr	r3, [pc, #544]	; (8001a50 <main+0x8b0>)
 800182e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001832:	4b86      	ldr	r3, [pc, #536]	; (8001a4c <main+0x8ac>)
 8001834:	801a      	strh	r2, [r3, #0]
 8001836:	e012      	b.n	800185e <main+0x6be>

				  }
			  }
			  else if(I1_V < -I4_Vmax){
 8001838:	4b84      	ldr	r3, [pc, #528]	; (8001a4c <main+0x8ac>)
 800183a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800183e:	461a      	mov	r2, r3
 8001840:	4b83      	ldr	r3, [pc, #524]	; (8001a50 <main+0x8b0>)
 8001842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001846:	425b      	negs	r3, r3
 8001848:	429a      	cmp	r2, r3
 800184a:	da08      	bge.n	800185e <main+0x6be>
				  I1_V = -I4_Vmax;
 800184c:	4b80      	ldr	r3, [pc, #512]	; (8001a50 <main+0x8b0>)
 800184e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001852:	b29b      	uxth	r3, r3
 8001854:	425b      	negs	r3, r3
 8001856:	b29b      	uxth	r3, r3
 8001858:	b21a      	sxth	r2, r3
 800185a:	4b7c      	ldr	r3, [pc, #496]	; (8001a4c <main+0x8ac>)
 800185c:	801a      	strh	r2, [r3, #0]
			  }
		  }

		  if(I2_OMEGA >= 0){HAL_GPIO_WritePin(DIR_SERWO_GPIO_Port, DIR_SERWO_Pin, 0);}
 800185e:	4b79      	ldr	r3, [pc, #484]	; (8001a44 <main+0x8a4>)
 8001860:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001864:	2b00      	cmp	r3, #0
 8001866:	db07      	blt.n	8001878 <main+0x6d8>
 8001868:	2200      	movs	r2, #0
 800186a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800186e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001872:	f001 fc5d 	bl	8003130 <HAL_GPIO_WritePin>
 8001876:	e006      	b.n	8001886 <main+0x6e6>
		  else{HAL_GPIO_WritePin(DIR_SERWO_GPIO_Port, DIR_SERWO_Pin, 1);}
 8001878:	2201      	movs	r2, #1
 800187a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800187e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001882:	f001 fc55 	bl	8003130 <HAL_GPIO_WritePin>
		  __HAL_TIM_SetCompare(PWM_TIMER_SERWO, CH_SERWO,abs(I2_OMEGA));
 8001886:	4b6f      	ldr	r3, [pc, #444]	; (8001a44 <main+0x8a4>)
 8001888:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188c:	2b00      	cmp	r3, #0
 800188e:	bfb8      	it	lt
 8001890:	425b      	neglt	r3, r3
 8001892:	b29a      	uxth	r2, r3
 8001894:	4b6f      	ldr	r3, [pc, #444]	; (8001a54 <main+0x8b4>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	635a      	str	r2, [r3, #52]	; 0x34

		  setpoint_przod_lewy = przelicz_kat(I1_V,0);
 800189a:	4b6c      	ldr	r3, [pc, #432]	; (8001a4c <main+0x8ac>)
 800189c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 f9be 	bl	8001c24 <przelicz_kat>
 80018a8:	4603      	mov	r3, r0
 80018aa:	461a      	mov	r2, r3
 80018ac:	4b6a      	ldr	r3, [pc, #424]	; (8001a58 <main+0x8b8>)
 80018ae:	801a      	strh	r2, [r3, #0]
		  setpoint_przod_prawy = przelicz_kat(I1_V,1);
 80018b0:	4b66      	ldr	r3, [pc, #408]	; (8001a4c <main+0x8ac>)
 80018b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b6:	2101      	movs	r1, #1
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 f9b3 	bl	8001c24 <przelicz_kat>
 80018be:	4603      	mov	r3, r0
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b66      	ldr	r3, [pc, #408]	; (8001a5c <main+0x8bc>)
 80018c4:	801a      	strh	r2, [r3, #0]
		  setpoint_tyl_lewy = I1_V;
 80018c6:	4b61      	ldr	r3, [pc, #388]	; (8001a4c <main+0x8ac>)
 80018c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80018cc:	4b64      	ldr	r3, [pc, #400]	; (8001a60 <main+0x8c0>)
 80018ce:	801a      	strh	r2, [r3, #0]
		  setpoint_tyl_prawy = I1_V;
 80018d0:	4b5e      	ldr	r3, [pc, #376]	; (8001a4c <main+0x8ac>)
 80018d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80018d6:	4b63      	ldr	r3, [pc, #396]	; (8001a64 <main+0x8c4>)
 80018d8:	801a      	strh	r2, [r3, #0]



		  //Transmisja danych UARTEM do PC
		  if(OFF_ON == 1){pc_send_data[0] = 1;}
 80018da:	4b63      	ldr	r3, [pc, #396]	; (8001a68 <main+0x8c8>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <main+0x74a>
 80018e2:	4b62      	ldr	r3, [pc, #392]	; (8001a6c <main+0x8cc>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	701a      	strb	r2, [r3, #0]
 80018e8:	e002      	b.n	80018f0 <main+0x750>
		  else{pc_send_data[0] = 0;}
 80018ea:	4b60      	ldr	r3, [pc, #384]	; (8001a6c <main+0x8cc>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
		  pc_send_data[1] = (uint8_t)pomiar_tyl_lewy;
 80018f0:	4b5f      	ldr	r3, [pc, #380]	; (8001a70 <main+0x8d0>)
 80018f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	4b5c      	ldr	r3, [pc, #368]	; (8001a6c <main+0x8cc>)
 80018fa:	705a      	strb	r2, [r3, #1]
		  pc_send_data[2] = (uint8_t)(pomiar_tyl_lewy >> 8);
 80018fc:	4b5c      	ldr	r3, [pc, #368]	; (8001a70 <main+0x8d0>)
 80018fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001902:	121b      	asrs	r3, r3, #8
 8001904:	b21b      	sxth	r3, r3
 8001906:	b2da      	uxtb	r2, r3
 8001908:	4b58      	ldr	r3, [pc, #352]	; (8001a6c <main+0x8cc>)
 800190a:	709a      	strb	r2, [r3, #2]
		  pc_send_data[3] = (uint8_t)pomiar_tyl_prawy;
 800190c:	4b59      	ldr	r3, [pc, #356]	; (8001a74 <main+0x8d4>)
 800190e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001912:	b2da      	uxtb	r2, r3
 8001914:	4b55      	ldr	r3, [pc, #340]	; (8001a6c <main+0x8cc>)
 8001916:	70da      	strb	r2, [r3, #3]
		  pc_send_data[4] = (uint8_t)(pomiar_tyl_prawy >> 8);
 8001918:	4b56      	ldr	r3, [pc, #344]	; (8001a74 <main+0x8d4>)
 800191a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800191e:	121b      	asrs	r3, r3, #8
 8001920:	b21b      	sxth	r3, r3
 8001922:	b2da      	uxtb	r2, r3
 8001924:	4b51      	ldr	r3, [pc, #324]	; (8001a6c <main+0x8cc>)
 8001926:	711a      	strb	r2, [r3, #4]
		  pc_send_data[5] = (uint8_t)pomiar_przod_lewy;
 8001928:	4b53      	ldr	r3, [pc, #332]	; (8001a78 <main+0x8d8>)
 800192a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800192e:	b2da      	uxtb	r2, r3
 8001930:	4b4e      	ldr	r3, [pc, #312]	; (8001a6c <main+0x8cc>)
 8001932:	715a      	strb	r2, [r3, #5]
		  pc_send_data[6] = (uint8_t)(pomiar_przod_lewy >> 8);
 8001934:	4b50      	ldr	r3, [pc, #320]	; (8001a78 <main+0x8d8>)
 8001936:	f9b3 3000 	ldrsh.w	r3, [r3]
 800193a:	121b      	asrs	r3, r3, #8
 800193c:	b21b      	sxth	r3, r3
 800193e:	b2da      	uxtb	r2, r3
 8001940:	4b4a      	ldr	r3, [pc, #296]	; (8001a6c <main+0x8cc>)
 8001942:	719a      	strb	r2, [r3, #6]
		  pc_send_data[7] = (uint8_t)pomiar_przod_prawy;
 8001944:	4b4d      	ldr	r3, [pc, #308]	; (8001a7c <main+0x8dc>)
 8001946:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194a:	b2da      	uxtb	r2, r3
 800194c:	4b47      	ldr	r3, [pc, #284]	; (8001a6c <main+0x8cc>)
 800194e:	71da      	strb	r2, [r3, #7]
		  pc_send_data[8] = (uint8_t)(pomiar_przod_prawy >> 8);
 8001950:	4b4a      	ldr	r3, [pc, #296]	; (8001a7c <main+0x8dc>)
 8001952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001956:	121b      	asrs	r3, r3, #8
 8001958:	b21b      	sxth	r3, r3
 800195a:	b2da      	uxtb	r2, r3
 800195c:	4b43      	ldr	r3, [pc, #268]	; (8001a6c <main+0x8cc>)
 800195e:	721a      	strb	r2, [r3, #8]
		  pc_send_data[9] = (uint8_t)pomiar_serwo_kat;
 8001960:	4b47      	ldr	r3, [pc, #284]	; (8001a80 <main+0x8e0>)
 8001962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001966:	b2da      	uxtb	r2, r3
 8001968:	4b40      	ldr	r3, [pc, #256]	; (8001a6c <main+0x8cc>)
 800196a:	725a      	strb	r2, [r3, #9]
		  pc_send_data[10] = (uint8_t)(pomiar_serwo_kat >> 8);
 800196c:	4b44      	ldr	r3, [pc, #272]	; (8001a80 <main+0x8e0>)
 800196e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001972:	121b      	asrs	r3, r3, #8
 8001974:	b21b      	sxth	r3, r3
 8001976:	b2da      	uxtb	r2, r3
 8001978:	4b3c      	ldr	r3, [pc, #240]	; (8001a6c <main+0x8cc>)
 800197a:	729a      	strb	r2, [r3, #10]
		  pc_send_data[11] = (uint8_t)sterowanie_tyl_lewy;
 800197c:	4b41      	ldr	r3, [pc, #260]	; (8001a84 <main+0x8e4>)
 800197e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001982:	b2da      	uxtb	r2, r3
 8001984:	4b39      	ldr	r3, [pc, #228]	; (8001a6c <main+0x8cc>)
 8001986:	72da      	strb	r2, [r3, #11]
		  pc_send_data[12] = (uint8_t)(sterowanie_tyl_lewy >> 8);
 8001988:	4b3e      	ldr	r3, [pc, #248]	; (8001a84 <main+0x8e4>)
 800198a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800198e:	121b      	asrs	r3, r3, #8
 8001990:	b21b      	sxth	r3, r3
 8001992:	b2da      	uxtb	r2, r3
 8001994:	4b35      	ldr	r3, [pc, #212]	; (8001a6c <main+0x8cc>)
 8001996:	731a      	strb	r2, [r3, #12]
		  pc_send_data[13] = (uint8_t)sterowanie_tyl_prawy;
 8001998:	4b3b      	ldr	r3, [pc, #236]	; (8001a88 <main+0x8e8>)
 800199a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	4b32      	ldr	r3, [pc, #200]	; (8001a6c <main+0x8cc>)
 80019a2:	735a      	strb	r2, [r3, #13]
		  pc_send_data[14] = (uint8_t)(sterowanie_tyl_prawy >> 8);
 80019a4:	4b38      	ldr	r3, [pc, #224]	; (8001a88 <main+0x8e8>)
 80019a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019aa:	121b      	asrs	r3, r3, #8
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	4b2e      	ldr	r3, [pc, #184]	; (8001a6c <main+0x8cc>)
 80019b2:	739a      	strb	r2, [r3, #14]
		  pc_send_data[15] = (uint8_t)sterowanie_przod_lewy;
 80019b4:	4b35      	ldr	r3, [pc, #212]	; (8001a8c <main+0x8ec>)
 80019b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	4b2b      	ldr	r3, [pc, #172]	; (8001a6c <main+0x8cc>)
 80019be:	73da      	strb	r2, [r3, #15]
		  pc_send_data[16] = (uint8_t)(sterowanie_przod_lewy >> 8);
 80019c0:	4b32      	ldr	r3, [pc, #200]	; (8001a8c <main+0x8ec>)
 80019c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c6:	121b      	asrs	r3, r3, #8
 80019c8:	b21b      	sxth	r3, r3
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	4b27      	ldr	r3, [pc, #156]	; (8001a6c <main+0x8cc>)
 80019ce:	741a      	strb	r2, [r3, #16]
		  pc_send_data[17] = (uint8_t)sterowanie_przod_prawy;
 80019d0:	4b2f      	ldr	r3, [pc, #188]	; (8001a90 <main+0x8f0>)
 80019d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	4b24      	ldr	r3, [pc, #144]	; (8001a6c <main+0x8cc>)
 80019da:	745a      	strb	r2, [r3, #17]
		  pc_send_data[18] = (uint8_t)(sterowanie_przod_prawy >> 8);
 80019dc:	4b2c      	ldr	r3, [pc, #176]	; (8001a90 <main+0x8f0>)
 80019de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e2:	121b      	asrs	r3, r3, #8
 80019e4:	b21b      	sxth	r3, r3
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <main+0x8cc>)
 80019ea:	749a      	strb	r2, [r3, #18]
		  pc_send_data[19] = (uint8_t)sterowanie_serwo_kat;
 80019ec:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <main+0x8a8>)
 80019ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <main+0x8cc>)
 80019f6:	74da      	strb	r2, [r3, #19]
		  pc_send_data[20] = (uint8_t)(sterowanie_serwo_kat >> 8);
 80019f8:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <main+0x8a8>)
 80019fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fe:	121b      	asrs	r3, r3, #8
 8001a00:	b21b      	sxth	r3, r3
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <main+0x8cc>)
 8001a06:	751a      	strb	r2, [r3, #20]
		  if(MA == 1){pc_send_data[21] = 1;}
 8001a08:	4b22      	ldr	r3, [pc, #136]	; (8001a94 <main+0x8f4>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <main+0x878>
 8001a10:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <main+0x8cc>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	755a      	strb	r2, [r3, #21]
 8001a16:	e00d      	b.n	8001a34 <main+0x894>
		  else if(MA == 0){
 8001a18:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <main+0x8f4>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	f083 0301 	eor.w	r3, r3, #1
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <main+0x88e>
			  pc_send_data[21] = 0;
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <main+0x8cc>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	755a      	strb	r2, [r3, #21]
 8001a2c:	e002      	b.n	8001a34 <main+0x894>
		  }
		  else{pc_send_data[21] = 3;}
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <main+0x8cc>)
 8001a30:	2203      	movs	r2, #3
 8001a32:	755a      	strb	r2, [r3, #21]
		  HAL_UART_Transmit(PC_UART, pc_send_data, PC_SEND_LEN, 200);
 8001a34:	23c8      	movs	r3, #200	; 0xc8
 8001a36:	2215      	movs	r2, #21
 8001a38:	490c      	ldr	r1, [pc, #48]	; (8001a6c <main+0x8cc>)
 8001a3a:	4817      	ldr	r0, [pc, #92]	; (8001a98 <main+0x8f8>)
 8001a3c:	f004 f82c 	bl	8005a98 <HAL_UART_Transmit>
	  if(PID_flaga == 1){
 8001a40:	e489      	b.n	8001356 <main+0x1b6>
 8001a42:	bf00      	nop
 8001a44:	20000050 	.word	0x20000050
 8001a48:	20000056 	.word	0x20000056
 8001a4c:	2000004e 	.word	0x2000004e
 8001a50:	20000052 	.word	0x20000052
 8001a54:	20000280 	.word	0x20000280
 8001a58:	2000004a 	.word	0x2000004a
 8001a5c:	2000004c 	.word	0x2000004c
 8001a60:	2000003e 	.word	0x2000003e
 8001a64:	20000040 	.word	0x20000040
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	200001a4 	.word	0x200001a4
 8001a70:	2000003a 	.word	0x2000003a
 8001a74:	2000003c 	.word	0x2000003c
 8001a78:	20000046 	.word	0x20000046
 8001a7c:	20000048 	.word	0x20000048
 8001a80:	20000054 	.word	0x20000054
 8001a84:	20000036 	.word	0x20000036
 8001a88:	20000038 	.word	0x20000038
 8001a8c:	20000042 	.word	0x20000042
 8001a90:	20000044 	.word	0x20000044
 8001a94:	2000002c 	.word	0x2000002c
 8001a98:	200004cc 	.word	0x200004cc

08001a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b096      	sub	sp, #88	; 0x58
 8001aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aa2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aa6:	2228      	movs	r2, #40	; 0x28
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f005 fa66 	bl	8006f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
 8001acc:	611a      	str	r2, [r3, #16]
 8001ace:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ad4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001ad8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001ada:	2301      	movs	r3, #1
 8001adc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ae6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001aec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001af0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001af2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001af6:	4618      	mov	r0, r3
 8001af8:	f001 fb4a 	bl	8003190 <HAL_RCC_OscConfig>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001b02:	f000 fa49 	bl	8001f98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b06:	230f      	movs	r3, #15
 8001b08:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b16:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	2102      	movs	r1, #2
 8001b22:	4618      	mov	r0, r3
 8001b24:	f002 fa3c 	bl	8003fa0 <HAL_RCC_ClockConfig>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001b2e:	f000 fa33 	bl	8001f98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 8001b32:	f241 0301 	movw	r3, #4097	; 0x1001
 8001b36:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 fc64 	bl	8004410 <HAL_RCCEx_PeriphCLKConfig>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001b4e:	f000 fa23 	bl	8001f98 <Error_Handler>
  }
}
 8001b52:	bf00      	nop
 8001b54:	3758      	adds	r7, #88	; 0x58
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
	//if(huart == IBUS_UART) { ibus_reset_failsafe();}
	/*if(huart == MCU_UART) {
		UART_flaga = 1;
		recv_mcu = HAL_UART_Receive_IT(MCU_UART,mcu_data,sizeof(mcu_data));}
*/
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef* htim)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	if(htim == PID_TIMER){
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a09      	ldr	r2, [pc, #36]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d102      	bne.n	8001b86 <HAL_TIM_PeriodElapsedCallback+0x16>
		PID_flaga = 1;
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
	}

	if(htim == COMM_TIMER){
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a07      	ldr	r2, [pc, #28]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d102      	bne.n	8001b94 <HAL_TIM_PeriodElapsedCallback+0x24>
		COMM_flaga = 1;
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	701a      	strb	r2, [r3, #0]
	}
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	20000318 	.word	0x20000318
 8001ba4:	2000002f 	.word	0x2000002f
 8001ba8:	200003fc 	.word	0x200003fc
 8001bac:	20000030 	.word	0x20000030

08001bb0 <to_process_range>:

int16_t to_process_range(int16_t input)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	80fb      	strh	r3, [r7, #6]
	int16_t out = (int16_t)(((float)(input * Counter_20kHz_360))/1000.0);
 8001bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bbe:	f240 1267 	movw	r2, #359	; 0x167
 8001bc2:	fb02 f303 	mul.w	r3, r2, r3
 8001bc6:	ee07 3a90 	vmov	s15, r3
 8001bca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bce:	ee17 0a90 	vmov	r0, s15
 8001bd2:	f7fe fc5d 	bl	8000490 <__aeabi_f2d>
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <to_process_range+0x70>)
 8001bdc:	f7fe fdda 	bl	8000794 <__aeabi_ddiv>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	f7fe ff44 	bl	8000a74 <__aeabi_d2iz>
 8001bec:	4603      	mov	r3, r0
 8001bee:	81fb      	strh	r3, [r7, #14]

	if (out > Counter_20kHz_360) { out = Counter_20kHz_360; }
 8001bf0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bf4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001bf8:	db03      	blt.n	8001c02 <to_process_range+0x52>
 8001bfa:	f240 1367 	movw	r3, #359	; 0x167
 8001bfe:	81fb      	strh	r3, [r7, #14]
 8001c00:	e007      	b.n	8001c12 <to_process_range+0x62>
	else if (out < -Counter_20kHz_360) { out = -Counter_20kHz_360; }
 8001c02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c06:	f513 7fb4 	cmn.w	r3, #360	; 0x168
 8001c0a:	dc02      	bgt.n	8001c12 <to_process_range+0x62>
 8001c0c:	f64f 6399 	movw	r3, #65177	; 0xfe99
 8001c10:	81fb      	strh	r3, [r7, #14]

	return out;
 8001c12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	408f4000 	.word	0x408f4000

08001c24 <przelicz_kat>:
int16_t przelicz_kat(int16_t setpoint, bool L_P){
 8001c24:	b5b0      	push	{r4, r5, r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	460a      	mov	r2, r1
 8001c2e:	80fb      	strh	r3, [r7, #6]
 8001c30:	4613      	mov	r3, r2
 8001c32:	717b      	strb	r3, [r7, #5]
	bool dir;
	float stosunek;
	float predkosc;

	int16_t tmp = (setpoint * SERWO_SCALE_MAX) / Counter_20kHz_360;
 8001c34:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	009a      	lsls	r2, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	4a96      	ldr	r2, [pc, #600]	; (8001e9c <przelicz_kat+0x278>)
 8001c44:	fb82 1203 	smull	r1, r2, r2, r3
 8001c48:	441a      	add	r2, r3
 8001c4a:	1212      	asrs	r2, r2, #8
 8001c4c:	17db      	asrs	r3, r3, #31
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	82bb      	strh	r3, [r7, #20]
	if(setpoint >= 0){
 8001c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	db02      	blt.n	8001c60 <przelicz_kat+0x3c>
		dir = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	75fb      	strb	r3, [r7, #23]
 8001c5e:	e001      	b.n	8001c64 <przelicz_kat+0x40>
	}
	else{dir = 1;}
 8001c60:	2301      	movs	r3, #1
 8001c62:	75fb      	strb	r3, [r7, #23]

	r1 = (L1*cos(tmp) + L2)/sin(tmp);
 8001c64:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fbff 	bl	800046c <__aeabi_i2d>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	ec43 2b10 	vmov	d0, r2, r3
 8001c76:	f005 f98b 	bl	8006f90 <cos>
 8001c7a:	ec51 0b10 	vmov	r0, r1, d0
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	4b87      	ldr	r3, [pc, #540]	; (8001ea0 <przelicz_kat+0x27c>)
 8001c84:	f7fe fc5c 	bl	8000540 <__aeabi_dmul>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	4b83      	ldr	r3, [pc, #524]	; (8001ea4 <przelicz_kat+0x280>)
 8001c96:	f7fe fa9d 	bl	80001d4 <__adddf3>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4614      	mov	r4, r2
 8001ca0:	461d      	mov	r5, r3
 8001ca2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fbe0 	bl	800046c <__aeabi_i2d>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	ec43 2b10 	vmov	d0, r2, r3
 8001cb4:	f005 f9bc 	bl	8007030 <sin>
 8001cb8:	ec53 2b10 	vmov	r2, r3, d0
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	4629      	mov	r1, r5
 8001cc0:	f7fe fd68 	bl	8000794 <__aeabi_ddiv>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4610      	mov	r0, r2
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f7fe fefa 	bl	8000ac4 <__aeabi_d2f>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	4a75      	ldr	r2, [pc, #468]	; (8001ea8 <przelicz_kat+0x284>)
 8001cd4:	6013      	str	r3, [r2, #0]
	r2 = (L2*cos(tmp) + L1)/sin(tmp);
 8001cd6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fbc6 	bl	800046c <__aeabi_i2d>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	ec43 2b10 	vmov	d0, r2, r3
 8001ce8:	f005 f952 	bl	8006f90 <cos>
 8001cec:	ec51 0b10 	vmov	r0, r1, d0
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	4b6b      	ldr	r3, [pc, #428]	; (8001ea4 <przelicz_kat+0x280>)
 8001cf6:	f7fe fc23 	bl	8000540 <__aeabi_dmul>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4610      	mov	r0, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	4b66      	ldr	r3, [pc, #408]	; (8001ea0 <przelicz_kat+0x27c>)
 8001d08:	f7fe fa64 	bl	80001d4 <__adddf3>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4614      	mov	r4, r2
 8001d12:	461d      	mov	r5, r3
 8001d14:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fba7 	bl	800046c <__aeabi_i2d>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	ec43 2b10 	vmov	d0, r2, r3
 8001d26:	f005 f983 	bl	8007030 <sin>
 8001d2a:	ec53 2b10 	vmov	r2, r3, d0
 8001d2e:	4620      	mov	r0, r4
 8001d30:	4629      	mov	r1, r5
 8001d32:	f7fe fd2f 	bl	8000794 <__aeabi_ddiv>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f7fe fec1 	bl	8000ac4 <__aeabi_d2f>
 8001d42:	4603      	mov	r3, r0
 8001d44:	4a59      	ldr	r2, [pc, #356]	; (8001eac <przelicz_kat+0x288>)
 8001d46:	6013      	str	r3, [r2, #0]

	predkosc = (float)( (((float)tmp) * (r1 - ( ((float)L_ADD) /2.0) )) / r2);
 8001d48:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d4c:	ee07 3a90 	vmov	s15, r3
 8001d50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d54:	ee17 0a90 	vmov	r0, s15
 8001d58:	f7fe fb9a 	bl	8000490 <__aeabi_f2d>
 8001d5c:	4604      	mov	r4, r0
 8001d5e:	460d      	mov	r5, r1
 8001d60:	4b51      	ldr	r3, [pc, #324]	; (8001ea8 <przelicz_kat+0x284>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fb93 	bl	8000490 <__aeabi_f2d>
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	4b50      	ldr	r3, [pc, #320]	; (8001eb0 <przelicz_kat+0x28c>)
 8001d70:	f7fe fa2e 	bl	80001d0 <__aeabi_dsub>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4620      	mov	r0, r4
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	f7fe fbe0 	bl	8000540 <__aeabi_dmul>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4614      	mov	r4, r2
 8001d86:	461d      	mov	r5, r3
 8001d88:	4b48      	ldr	r3, [pc, #288]	; (8001eac <przelicz_kat+0x288>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe fb7f 	bl	8000490 <__aeabi_f2d>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4620      	mov	r0, r4
 8001d98:	4629      	mov	r1, r5
 8001d9a:	f7fe fcfb 	bl	8000794 <__aeabi_ddiv>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4610      	mov	r0, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	f7fe fe8d 	bl	8000ac4 <__aeabi_d2f>
 8001daa:	4603      	mov	r3, r0
 8001dac:	613b      	str	r3, [r7, #16]
	stosunek = (r1 + ( ((float)L_ADD) /2.0))/(r1 - ( ((float)L_ADD) /2.0) );
 8001dae:	4b3e      	ldr	r3, [pc, #248]	; (8001ea8 <przelicz_kat+0x284>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fb6c 	bl	8000490 <__aeabi_f2d>
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	4b3c      	ldr	r3, [pc, #240]	; (8001eb0 <przelicz_kat+0x28c>)
 8001dbe:	f7fe fa09 	bl	80001d4 <__adddf3>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4614      	mov	r4, r2
 8001dc8:	461d      	mov	r5, r3
 8001dca:	4b37      	ldr	r3, [pc, #220]	; (8001ea8 <przelicz_kat+0x284>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe fb5e 	bl	8000490 <__aeabi_f2d>
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	4b35      	ldr	r3, [pc, #212]	; (8001eb0 <przelicz_kat+0x28c>)
 8001dda:	f7fe f9f9 	bl	80001d0 <__aeabi_dsub>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4620      	mov	r0, r4
 8001de4:	4629      	mov	r1, r5
 8001de6:	f7fe fcd5 	bl	8000794 <__aeabi_ddiv>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4610      	mov	r0, r2
 8001df0:	4619      	mov	r1, r3
 8001df2:	f7fe fe67 	bl	8000ac4 <__aeabi_d2f>
 8001df6:	4603      	mov	r3, r0
 8001df8:	60fb      	str	r3, [r7, #12]

	if( (L_P == 0) && (dir == 0) ){
 8001dfa:	797b      	ldrb	r3, [r7, #5]
 8001dfc:	f083 0301 	eor.w	r3, r3, #1
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d011      	beq.n	8001e2a <przelicz_kat+0x206>
 8001e06:	7dfb      	ldrb	r3, [r7, #23]
 8001e08:	f083 0301 	eor.w	r3, r3, #1
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00b      	beq.n	8001e2a <przelicz_kat+0x206>
		return (int16_t)(stosunek*predkosc);
 8001e12:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e16:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e22:	ee17 3a90 	vmov	r3, s15
 8001e26:	b21b      	sxth	r3, r3
 8001e28:	e034      	b.n	8001e94 <przelicz_kat+0x270>
	}
	else if( (L_P == 0) && (dir == 1) ){
 8001e2a:	797b      	ldrb	r3, [r7, #5]
 8001e2c:	f083 0301 	eor.w	r3, r3, #1
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00a      	beq.n	8001e4c <przelicz_kat+0x228>
 8001e36:	7dfb      	ldrb	r3, [r7, #23]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d007      	beq.n	8001e4c <przelicz_kat+0x228>
			return (int16_t)(predkosc);
 8001e3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e44:	ee17 3a90 	vmov	r3, s15
 8001e48:	b21b      	sxth	r3, r3
 8001e4a:	e023      	b.n	8001e94 <przelicz_kat+0x270>
	}
	else if( (L_P == 1) && (dir == 1) ){
 8001e4c:	797b      	ldrb	r3, [r7, #5]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00e      	beq.n	8001e70 <przelicz_kat+0x24c>
 8001e52:	7dfb      	ldrb	r3, [r7, #23]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00b      	beq.n	8001e70 <przelicz_kat+0x24c>
			return (int16_t)(stosunek*predkosc);
 8001e58:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e68:	ee17 3a90 	vmov	r3, s15
 8001e6c:	b21b      	sxth	r3, r3
 8001e6e:	e011      	b.n	8001e94 <przelicz_kat+0x270>
	}
	else if( (L_P == 1) && (dir == 0) ){
 8001e70:	797b      	ldrb	r3, [r7, #5]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00d      	beq.n	8001e92 <przelicz_kat+0x26e>
 8001e76:	7dfb      	ldrb	r3, [r7, #23]
 8001e78:	f083 0301 	eor.w	r3, r3, #1
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d007      	beq.n	8001e92 <przelicz_kat+0x26e>
			return (int16_t)(predkosc);
 8001e82:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e8a:	ee17 3a90 	vmov	r3, s15
 8001e8e:	b21b      	sxth	r3, r3
 8001e90:	e000      	b.n	8001e94 <przelicz_kat+0x270>
	}
	else{return 0;}
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e9c:	b68d3135 	.word	0xb68d3135
 8001ea0:	40458000 	.word	0x40458000
 8001ea4:	40240000 	.word	0x40240000
 8001ea8:	2000027c 	.word	0x2000027c
 8001eac:	2000023c 	.word	0x2000023c
 8001eb0:	40390000 	.word	0x40390000

08001eb4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == STOP_AW_Pin)
 8001ebe:	88fb      	ldrh	r3, [r7, #6]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d113      	bne.n	8001eec <HAL_GPIO_EXTI_Callback+0x38>
    {
    	if(HAL_GPIO_ReadPin(STOP_AW_GPIO_Port, STOP_AW_Pin) == GPIO_PIN_SET){
 8001ec4:	2102      	movs	r1, #2
 8001ec6:	4830      	ldr	r0, [pc, #192]	; (8001f88 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001ec8:	f001 f91a 	bl	8003100 <HAL_GPIO_ReadPin>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d102      	bne.n	8001ed8 <HAL_GPIO_EXTI_Callback+0x24>
    		STOP_AW = 1;
 8001ed2:	4b2e      	ldr	r3, [pc, #184]	; (8001f8c <HAL_GPIO_EXTI_Callback+0xd8>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	701a      	strb	r2, [r3, #0]
    	}
    	if(HAL_GPIO_ReadPin(STOP_AW_GPIO_Port, STOP_AW_Pin) == GPIO_PIN_RESET){
 8001ed8:	2102      	movs	r1, #2
 8001eda:	482b      	ldr	r0, [pc, #172]	; (8001f88 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001edc:	f001 f910 	bl	8003100 <HAL_GPIO_ReadPin>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d102      	bne.n	8001eec <HAL_GPIO_EXTI_Callback+0x38>
    	    STOP_AW = 0;
 8001ee6:	4b29      	ldr	r3, [pc, #164]	; (8001f8c <HAL_GPIO_EXTI_Callback+0xd8>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
    	}

    }

    if(GPIO_Pin == KRANCOWKA_1_Pin)
 8001eec:	88fb      	ldrh	r3, [r7, #6]
 8001eee:	2b08      	cmp	r3, #8
 8001ef0:	d121      	bne.n	8001f36 <HAL_GPIO_EXTI_Callback+0x82>
    {
    	if((HAL_GPIO_ReadPin(KRANCOWKA_1_GPIO_Port, KRANCOWKA_1_Pin) == GPIO_PIN_SET) || (HAL_GPIO_ReadPin(KRANCOWKA_2_GPIO_Port, KRANCOWKA_2_Pin) == GPIO_PIN_SET)){
 8001ef2:	2108      	movs	r1, #8
 8001ef4:	4826      	ldr	r0, [pc, #152]	; (8001f90 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001ef6:	f001 f903 	bl	8003100 <HAL_GPIO_ReadPin>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d006      	beq.n	8001f0e <HAL_GPIO_EXTI_Callback+0x5a>
 8001f00:	2110      	movs	r1, #16
 8001f02:	4823      	ldr	r0, [pc, #140]	; (8001f90 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001f04:	f001 f8fc 	bl	8003100 <HAL_GPIO_ReadPin>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d102      	bne.n	8001f14 <HAL_GPIO_EXTI_Callback+0x60>
    		krancowka = 1;
 8001f0e:	4b21      	ldr	r3, [pc, #132]	; (8001f94 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	701a      	strb	r2, [r3, #0]
    	}
    	if((HAL_GPIO_ReadPin(KRANCOWKA_1_GPIO_Port, KRANCOWKA_1_Pin) == GPIO_PIN_RESET) && (HAL_GPIO_ReadPin(KRANCOWKA_2_GPIO_Port, KRANCOWKA_2_Pin) == GPIO_PIN_RESET)){
 8001f14:	2108      	movs	r1, #8
 8001f16:	481e      	ldr	r0, [pc, #120]	; (8001f90 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001f18:	f001 f8f2 	bl	8003100 <HAL_GPIO_ReadPin>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d109      	bne.n	8001f36 <HAL_GPIO_EXTI_Callback+0x82>
 8001f22:	2110      	movs	r1, #16
 8001f24:	481a      	ldr	r0, [pc, #104]	; (8001f90 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001f26:	f001 f8eb 	bl	8003100 <HAL_GPIO_ReadPin>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d102      	bne.n	8001f36 <HAL_GPIO_EXTI_Callback+0x82>
    		krancowka = 0;
 8001f30:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	701a      	strb	r2, [r3, #0]
    	}
    }

    if(GPIO_Pin == KRANCOWKA_2_Pin)
 8001f36:	88fb      	ldrh	r3, [r7, #6]
 8001f38:	2b10      	cmp	r3, #16
 8001f3a:	d121      	bne.n	8001f80 <HAL_GPIO_EXTI_Callback+0xcc>
    {
    	if((HAL_GPIO_ReadPin(KRANCOWKA_1_GPIO_Port, KRANCOWKA_1_Pin) == GPIO_PIN_SET) || (HAL_GPIO_ReadPin(KRANCOWKA_2_GPIO_Port, KRANCOWKA_2_Pin) == GPIO_PIN_SET)){
 8001f3c:	2108      	movs	r1, #8
 8001f3e:	4814      	ldr	r0, [pc, #80]	; (8001f90 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001f40:	f001 f8de 	bl	8003100 <HAL_GPIO_ReadPin>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d006      	beq.n	8001f58 <HAL_GPIO_EXTI_Callback+0xa4>
 8001f4a:	2110      	movs	r1, #16
 8001f4c:	4810      	ldr	r0, [pc, #64]	; (8001f90 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001f4e:	f001 f8d7 	bl	8003100 <HAL_GPIO_ReadPin>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d102      	bne.n	8001f5e <HAL_GPIO_EXTI_Callback+0xaa>
    		krancowka = 1;
 8001f58:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	701a      	strb	r2, [r3, #0]
    	}
    	if((HAL_GPIO_ReadPin(KRANCOWKA_1_GPIO_Port, KRANCOWKA_1_Pin) == GPIO_PIN_RESET) && (HAL_GPIO_ReadPin(KRANCOWKA_2_GPIO_Port, KRANCOWKA_2_Pin) == GPIO_PIN_RESET)){
 8001f5e:	2108      	movs	r1, #8
 8001f60:	480b      	ldr	r0, [pc, #44]	; (8001f90 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001f62:	f001 f8cd 	bl	8003100 <HAL_GPIO_ReadPin>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d109      	bne.n	8001f80 <HAL_GPIO_EXTI_Callback+0xcc>
 8001f6c:	2110      	movs	r1, #16
 8001f6e:	4808      	ldr	r0, [pc, #32]	; (8001f90 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001f70:	f001 f8c6 	bl	8003100 <HAL_GPIO_ReadPin>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d102      	bne.n	8001f80 <HAL_GPIO_EXTI_Callback+0xcc>
    		krancowka = 0;
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]
    	}
    }

}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	48001400 	.word	0x48001400
 8001f8c:	2000002e 	.word	0x2000002e
 8001f90:	48000400 	.word	0x48000400
 8001f94:	2000002d 	.word	0x2000002d

08001f98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
	...

08001fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fae:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <HAL_MspInit+0x44>)
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	4a0e      	ldr	r2, [pc, #56]	; (8001fec <HAL_MspInit+0x44>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6193      	str	r3, [r2, #24]
 8001fba:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <HAL_MspInit+0x44>)
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fc6:	4b09      	ldr	r3, [pc, #36]	; (8001fec <HAL_MspInit+0x44>)
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	4a08      	ldr	r2, [pc, #32]	; (8001fec <HAL_MspInit+0x44>)
 8001fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	61d3      	str	r3, [r2, #28]
 8001fd2:	4b06      	ldr	r3, [pc, #24]	; (8001fec <HAL_MspInit+0x44>)
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40021000 	.word	0x40021000

08001ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ff4:	e7fe      	b.n	8001ff4 <NMI_Handler+0x4>

08001ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ffa:	e7fe      	b.n	8001ffa <HardFault_Handler+0x4>

08001ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002000:	e7fe      	b.n	8002000 <MemManage_Handler+0x4>

08002002 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002002:	b480      	push	{r7}
 8002004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002006:	e7fe      	b.n	8002006 <BusFault_Handler+0x4>

08002008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800200c:	e7fe      	b.n	800200c <UsageFault_Handler+0x4>

0800200e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800200e:	b480      	push	{r7}
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800203c:	f000 fd46 	bl	8002acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}

08002044 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STOP_AW_Pin);
 8002048:	2002      	movs	r0, #2
 800204a:	f001 f889 	bl	8003160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}

08002052 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PC_UART_RX_Pin);
 8002056:	2008      	movs	r0, #8
 8002058:	f001 f882 	bl	8003160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}

08002060 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIR_PT_Pin);
 8002064:	2010      	movs	r0, #16
 8002066:	f001 f87b 	bl	8003160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002074:	4802      	ldr	r0, [pc, #8]	; (8002080 <USART1_IRQHandler+0x10>)
 8002076:	f003 fec3 	bl	8005e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000448 	.word	0x20000448

08002084 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <USART2_IRQHandler+0x10>)
 800208a:	f003 feb9 	bl	8005e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200004cc 	.word	0x200004cc

08002098 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800209c:	4802      	ldr	r0, [pc, #8]	; (80020a8 <TIM6_DAC1_IRQHandler+0x10>)
 800209e:	f002 fe09 	bl	8004cb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000318 	.word	0x20000318

080020ac <TIM7_DAC2_IRQHandler>:

/**
  * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
  */
void TIM7_DAC2_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80020b0:	4802      	ldr	r0, [pc, #8]	; (80020bc <TIM7_DAC2_IRQHandler+0x10>)
 80020b2:	f002 fdff 	bl	8004cb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC2_IRQn 1 */

  /* USER CODE END TIM7_DAC2_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	200003fc 	.word	0x200003fc

080020c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <SystemInit+0x20>)
 80020c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ca:	4a05      	ldr	r2, [pc, #20]	; (80020e0 <SystemInit+0x20>)
 80020cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b096      	sub	sp, #88	; 0x58
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	605a      	str	r2, [r3, #4]
 80020f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	605a      	str	r2, [r3, #4]
 8002100:	609a      	str	r2, [r3, #8]
 8002102:	60da      	str	r2, [r3, #12]
 8002104:	611a      	str	r2, [r3, #16]
 8002106:	615a      	str	r2, [r3, #20]
 8002108:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	222c      	movs	r2, #44	; 0x2c
 800210e:	2100      	movs	r1, #0
 8002110:	4618      	mov	r0, r3
 8002112:	f004 ff33 	bl	8006f7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002116:	4b4b      	ldr	r3, [pc, #300]	; (8002244 <MX_TIM1_Init+0x160>)
 8002118:	4a4b      	ldr	r2, [pc, #300]	; (8002248 <MX_TIM1_Init+0x164>)
 800211a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = Pre_20k_360;
 800211c:	4b49      	ldr	r3, [pc, #292]	; (8002244 <MX_TIM1_Init+0x160>)
 800211e:	2213      	movs	r2, #19
 8002120:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002122:	4b48      	ldr	r3, [pc, #288]	; (8002244 <MX_TIM1_Init+0x160>)
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = Counter_20kHz_360;
 8002128:	4b46      	ldr	r3, [pc, #280]	; (8002244 <MX_TIM1_Init+0x160>)
 800212a:	f240 1267 	movw	r2, #359	; 0x167
 800212e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002130:	4b44      	ldr	r3, [pc, #272]	; (8002244 <MX_TIM1_Init+0x160>)
 8002132:	2200      	movs	r2, #0
 8002134:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002136:	4b43      	ldr	r3, [pc, #268]	; (8002244 <MX_TIM1_Init+0x160>)
 8002138:	2200      	movs	r2, #0
 800213a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800213c:	4b41      	ldr	r3, [pc, #260]	; (8002244 <MX_TIM1_Init+0x160>)
 800213e:	2200      	movs	r2, #0
 8002140:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002142:	4840      	ldr	r0, [pc, #256]	; (8002244 <MX_TIM1_Init+0x160>)
 8002144:	f002 fb3e 	bl	80047c4 <HAL_TIM_PWM_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800214e:	f7ff ff23 	bl	8001f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002152:	2300      	movs	r3, #0
 8002154:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002156:	2300      	movs	r3, #0
 8002158:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800215e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002162:	4619      	mov	r1, r3
 8002164:	4837      	ldr	r0, [pc, #220]	; (8002244 <MX_TIM1_Init+0x160>)
 8002166:	f003 fb45 	bl	80057f4 <HAL_TIMEx_MasterConfigSynchronization>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002170:	f7ff ff12 	bl	8001f98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002174:	2360      	movs	r3, #96	; 0x60
 8002176:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800217c:	2300      	movs	r3, #0
 800217e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002180:	2300      	movs	r3, #0
 8002182:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002188:	2300      	movs	r3, #0
 800218a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800218c:	2300      	movs	r3, #0
 800218e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002190:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002194:	2200      	movs	r2, #0
 8002196:	4619      	mov	r1, r3
 8002198:	482a      	ldr	r0, [pc, #168]	; (8002244 <MX_TIM1_Init+0x160>)
 800219a:	f002 feab 	bl	8004ef4 <HAL_TIM_PWM_ConfigChannel>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80021a4:	f7ff fef8 	bl	8001f98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021ac:	2204      	movs	r2, #4
 80021ae:	4619      	mov	r1, r3
 80021b0:	4824      	ldr	r0, [pc, #144]	; (8002244 <MX_TIM1_Init+0x160>)
 80021b2:	f002 fe9f 	bl	8004ef4 <HAL_TIM_PWM_ConfigChannel>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80021bc:	f7ff feec 	bl	8001f98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021c4:	2208      	movs	r2, #8
 80021c6:	4619      	mov	r1, r3
 80021c8:	481e      	ldr	r0, [pc, #120]	; (8002244 <MX_TIM1_Init+0x160>)
 80021ca:	f002 fe93 	bl	8004ef4 <HAL_TIM_PWM_ConfigChannel>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80021d4:	f7ff fee0 	bl	8001f98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021dc:	220c      	movs	r2, #12
 80021de:	4619      	mov	r1, r3
 80021e0:	4818      	ldr	r0, [pc, #96]	; (8002244 <MX_TIM1_Init+0x160>)
 80021e2:	f002 fe87 	bl	8004ef4 <HAL_TIM_PWM_ConfigChannel>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80021ec:	f7ff fed4 	bl	8001f98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021f0:	2300      	movs	r3, #0
 80021f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002204:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002208:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800220e:	2300      	movs	r3, #0
 8002210:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800221c:	2300      	movs	r3, #0
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002220:	1d3b      	adds	r3, r7, #4
 8002222:	4619      	mov	r1, r3
 8002224:	4807      	ldr	r0, [pc, #28]	; (8002244 <MX_TIM1_Init+0x160>)
 8002226:	f003 fb53 	bl	80058d0 <HAL_TIMEx_ConfigBreakDeadTime>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8002230:	f7ff feb2 	bl	8001f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002234:	4803      	ldr	r0, [pc, #12]	; (8002244 <MX_TIM1_Init+0x160>)
 8002236:	f000 fa85 	bl	8002744 <HAL_TIM_MspPostInit>

}
 800223a:	bf00      	nop
 800223c:	3758      	adds	r7, #88	; 0x58
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000364 	.word	0x20000364
 8002248:	40012c00 	.word	0x40012c00

0800224c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08c      	sub	sp, #48	; 0x30
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002252:	f107 030c 	add.w	r3, r7, #12
 8002256:	2224      	movs	r2, #36	; 0x24
 8002258:	2100      	movs	r1, #0
 800225a:	4618      	mov	r0, r3
 800225c:	f004 fe8e 	bl	8006f7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002260:	463b      	mov	r3, r7
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	605a      	str	r2, [r3, #4]
 8002268:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800226a:	4b21      	ldr	r3, [pc, #132]	; (80022f0 <MX_TIM2_Init+0xa4>)
 800226c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002270:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002272:	4b1f      	ldr	r3, [pc, #124]	; (80022f0 <MX_TIM2_Init+0xa4>)
 8002274:	2200      	movs	r2, #0
 8002276:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002278:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <MX_TIM2_Init+0xa4>)
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800227e:	4b1c      	ldr	r3, [pc, #112]	; (80022f0 <MX_TIM2_Init+0xa4>)
 8002280:	f04f 32ff 	mov.w	r2, #4294967295
 8002284:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002286:	4b1a      	ldr	r3, [pc, #104]	; (80022f0 <MX_TIM2_Init+0xa4>)
 8002288:	2200      	movs	r2, #0
 800228a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800228c:	4b18      	ldr	r3, [pc, #96]	; (80022f0 <MX_TIM2_Init+0xa4>)
 800228e:	2200      	movs	r2, #0
 8002290:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002292:	2303      	movs	r3, #3
 8002294:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800229a:	2301      	movs	r3, #1
 800229c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800229e:	2300      	movs	r3, #0
 80022a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80022a2:	230f      	movs	r3, #15
 80022a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022a6:	2300      	movs	r3, #0
 80022a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022aa:	2301      	movs	r3, #1
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022ae:	2300      	movs	r3, #0
 80022b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80022b2:	230f      	movs	r3, #15
 80022b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80022b6:	f107 030c 	add.w	r3, r7, #12
 80022ba:	4619      	mov	r1, r3
 80022bc:	480c      	ldr	r0, [pc, #48]	; (80022f0 <MX_TIM2_Init+0xa4>)
 80022be:	f002 fbc5 	bl	8004a4c <HAL_TIM_Encoder_Init>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80022c8:	f7ff fe66 	bl	8001f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022cc:	2300      	movs	r3, #0
 80022ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022d4:	463b      	mov	r3, r7
 80022d6:	4619      	mov	r1, r3
 80022d8:	4805      	ldr	r0, [pc, #20]	; (80022f0 <MX_TIM2_Init+0xa4>)
 80022da:	f003 fa8b 	bl	80057f4 <HAL_TIMEx_MasterConfigSynchronization>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80022e4:	f7ff fe58 	bl	8001f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022e8:	bf00      	nop
 80022ea:	3730      	adds	r7, #48	; 0x30
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	200003b0 	.word	0x200003b0

080022f4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08c      	sub	sp, #48	; 0x30
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022fa:	f107 030c 	add.w	r3, r7, #12
 80022fe:	2224      	movs	r2, #36	; 0x24
 8002300:	2100      	movs	r1, #0
 8002302:	4618      	mov	r0, r3
 8002304:	f004 fe3a 	bl	8006f7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002308:	463b      	mov	r3, r7
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002312:	4b21      	ldr	r3, [pc, #132]	; (8002398 <MX_TIM3_Init+0xa4>)
 8002314:	4a21      	ldr	r2, [pc, #132]	; (800239c <MX_TIM3_Init+0xa8>)
 8002316:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002318:	4b1f      	ldr	r3, [pc, #124]	; (8002398 <MX_TIM3_Init+0xa4>)
 800231a:	2200      	movs	r2, #0
 800231c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800231e:	4b1e      	ldr	r3, [pc, #120]	; (8002398 <MX_TIM3_Init+0xa4>)
 8002320:	2200      	movs	r2, #0
 8002322:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002324:	4b1c      	ldr	r3, [pc, #112]	; (8002398 <MX_TIM3_Init+0xa4>)
 8002326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800232a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800232c:	4b1a      	ldr	r3, [pc, #104]	; (8002398 <MX_TIM3_Init+0xa4>)
 800232e:	2200      	movs	r2, #0
 8002330:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002332:	4b19      	ldr	r3, [pc, #100]	; (8002398 <MX_TIM3_Init+0xa4>)
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002338:	2303      	movs	r3, #3
 800233a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800233c:	2300      	movs	r3, #0
 800233e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002340:	2301      	movs	r3, #1
 8002342:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002344:	2300      	movs	r3, #0
 8002346:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002348:	230f      	movs	r3, #15
 800234a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800234c:	2300      	movs	r3, #0
 800234e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002350:	2301      	movs	r3, #1
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002354:	2300      	movs	r3, #0
 8002356:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002358:	230f      	movs	r3, #15
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800235c:	f107 030c 	add.w	r3, r7, #12
 8002360:	4619      	mov	r1, r3
 8002362:	480d      	ldr	r0, [pc, #52]	; (8002398 <MX_TIM3_Init+0xa4>)
 8002364:	f002 fb72 	bl	8004a4c <HAL_TIM_Encoder_Init>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800236e:	f7ff fe13 	bl	8001f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002372:	2300      	movs	r3, #0
 8002374:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002376:	2300      	movs	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800237a:	463b      	mov	r3, r7
 800237c:	4619      	mov	r1, r3
 800237e:	4806      	ldr	r0, [pc, #24]	; (8002398 <MX_TIM3_Init+0xa4>)
 8002380:	f003 fa38 	bl	80057f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800238a:	f7ff fe05 	bl	8001f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800238e:	bf00      	nop
 8002390:	3730      	adds	r7, #48	; 0x30
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	200002cc 	.word	0x200002cc
 800239c:	40000400 	.word	0x40000400

080023a0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a6:	1d3b      	adds	r3, r7, #4
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80023b0:	4b15      	ldr	r3, [pc, #84]	; (8002408 <MX_TIM6_Init+0x68>)
 80023b2:	4a16      	ldr	r2, [pc, #88]	; (800240c <MX_TIM6_Init+0x6c>)
 80023b4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = Pre_10kHz;
 80023b6:	4b14      	ldr	r3, [pc, #80]	; (8002408 <MX_TIM6_Init+0x68>)
 80023b8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80023bc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023be:	4b12      	ldr	r3, [pc, #72]	; (8002408 <MX_TIM6_Init+0x68>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = Hz20;
 80023c4:	4b10      	ldr	r3, [pc, #64]	; (8002408 <MX_TIM6_Init+0x68>)
 80023c6:	f240 12f3 	movw	r2, #499	; 0x1f3
 80023ca:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023cc:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <MX_TIM6_Init+0x68>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80023d2:	480d      	ldr	r0, [pc, #52]	; (8002408 <MX_TIM6_Init+0x68>)
 80023d4:	f002 f942 	bl	800465c <HAL_TIM_Base_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80023de:	f7ff fddb 	bl	8001f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023e2:	2300      	movs	r3, #0
 80023e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80023ea:	1d3b      	adds	r3, r7, #4
 80023ec:	4619      	mov	r1, r3
 80023ee:	4806      	ldr	r0, [pc, #24]	; (8002408 <MX_TIM6_Init+0x68>)
 80023f0:	f003 fa00 	bl	80057f4 <HAL_TIMEx_MasterConfigSynchronization>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80023fa:	f7ff fdcd 	bl	8001f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80023fe:	bf00      	nop
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000318 	.word	0x20000318
 800240c:	40001000 	.word	0x40001000

08002410 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002416:	1d3b      	adds	r3, r7, #4
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002420:	4b15      	ldr	r3, [pc, #84]	; (8002478 <MX_TIM7_Init+0x68>)
 8002422:	4a16      	ldr	r2, [pc, #88]	; (800247c <MX_TIM7_Init+0x6c>)
 8002424:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = Pre_10kHz;
 8002426:	4b14      	ldr	r3, [pc, #80]	; (8002478 <MX_TIM7_Init+0x68>)
 8002428:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800242c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242e:	4b12      	ldr	r3, [pc, #72]	; (8002478 <MX_TIM7_Init+0x68>)
 8002430:	2200      	movs	r2, #0
 8002432:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = Hz10;
 8002434:	4b10      	ldr	r3, [pc, #64]	; (8002478 <MX_TIM7_Init+0x68>)
 8002436:	f240 32e7 	movw	r2, #999	; 0x3e7
 800243a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800243c:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <MX_TIM7_Init+0x68>)
 800243e:	2200      	movs	r2, #0
 8002440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002442:	480d      	ldr	r0, [pc, #52]	; (8002478 <MX_TIM7_Init+0x68>)
 8002444:	f002 f90a 	bl	800465c <HAL_TIM_Base_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800244e:	f7ff fda3 	bl	8001f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002452:	2300      	movs	r3, #0
 8002454:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800245a:	1d3b      	adds	r3, r7, #4
 800245c:	4619      	mov	r1, r3
 800245e:	4806      	ldr	r0, [pc, #24]	; (8002478 <MX_TIM7_Init+0x68>)
 8002460:	f003 f9c8 	bl	80057f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800246a:	f7ff fd95 	bl	8001f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200003fc 	.word	0x200003fc
 800247c:	40001400 	.word	0x40001400

08002480 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b092      	sub	sp, #72	; 0x48
 8002484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002486:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	609a      	str	r2, [r3, #8]
 8002492:	60da      	str	r2, [r3, #12]
 8002494:	611a      	str	r2, [r3, #16]
 8002496:	615a      	str	r2, [r3, #20]
 8002498:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800249a:	463b      	mov	r3, r7
 800249c:	222c      	movs	r2, #44	; 0x2c
 800249e:	2100      	movs	r1, #0
 80024a0:	4618      	mov	r0, r3
 80024a2:	f004 fd6b 	bl	8006f7c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80024a6:	4b31      	ldr	r3, [pc, #196]	; (800256c <MX_TIM17_Init+0xec>)
 80024a8:	4a31      	ldr	r2, [pc, #196]	; (8002570 <MX_TIM17_Init+0xf0>)
 80024aa:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = Pre_20k_360;
 80024ac:	4b2f      	ldr	r3, [pc, #188]	; (800256c <MX_TIM17_Init+0xec>)
 80024ae:	2213      	movs	r2, #19
 80024b0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b2:	4b2e      	ldr	r3, [pc, #184]	; (800256c <MX_TIM17_Init+0xec>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = Counter_20kHz_360;
 80024b8:	4b2c      	ldr	r3, [pc, #176]	; (800256c <MX_TIM17_Init+0xec>)
 80024ba:	f240 1267 	movw	r2, #359	; 0x167
 80024be:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c0:	4b2a      	ldr	r3, [pc, #168]	; (800256c <MX_TIM17_Init+0xec>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80024c6:	4b29      	ldr	r3, [pc, #164]	; (800256c <MX_TIM17_Init+0xec>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024cc:	4b27      	ldr	r3, [pc, #156]	; (800256c <MX_TIM17_Init+0xec>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80024d2:	4826      	ldr	r0, [pc, #152]	; (800256c <MX_TIM17_Init+0xec>)
 80024d4:	f002 f8c2 	bl	800465c <HAL_TIM_Base_Init>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80024de:	f7ff fd5b 	bl	8001f98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80024e2:	4822      	ldr	r0, [pc, #136]	; (800256c <MX_TIM17_Init+0xec>)
 80024e4:	f002 f96e 	bl	80047c4 <HAL_TIM_PWM_Init>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80024ee:	f7ff fd53 	bl	8001f98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024f2:	2360      	movs	r3, #96	; 0x60
 80024f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024fa:	2300      	movs	r3, #0
 80024fc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024fe:	2300      	movs	r3, #0
 8002500:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002506:	2300      	movs	r3, #0
 8002508:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800250e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002512:	2200      	movs	r2, #0
 8002514:	4619      	mov	r1, r3
 8002516:	4815      	ldr	r0, [pc, #84]	; (800256c <MX_TIM17_Init+0xec>)
 8002518:	f002 fcec 	bl	8004ef4 <HAL_TIM_PWM_ConfigChannel>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8002522:	f7ff fd39 	bl	8001f98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002526:	2300      	movs	r3, #0
 8002528:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800252a:	2300      	movs	r3, #0
 800252c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800252e:	2300      	movs	r3, #0
 8002530:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800253a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800253e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002544:	2300      	movs	r3, #0
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002548:	463b      	mov	r3, r7
 800254a:	4619      	mov	r1, r3
 800254c:	4807      	ldr	r0, [pc, #28]	; (800256c <MX_TIM17_Init+0xec>)
 800254e:	f003 f9bf 	bl	80058d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8002558:	f7ff fd1e 	bl	8001f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800255c:	4803      	ldr	r0, [pc, #12]	; (800256c <MX_TIM17_Init+0xec>)
 800255e:	f000 f8f1 	bl	8002744 <HAL_TIM_MspPostInit>

}
 8002562:	bf00      	nop
 8002564:	3748      	adds	r7, #72	; 0x48
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000280 	.word	0x20000280
 8002570:	40014800 	.word	0x40014800

08002574 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <HAL_TIM_PWM_MspInit+0x38>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d10b      	bne.n	800259e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002586:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	4a09      	ldr	r2, [pc, #36]	; (80025b0 <HAL_TIM_PWM_MspInit+0x3c>)
 800258c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002590:	6193      	str	r3, [r2, #24]
 8002592:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40012c00 	.word	0x40012c00
 80025b0:	40021000 	.word	0x40021000

080025b4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08c      	sub	sp, #48	; 0x30
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	f107 031c 	add.w	r3, r7, #28
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d4:	d129      	bne.n	800262a <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025d6:	4b2e      	ldr	r3, [pc, #184]	; (8002690 <HAL_TIM_Encoder_MspInit+0xdc>)
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	4a2d      	ldr	r2, [pc, #180]	; (8002690 <HAL_TIM_Encoder_MspInit+0xdc>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	61d3      	str	r3, [r2, #28]
 80025e2:	4b2b      	ldr	r3, [pc, #172]	; (8002690 <HAL_TIM_Encoder_MspInit+0xdc>)
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	61bb      	str	r3, [r7, #24]
 80025ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ee:	4b28      	ldr	r3, [pc, #160]	; (8002690 <HAL_TIM_Encoder_MspInit+0xdc>)
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	4a27      	ldr	r2, [pc, #156]	; (8002690 <HAL_TIM_Encoder_MspInit+0xdc>)
 80025f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f8:	6153      	str	r3, [r2, #20]
 80025fa:	4b25      	ldr	r3, [pc, #148]	; (8002690 <HAL_TIM_Encoder_MspInit+0xdc>)
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_LT_Pin|ENCODER_B_LT_Pin;
 8002606:	2303      	movs	r3, #3
 8002608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260a:	2302      	movs	r3, #2
 800260c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002612:	2300      	movs	r3, #0
 8002614:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002616:	2301      	movs	r3, #1
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800261a:	f107 031c 	add.w	r3, r7, #28
 800261e:	4619      	mov	r1, r3
 8002620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002624:	f000 fbfa 	bl	8002e1c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002628:	e02d      	b.n	8002686 <HAL_TIM_Encoder_MspInit+0xd2>
  else if(tim_encoderHandle->Instance==TIM3)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a19      	ldr	r2, [pc, #100]	; (8002694 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d128      	bne.n	8002686 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002634:	4b16      	ldr	r3, [pc, #88]	; (8002690 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	4a15      	ldr	r2, [pc, #84]	; (8002690 <HAL_TIM_Encoder_MspInit+0xdc>)
 800263a:	f043 0302 	orr.w	r3, r3, #2
 800263e:	61d3      	str	r3, [r2, #28]
 8002640:	4b13      	ldr	r3, [pc, #76]	; (8002690 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264c:	4b10      	ldr	r3, [pc, #64]	; (8002690 <HAL_TIM_Encoder_MspInit+0xdc>)
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	4a0f      	ldr	r2, [pc, #60]	; (8002690 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002656:	6153      	str	r3, [r2, #20]
 8002658:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <HAL_TIM_Encoder_MspInit+0xdc>)
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_A_PT_Pin|ENCODER_B_PT_Pin;
 8002664:	23c0      	movs	r3, #192	; 0xc0
 8002666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002668:	2302      	movs	r3, #2
 800266a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002674:	2302      	movs	r3, #2
 8002676:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002678:	f107 031c 	add.w	r3, r7, #28
 800267c:	4619      	mov	r1, r3
 800267e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002682:	f000 fbcb 	bl	8002e1c <HAL_GPIO_Init>
}
 8002686:	bf00      	nop
 8002688:	3730      	adds	r7, #48	; 0x30
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40021000 	.word	0x40021000
 8002694:	40000400 	.word	0x40000400

08002698 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a23      	ldr	r2, [pc, #140]	; (8002734 <HAL_TIM_Base_MspInit+0x9c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d114      	bne.n	80026d4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80026aa:	4b23      	ldr	r3, [pc, #140]	; (8002738 <HAL_TIM_Base_MspInit+0xa0>)
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	4a22      	ldr	r2, [pc, #136]	; (8002738 <HAL_TIM_Base_MspInit+0xa0>)
 80026b0:	f043 0310 	orr.w	r3, r3, #16
 80026b4:	61d3      	str	r3, [r2, #28]
 80026b6:	4b20      	ldr	r3, [pc, #128]	; (8002738 <HAL_TIM_Base_MspInit+0xa0>)
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	f003 0310 	and.w	r3, r3, #16
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2100      	movs	r1, #0
 80026c6:	2036      	movs	r0, #54	; 0x36
 80026c8:	f000 fafb 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80026cc:	2036      	movs	r0, #54	; 0x36
 80026ce:	f000 fb14 	bl	8002cfa <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80026d2:	e02a      	b.n	800272a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM7)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a18      	ldr	r2, [pc, #96]	; (800273c <HAL_TIM_Base_MspInit+0xa4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d114      	bne.n	8002708 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80026de:	4b16      	ldr	r3, [pc, #88]	; (8002738 <HAL_TIM_Base_MspInit+0xa0>)
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	4a15      	ldr	r2, [pc, #84]	; (8002738 <HAL_TIM_Base_MspInit+0xa0>)
 80026e4:	f043 0320 	orr.w	r3, r3, #32
 80026e8:	61d3      	str	r3, [r2, #28]
 80026ea:	4b13      	ldr	r3, [pc, #76]	; (8002738 <HAL_TIM_Base_MspInit+0xa0>)
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 0, 0);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2100      	movs	r1, #0
 80026fa:	2037      	movs	r0, #55	; 0x37
 80026fc:	f000 fae1 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8002700:	2037      	movs	r0, #55	; 0x37
 8002702:	f000 fafa 	bl	8002cfa <HAL_NVIC_EnableIRQ>
}
 8002706:	e010      	b.n	800272a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM17)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a0c      	ldr	r2, [pc, #48]	; (8002740 <HAL_TIM_Base_MspInit+0xa8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d10b      	bne.n	800272a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <HAL_TIM_Base_MspInit+0xa0>)
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	4a08      	ldr	r2, [pc, #32]	; (8002738 <HAL_TIM_Base_MspInit+0xa0>)
 8002718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800271c:	6193      	str	r3, [r2, #24]
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_TIM_Base_MspInit+0xa0>)
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
}
 800272a:	bf00      	nop
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40001000 	.word	0x40001000
 8002738:	40021000 	.word	0x40021000
 800273c:	40001400 	.word	0x40001400
 8002740:	40014800 	.word	0x40014800

08002744 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08a      	sub	sp, #40	; 0x28
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274c:	f107 0314 	add.w	r3, r7, #20
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
 800275a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a2c      	ldr	r2, [pc, #176]	; (8002814 <HAL_TIM_MspPostInit+0xd0>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d130      	bne.n	80027c8 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002766:	4b2c      	ldr	r3, [pc, #176]	; (8002818 <HAL_TIM_MspPostInit+0xd4>)
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	4a2b      	ldr	r2, [pc, #172]	; (8002818 <HAL_TIM_MspPostInit+0xd4>)
 800276c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002770:	6153      	str	r3, [r2, #20]
 8002772:	4b29      	ldr	r3, [pc, #164]	; (8002818 <HAL_TIM_MspPostInit+0xd4>)
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM1_LT_Pin|PWM2_PT_Pin|PWM3_LP_Pin;
 800277e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002784:	2302      	movs	r3, #2
 8002786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002788:	2300      	movs	r3, #0
 800278a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278c:	2300      	movs	r3, #0
 800278e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002790:	2306      	movs	r3, #6
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002794:	f107 0314 	add.w	r3, r7, #20
 8002798:	4619      	mov	r1, r3
 800279a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800279e:	f000 fb3d 	bl	8002e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM4_PP_Pin;
 80027a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a8:	2302      	movs	r3, #2
 80027aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b0:	2300      	movs	r3, #0
 80027b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 80027b4:	230b      	movs	r3, #11
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM4_PP_GPIO_Port, &GPIO_InitStruct);
 80027b8:	f107 0314 	add.w	r3, r7, #20
 80027bc:	4619      	mov	r1, r3
 80027be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027c2:	f000 fb2b 	bl	8002e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80027c6:	e020      	b.n	800280a <HAL_TIM_MspPostInit+0xc6>
  else if(timHandle->Instance==TIM17)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a13      	ldr	r2, [pc, #76]	; (800281c <HAL_TIM_MspPostInit+0xd8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d11b      	bne.n	800280a <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d2:	4b11      	ldr	r3, [pc, #68]	; (8002818 <HAL_TIM_MspPostInit+0xd4>)
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	4a10      	ldr	r2, [pc, #64]	; (8002818 <HAL_TIM_MspPostInit+0xd4>)
 80027d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027dc:	6153      	str	r3, [r2, #20]
 80027de:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <HAL_TIM_MspPostInit+0xd4>)
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM5_SERWO_Pin;
 80027ea:	2320      	movs	r3, #32
 80027ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ee:	2302      	movs	r3, #2
 80027f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f6:	2300      	movs	r3, #0
 80027f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 80027fa:	230a      	movs	r3, #10
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM5_SERWO_GPIO_Port, &GPIO_InitStruct);
 80027fe:	f107 0314 	add.w	r3, r7, #20
 8002802:	4619      	mov	r1, r3
 8002804:	4806      	ldr	r0, [pc, #24]	; (8002820 <HAL_TIM_MspPostInit+0xdc>)
 8002806:	f000 fb09 	bl	8002e1c <HAL_GPIO_Init>
}
 800280a:	bf00      	nop
 800280c:	3728      	adds	r7, #40	; 0x28
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40012c00 	.word	0x40012c00
 8002818:	40021000 	.word	0x40021000
 800281c:	40014800 	.word	0x40014800
 8002820:	48000400 	.word	0x48000400

08002824 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002828:	4b14      	ldr	r3, [pc, #80]	; (800287c <MX_USART1_UART_Init+0x58>)
 800282a:	4a15      	ldr	r2, [pc, #84]	; (8002880 <MX_USART1_UART_Init+0x5c>)
 800282c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = UART_115;
 800282e:	4b13      	ldr	r3, [pc, #76]	; (800287c <MX_USART1_UART_Init+0x58>)
 8002830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002834:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002836:	4b11      	ldr	r3, [pc, #68]	; (800287c <MX_USART1_UART_Init+0x58>)
 8002838:	2200      	movs	r2, #0
 800283a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800283c:	4b0f      	ldr	r3, [pc, #60]	; (800287c <MX_USART1_UART_Init+0x58>)
 800283e:	2200      	movs	r2, #0
 8002840:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002842:	4b0e      	ldr	r3, [pc, #56]	; (800287c <MX_USART1_UART_Init+0x58>)
 8002844:	2200      	movs	r2, #0
 8002846:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <MX_USART1_UART_Init+0x58>)
 800284a:	220c      	movs	r2, #12
 800284c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <MX_USART1_UART_Init+0x58>)
 8002850:	2200      	movs	r2, #0
 8002852:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <MX_USART1_UART_Init+0x58>)
 8002856:	2200      	movs	r2, #0
 8002858:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800285a:	4b08      	ldr	r3, [pc, #32]	; (800287c <MX_USART1_UART_Init+0x58>)
 800285c:	2200      	movs	r2, #0
 800285e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <MX_USART1_UART_Init+0x58>)
 8002862:	2200      	movs	r2, #0
 8002864:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002866:	4805      	ldr	r0, [pc, #20]	; (800287c <MX_USART1_UART_Init+0x58>)
 8002868:	f003 f8c8 	bl	80059fc <HAL_UART_Init>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002872:	f7ff fb91 	bl	8001f98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20000448 	.word	0x20000448
 8002880:	40013800 	.word	0x40013800

08002884 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002888:	4b14      	ldr	r3, [pc, #80]	; (80028dc <MX_USART2_UART_Init+0x58>)
 800288a:	4a15      	ldr	r2, [pc, #84]	; (80028e0 <MX_USART2_UART_Init+0x5c>)
 800288c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = UART_230;
 800288e:	4b13      	ldr	r3, [pc, #76]	; (80028dc <MX_USART2_UART_Init+0x58>)
 8002890:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8002894:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002896:	4b11      	ldr	r3, [pc, #68]	; (80028dc <MX_USART2_UART_Init+0x58>)
 8002898:	2200      	movs	r2, #0
 800289a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800289c:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <MX_USART2_UART_Init+0x58>)
 800289e:	2200      	movs	r2, #0
 80028a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028a2:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <MX_USART2_UART_Init+0x58>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028a8:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <MX_USART2_UART_Init+0x58>)
 80028aa:	220c      	movs	r2, #12
 80028ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ae:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <MX_USART2_UART_Init+0x58>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028b4:	4b09      	ldr	r3, [pc, #36]	; (80028dc <MX_USART2_UART_Init+0x58>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028ba:	4b08      	ldr	r3, [pc, #32]	; (80028dc <MX_USART2_UART_Init+0x58>)
 80028bc:	2200      	movs	r2, #0
 80028be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <MX_USART2_UART_Init+0x58>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028c6:	4805      	ldr	r0, [pc, #20]	; (80028dc <MX_USART2_UART_Init+0x58>)
 80028c8:	f003 f898 	bl	80059fc <HAL_UART_Init>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80028d2:	f7ff fb61 	bl	8001f98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	200004cc 	.word	0x200004cc
 80028e0:	40004400 	.word	0x40004400

080028e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08c      	sub	sp, #48	; 0x30
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ec:	f107 031c 	add.w	r3, r7, #28
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a36      	ldr	r2, [pc, #216]	; (80029dc <HAL_UART_MspInit+0xf8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d130      	bne.n	8002968 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002906:	4b36      	ldr	r3, [pc, #216]	; (80029e0 <HAL_UART_MspInit+0xfc>)
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	4a35      	ldr	r2, [pc, #212]	; (80029e0 <HAL_UART_MspInit+0xfc>)
 800290c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002910:	6193      	str	r3, [r2, #24]
 8002912:	4b33      	ldr	r3, [pc, #204]	; (80029e0 <HAL_UART_MspInit+0xfc>)
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800291a:	61bb      	str	r3, [r7, #24]
 800291c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800291e:	4b30      	ldr	r3, [pc, #192]	; (80029e0 <HAL_UART_MspInit+0xfc>)
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	4a2f      	ldr	r2, [pc, #188]	; (80029e0 <HAL_UART_MspInit+0xfc>)
 8002924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002928:	6153      	str	r3, [r2, #20]
 800292a:	4b2d      	ldr	r3, [pc, #180]	; (80029e0 <HAL_UART_MspInit+0xfc>)
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = COMM_TO_MASTER_UART_TX_Pin|COMM_TO_MASTER_UART_RX_Pin;
 8002936:	23c0      	movs	r3, #192	; 0xc0
 8002938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293a:	2302      	movs	r3, #2
 800293c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293e:	2300      	movs	r3, #0
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002942:	2303      	movs	r3, #3
 8002944:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002946:	2307      	movs	r3, #7
 8002948:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294a:	f107 031c 	add.w	r3, r7, #28
 800294e:	4619      	mov	r1, r3
 8002950:	4824      	ldr	r0, [pc, #144]	; (80029e4 <HAL_UART_MspInit+0x100>)
 8002952:	f000 fa63 	bl	8002e1c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002956:	2200      	movs	r2, #0
 8002958:	2100      	movs	r1, #0
 800295a:	2025      	movs	r0, #37	; 0x25
 800295c:	f000 f9b1 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002960:	2025      	movs	r0, #37	; 0x25
 8002962:	f000 f9ca 	bl	8002cfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002966:	e035      	b.n	80029d4 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a1e      	ldr	r2, [pc, #120]	; (80029e8 <HAL_UART_MspInit+0x104>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d130      	bne.n	80029d4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002972:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <HAL_UART_MspInit+0xfc>)
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	4a1a      	ldr	r2, [pc, #104]	; (80029e0 <HAL_UART_MspInit+0xfc>)
 8002978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800297c:	61d3      	str	r3, [r2, #28]
 800297e:	4b18      	ldr	r3, [pc, #96]	; (80029e0 <HAL_UART_MspInit+0xfc>)
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002986:	613b      	str	r3, [r7, #16]
 8002988:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800298a:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <HAL_UART_MspInit+0xfc>)
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	4a14      	ldr	r2, [pc, #80]	; (80029e0 <HAL_UART_MspInit+0xfc>)
 8002990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002994:	6153      	str	r3, [r2, #20]
 8002996:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <HAL_UART_MspInit+0xfc>)
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PC_UART_TX_Pin|PC_UART_RX_Pin;
 80029a2:	230c      	movs	r3, #12
 80029a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a6:	2302      	movs	r3, #2
 80029a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029ae:	2303      	movs	r3, #3
 80029b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029b2:	2307      	movs	r3, #7
 80029b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b6:	f107 031c 	add.w	r3, r7, #28
 80029ba:	4619      	mov	r1, r3
 80029bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029c0:	f000 fa2c 	bl	8002e1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80029c4:	2200      	movs	r2, #0
 80029c6:	2100      	movs	r1, #0
 80029c8:	2026      	movs	r0, #38	; 0x26
 80029ca:	f000 f97a 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029ce:	2026      	movs	r0, #38	; 0x26
 80029d0:	f000 f993 	bl	8002cfa <HAL_NVIC_EnableIRQ>
}
 80029d4:	bf00      	nop
 80029d6:	3730      	adds	r7, #48	; 0x30
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40013800 	.word	0x40013800
 80029e0:	40021000 	.word	0x40021000
 80029e4:	48000400 	.word	0x48000400
 80029e8:	40004400 	.word	0x40004400

080029ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80029ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a24 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029f0:	480d      	ldr	r0, [pc, #52]	; (8002a28 <LoopForever+0x6>)
  ldr r1, =_edata
 80029f2:	490e      	ldr	r1, [pc, #56]	; (8002a2c <LoopForever+0xa>)
  ldr r2, =_sidata
 80029f4:	4a0e      	ldr	r2, [pc, #56]	; (8002a30 <LoopForever+0xe>)
  movs r3, #0
 80029f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029f8:	e002      	b.n	8002a00 <LoopCopyDataInit>

080029fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029fe:	3304      	adds	r3, #4

08002a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a04:	d3f9      	bcc.n	80029fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a06:	4a0b      	ldr	r2, [pc, #44]	; (8002a34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a08:	4c0b      	ldr	r4, [pc, #44]	; (8002a38 <LoopForever+0x16>)
  movs r3, #0
 8002a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a0c:	e001      	b.n	8002a12 <LoopFillZerobss>

08002a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a10:	3204      	adds	r2, #4

08002a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a14:	d3fb      	bcc.n	8002a0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a16:	f7ff fb53 	bl	80020c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a1a:	f004 fa8b 	bl	8006f34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a1e:	f7fe fbbf 	bl	80011a0 <main>

08002a22 <LoopForever>:

LoopForever:
    b LoopForever
 8002a22:	e7fe      	b.n	8002a22 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a24:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a2c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002a30:	080082d0 	.word	0x080082d0
  ldr r2, =_sbss
 8002a34:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002a38:	20000554 	.word	0x20000554

08002a3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a3c:	e7fe      	b.n	8002a3c <ADC1_2_IRQHandler>
	...

08002a40 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a44:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <HAL_Init+0x28>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a07      	ldr	r2, [pc, #28]	; (8002a68 <HAL_Init+0x28>)
 8002a4a:	f043 0310 	orr.w	r3, r3, #16
 8002a4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a50:	2003      	movs	r0, #3
 8002a52:	f000 f92b 	bl	8002cac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a56:	2000      	movs	r0, #0
 8002a58:	f000 f808 	bl	8002a6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a5c:	f7ff faa4 	bl	8001fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40022000 	.word	0x40022000

08002a6c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a74:	4b12      	ldr	r3, [pc, #72]	; (8002ac0 <HAL_InitTick+0x54>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <HAL_InitTick+0x58>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 f943 	bl	8002d16 <HAL_SYSTICK_Config>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e00e      	b.n	8002ab8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b0f      	cmp	r3, #15
 8002a9e:	d80a      	bhi.n	8002ab6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa8:	f000 f90b 	bl	8002cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002aac:	4a06      	ldr	r2, [pc, #24]	; (8002ac8 <HAL_InitTick+0x5c>)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	e000      	b.n	8002ab8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	20000004 	.word	0x20000004
 8002ac4:	2000000c 	.word	0x2000000c
 8002ac8:	20000008 	.word	0x20000008

08002acc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ad0:	4b06      	ldr	r3, [pc, #24]	; (8002aec <HAL_IncTick+0x20>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <HAL_IncTick+0x24>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4413      	add	r3, r2
 8002adc:	4a04      	ldr	r2, [pc, #16]	; (8002af0 <HAL_IncTick+0x24>)
 8002ade:	6013      	str	r3, [r2, #0]
}
 8002ae0:	bf00      	nop
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	2000000c 	.word	0x2000000c
 8002af0:	20000550 	.word	0x20000550

08002af4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  return uwTick;  
 8002af8:	4b03      	ldr	r3, [pc, #12]	; (8002b08 <HAL_GetTick+0x14>)
 8002afa:	681b      	ldr	r3, [r3, #0]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	20000550 	.word	0x20000550

08002b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <__NVIC_SetPriorityGrouping+0x44>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b28:	4013      	ands	r3, r2
 8002b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b3e:	4a04      	ldr	r2, [pc, #16]	; (8002b50 <__NVIC_SetPriorityGrouping+0x44>)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	60d3      	str	r3, [r2, #12]
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b58:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <__NVIC_GetPriorityGrouping+0x18>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	0a1b      	lsrs	r3, r3, #8
 8002b5e:	f003 0307 	and.w	r3, r3, #7
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	db0b      	blt.n	8002b9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	f003 021f 	and.w	r2, r3, #31
 8002b88:	4907      	ldr	r1, [pc, #28]	; (8002ba8 <__NVIC_EnableIRQ+0x38>)
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	095b      	lsrs	r3, r3, #5
 8002b90:	2001      	movs	r0, #1
 8002b92:	fa00 f202 	lsl.w	r2, r0, r2
 8002b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	e000e100 	.word	0xe000e100

08002bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	6039      	str	r1, [r7, #0]
 8002bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	db0a      	blt.n	8002bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	490c      	ldr	r1, [pc, #48]	; (8002bf8 <__NVIC_SetPriority+0x4c>)
 8002bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bca:	0112      	lsls	r2, r2, #4
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	440b      	add	r3, r1
 8002bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd4:	e00a      	b.n	8002bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	4908      	ldr	r1, [pc, #32]	; (8002bfc <__NVIC_SetPriority+0x50>)
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	3b04      	subs	r3, #4
 8002be4:	0112      	lsls	r2, r2, #4
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	440b      	add	r3, r1
 8002bea:	761a      	strb	r2, [r3, #24]
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	e000e100 	.word	0xe000e100
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b089      	sub	sp, #36	; 0x24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f1c3 0307 	rsb	r3, r3, #7
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	bf28      	it	cs
 8002c1e:	2304      	movcs	r3, #4
 8002c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3304      	adds	r3, #4
 8002c26:	2b06      	cmp	r3, #6
 8002c28:	d902      	bls.n	8002c30 <NVIC_EncodePriority+0x30>
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3b03      	subs	r3, #3
 8002c2e:	e000      	b.n	8002c32 <NVIC_EncodePriority+0x32>
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c34:	f04f 32ff 	mov.w	r2, #4294967295
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43da      	mvns	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	401a      	ands	r2, r3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c48:	f04f 31ff 	mov.w	r1, #4294967295
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c52:	43d9      	mvns	r1, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	4313      	orrs	r3, r2
         );
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3724      	adds	r7, #36	; 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c78:	d301      	bcc.n	8002c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e00f      	b.n	8002c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ca8 <SysTick_Config+0x40>)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c86:	210f      	movs	r1, #15
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8c:	f7ff ff8e 	bl	8002bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <SysTick_Config+0x40>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c96:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <SysTick_Config+0x40>)
 8002c98:	2207      	movs	r2, #7
 8002c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	e000e010 	.word	0xe000e010

08002cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff ff29 	bl	8002b0c <__NVIC_SetPriorityGrouping>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b086      	sub	sp, #24
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	4603      	mov	r3, r0
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd4:	f7ff ff3e 	bl	8002b54 <__NVIC_GetPriorityGrouping>
 8002cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	68b9      	ldr	r1, [r7, #8]
 8002cde:	6978      	ldr	r0, [r7, #20]
 8002ce0:	f7ff ff8e 	bl	8002c00 <NVIC_EncodePriority>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cea:	4611      	mov	r1, r2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff ff5d 	bl	8002bac <__NVIC_SetPriority>
}
 8002cf2:	bf00      	nop
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	4603      	mov	r3, r0
 8002d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ff31 	bl	8002b70 <__NVIC_EnableIRQ>
}
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff ffa2 	bl	8002c68 <SysTick_Config>
 8002d24:	4603      	mov	r3, r0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d008      	beq.n	8002d52 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2204      	movs	r2, #4
 8002d44:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e020      	b.n	8002d94 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 020e 	bic.w	r2, r2, #14
 8002d60:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0201 	bic.w	r2, r2, #1
 8002d70:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d80:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002da8:	2300      	movs	r3, #0
 8002daa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d005      	beq.n	8002dc2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2204      	movs	r2, #4
 8002dba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	73fb      	strb	r3, [r7, #15]
 8002dc0:	e027      	b.n	8002e12 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 020e 	bic.w	r2, r2, #14
 8002dd0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0201 	bic.w	r2, r2, #1
 8002de0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dea:	2101      	movs	r1, #1
 8002dec:	fa01 f202 	lsl.w	r2, r1, r2
 8002df0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	4798      	blx	r3
    } 
  }
  return status;
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e2a:	e14e      	b.n	80030ca <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	2101      	movs	r1, #1
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	fa01 f303 	lsl.w	r3, r1, r3
 8002e38:	4013      	ands	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 8140 	beq.w	80030c4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 0303 	and.w	r3, r3, #3
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d005      	beq.n	8002e5c <HAL_GPIO_Init+0x40>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d130      	bne.n	8002ebe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	2203      	movs	r2, #3
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	4013      	ands	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e92:	2201      	movs	r2, #1
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	091b      	lsrs	r3, r3, #4
 8002ea8:	f003 0201 	and.w	r2, r3, #1
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d017      	beq.n	8002efa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d123      	bne.n	8002f4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	08da      	lsrs	r2, r3, #3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3208      	adds	r2, #8
 8002f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	220f      	movs	r2, #15
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4013      	ands	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	691a      	ldr	r2, [r3, #16]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	08da      	lsrs	r2, r3, #3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3208      	adds	r2, #8
 8002f48:	6939      	ldr	r1, [r7, #16]
 8002f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	2203      	movs	r2, #3
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	4013      	ands	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f003 0203 	and.w	r2, r3, #3
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 809a 	beq.w	80030c4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f90:	4b55      	ldr	r3, [pc, #340]	; (80030e8 <HAL_GPIO_Init+0x2cc>)
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	4a54      	ldr	r2, [pc, #336]	; (80030e8 <HAL_GPIO_Init+0x2cc>)
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	6193      	str	r3, [r2, #24]
 8002f9c:	4b52      	ldr	r3, [pc, #328]	; (80030e8 <HAL_GPIO_Init+0x2cc>)
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fa8:	4a50      	ldr	r2, [pc, #320]	; (80030ec <HAL_GPIO_Init+0x2d0>)
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	089b      	lsrs	r3, r3, #2
 8002fae:	3302      	adds	r3, #2
 8002fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	220f      	movs	r2, #15
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002fd2:	d013      	beq.n	8002ffc <HAL_GPIO_Init+0x1e0>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a46      	ldr	r2, [pc, #280]	; (80030f0 <HAL_GPIO_Init+0x2d4>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d00d      	beq.n	8002ff8 <HAL_GPIO_Init+0x1dc>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a45      	ldr	r2, [pc, #276]	; (80030f4 <HAL_GPIO_Init+0x2d8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d007      	beq.n	8002ff4 <HAL_GPIO_Init+0x1d8>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a44      	ldr	r2, [pc, #272]	; (80030f8 <HAL_GPIO_Init+0x2dc>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d101      	bne.n	8002ff0 <HAL_GPIO_Init+0x1d4>
 8002fec:	2303      	movs	r3, #3
 8002fee:	e006      	b.n	8002ffe <HAL_GPIO_Init+0x1e2>
 8002ff0:	2305      	movs	r3, #5
 8002ff2:	e004      	b.n	8002ffe <HAL_GPIO_Init+0x1e2>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e002      	b.n	8002ffe <HAL_GPIO_Init+0x1e2>
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e000      	b.n	8002ffe <HAL_GPIO_Init+0x1e2>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	f002 0203 	and.w	r2, r2, #3
 8003004:	0092      	lsls	r2, r2, #2
 8003006:	4093      	lsls	r3, r2
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800300e:	4937      	ldr	r1, [pc, #220]	; (80030ec <HAL_GPIO_Init+0x2d0>)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	089b      	lsrs	r3, r3, #2
 8003014:	3302      	adds	r3, #2
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800301c:	4b37      	ldr	r3, [pc, #220]	; (80030fc <HAL_GPIO_Init+0x2e0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	43db      	mvns	r3, r3
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4013      	ands	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003040:	4a2e      	ldr	r2, [pc, #184]	; (80030fc <HAL_GPIO_Init+0x2e0>)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003046:	4b2d      	ldr	r3, [pc, #180]	; (80030fc <HAL_GPIO_Init+0x2e0>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	43db      	mvns	r3, r3
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	4013      	ands	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800306a:	4a24      	ldr	r2, [pc, #144]	; (80030fc <HAL_GPIO_Init+0x2e0>)
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003070:	4b22      	ldr	r3, [pc, #136]	; (80030fc <HAL_GPIO_Init+0x2e0>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	43db      	mvns	r3, r3
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4013      	ands	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003094:	4a19      	ldr	r2, [pc, #100]	; (80030fc <HAL_GPIO_Init+0x2e0>)
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800309a:	4b18      	ldr	r3, [pc, #96]	; (80030fc <HAL_GPIO_Init+0x2e0>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	43db      	mvns	r3, r3
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4013      	ands	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80030be:	4a0f      	ldr	r2, [pc, #60]	; (80030fc <HAL_GPIO_Init+0x2e0>)
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	3301      	adds	r3, #1
 80030c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	fa22 f303 	lsr.w	r3, r2, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f47f aea9 	bne.w	8002e2c <HAL_GPIO_Init+0x10>
  }
}
 80030da:	bf00      	nop
 80030dc:	bf00      	nop
 80030de:	371c      	adds	r7, #28
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	40021000 	.word	0x40021000
 80030ec:	40010000 	.word	0x40010000
 80030f0:	48000400 	.word	0x48000400
 80030f4:	48000800 	.word	0x48000800
 80030f8:	48000c00 	.word	0x48000c00
 80030fc:	40010400 	.word	0x40010400

08003100 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	887b      	ldrh	r3, [r7, #2]
 8003112:	4013      	ands	r3, r2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d002      	beq.n	800311e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003118:	2301      	movs	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
 800311c:	e001      	b.n	8003122 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800311e:	2300      	movs	r3, #0
 8003120:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003122:	7bfb      	ldrb	r3, [r7, #15]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	807b      	strh	r3, [r7, #2]
 800313c:	4613      	mov	r3, r2
 800313e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003140:	787b      	ldrb	r3, [r7, #1]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003146:	887a      	ldrh	r2, [r7, #2]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800314c:	e002      	b.n	8003154 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800314e:	887a      	ldrh	r2, [r7, #2]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800316a:	4b08      	ldr	r3, [pc, #32]	; (800318c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800316c:	695a      	ldr	r2, [r3, #20]
 800316e:	88fb      	ldrh	r3, [r7, #6]
 8003170:	4013      	ands	r3, r2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d006      	beq.n	8003184 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003176:	4a05      	ldr	r2, [pc, #20]	; (800318c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003178:	88fb      	ldrh	r3, [r7, #6]
 800317a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800317c:	88fb      	ldrh	r3, [r7, #6]
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe fe98 	bl	8001eb4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003184:	bf00      	nop
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40010400 	.word	0x40010400

08003190 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003196:	af00      	add	r7, sp, #0
 8003198:	1d3b      	adds	r3, r7, #4
 800319a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800319c:	1d3b      	adds	r3, r7, #4
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d102      	bne.n	80031aa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	f000 bef4 	b.w	8003f92 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031aa:	1d3b      	adds	r3, r7, #4
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 816a 	beq.w	800348e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80031ba:	4bb3      	ldr	r3, [pc, #716]	; (8003488 <HAL_RCC_OscConfig+0x2f8>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d00c      	beq.n	80031e0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031c6:	4bb0      	ldr	r3, [pc, #704]	; (8003488 <HAL_RCC_OscConfig+0x2f8>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d159      	bne.n	8003286 <HAL_RCC_OscConfig+0xf6>
 80031d2:	4bad      	ldr	r3, [pc, #692]	; (8003488 <HAL_RCC_OscConfig+0x2f8>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031de:	d152      	bne.n	8003286 <HAL_RCC_OscConfig+0xf6>
 80031e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031e4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80031ec:	fa93 f3a3 	rbit	r3, r3
 80031f0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031f4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f8:	fab3 f383 	clz	r3, r3
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	b2db      	uxtb	r3, r3
 8003202:	f043 0301 	orr.w	r3, r3, #1
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b01      	cmp	r3, #1
 800320a:	d102      	bne.n	8003212 <HAL_RCC_OscConfig+0x82>
 800320c:	4b9e      	ldr	r3, [pc, #632]	; (8003488 <HAL_RCC_OscConfig+0x2f8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	e015      	b.n	800323e <HAL_RCC_OscConfig+0xae>
 8003212:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003216:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800321e:	fa93 f3a3 	rbit	r3, r3
 8003222:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003226:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800322a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800322e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003232:	fa93 f3a3 	rbit	r3, r3
 8003236:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800323a:	4b93      	ldr	r3, [pc, #588]	; (8003488 <HAL_RCC_OscConfig+0x2f8>)
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003242:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003246:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800324a:	fa92 f2a2 	rbit	r2, r2
 800324e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003252:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003256:	fab2 f282 	clz	r2, r2
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	f042 0220 	orr.w	r2, r2, #32
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	f002 021f 	and.w	r2, r2, #31
 8003266:	2101      	movs	r1, #1
 8003268:	fa01 f202 	lsl.w	r2, r1, r2
 800326c:	4013      	ands	r3, r2
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 810c 	beq.w	800348c <HAL_RCC_OscConfig+0x2fc>
 8003274:	1d3b      	adds	r3, r7, #4
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	f040 8106 	bne.w	800348c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	f000 be86 	b.w	8003f92 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003286:	1d3b      	adds	r3, r7, #4
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003290:	d106      	bne.n	80032a0 <HAL_RCC_OscConfig+0x110>
 8003292:	4b7d      	ldr	r3, [pc, #500]	; (8003488 <HAL_RCC_OscConfig+0x2f8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a7c      	ldr	r2, [pc, #496]	; (8003488 <HAL_RCC_OscConfig+0x2f8>)
 8003298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	e030      	b.n	8003302 <HAL_RCC_OscConfig+0x172>
 80032a0:	1d3b      	adds	r3, r7, #4
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10c      	bne.n	80032c4 <HAL_RCC_OscConfig+0x134>
 80032aa:	4b77      	ldr	r3, [pc, #476]	; (8003488 <HAL_RCC_OscConfig+0x2f8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a76      	ldr	r2, [pc, #472]	; (8003488 <HAL_RCC_OscConfig+0x2f8>)
 80032b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	4b74      	ldr	r3, [pc, #464]	; (8003488 <HAL_RCC_OscConfig+0x2f8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a73      	ldr	r2, [pc, #460]	; (8003488 <HAL_RCC_OscConfig+0x2f8>)
 80032bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	e01e      	b.n	8003302 <HAL_RCC_OscConfig+0x172>
 80032c4:	1d3b      	adds	r3, r7, #4
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032ce:	d10c      	bne.n	80032ea <HAL_RCC_OscConfig+0x15a>
 80032d0:	4b6d      	ldr	r3, [pc, #436]	; (8003488 <HAL_RCC_OscConfig+0x2f8>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a6c      	ldr	r2, [pc, #432]	; (8003488 <HAL_RCC_OscConfig+0x2f8>)
 80032d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	4b6a      	ldr	r3, [pc, #424]	; (8003488 <HAL_RCC_OscConfig+0x2f8>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a69      	ldr	r2, [pc, #420]	; (8003488 <HAL_RCC_OscConfig+0x2f8>)
 80032e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e6:	6013      	str	r3, [r2, #0]
 80032e8:	e00b      	b.n	8003302 <HAL_RCC_OscConfig+0x172>
 80032ea:	4b67      	ldr	r3, [pc, #412]	; (8003488 <HAL_RCC_OscConfig+0x2f8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a66      	ldr	r2, [pc, #408]	; (8003488 <HAL_RCC_OscConfig+0x2f8>)
 80032f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	4b64      	ldr	r3, [pc, #400]	; (8003488 <HAL_RCC_OscConfig+0x2f8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a63      	ldr	r2, [pc, #396]	; (8003488 <HAL_RCC_OscConfig+0x2f8>)
 80032fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003300:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003302:	4b61      	ldr	r3, [pc, #388]	; (8003488 <HAL_RCC_OscConfig+0x2f8>)
 8003304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003306:	f023 020f 	bic.w	r2, r3, #15
 800330a:	1d3b      	adds	r3, r7, #4
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	495d      	ldr	r1, [pc, #372]	; (8003488 <HAL_RCC_OscConfig+0x2f8>)
 8003312:	4313      	orrs	r3, r2
 8003314:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003316:	1d3b      	adds	r3, r7, #4
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d059      	beq.n	80033d4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003320:	f7ff fbe8 	bl	8002af4 <HAL_GetTick>
 8003324:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003328:	e00a      	b.n	8003340 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800332a:	f7ff fbe3 	bl	8002af4 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b64      	cmp	r3, #100	; 0x64
 8003338:	d902      	bls.n	8003340 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	f000 be29 	b.w	8003f92 <HAL_RCC_OscConfig+0xe02>
 8003340:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003344:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003348:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800334c:	fa93 f3a3 	rbit	r3, r3
 8003350:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003354:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003358:	fab3 f383 	clz	r3, r3
 800335c:	b2db      	uxtb	r3, r3
 800335e:	095b      	lsrs	r3, r3, #5
 8003360:	b2db      	uxtb	r3, r3
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b01      	cmp	r3, #1
 800336a:	d102      	bne.n	8003372 <HAL_RCC_OscConfig+0x1e2>
 800336c:	4b46      	ldr	r3, [pc, #280]	; (8003488 <HAL_RCC_OscConfig+0x2f8>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	e015      	b.n	800339e <HAL_RCC_OscConfig+0x20e>
 8003372:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003376:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800337e:	fa93 f3a3 	rbit	r3, r3
 8003382:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003386:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800338a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800338e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003392:	fa93 f3a3 	rbit	r3, r3
 8003396:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800339a:	4b3b      	ldr	r3, [pc, #236]	; (8003488 <HAL_RCC_OscConfig+0x2f8>)
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033a2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80033a6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80033aa:	fa92 f2a2 	rbit	r2, r2
 80033ae:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80033b2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80033b6:	fab2 f282 	clz	r2, r2
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	f042 0220 	orr.w	r2, r2, #32
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	f002 021f 	and.w	r2, r2, #31
 80033c6:	2101      	movs	r1, #1
 80033c8:	fa01 f202 	lsl.w	r2, r1, r2
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0ab      	beq.n	800332a <HAL_RCC_OscConfig+0x19a>
 80033d2:	e05c      	b.n	800348e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d4:	f7ff fb8e 	bl	8002af4 <HAL_GetTick>
 80033d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033dc:	e00a      	b.n	80033f4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033de:	f7ff fb89 	bl	8002af4 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b64      	cmp	r3, #100	; 0x64
 80033ec:	d902      	bls.n	80033f4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	f000 bdcf 	b.w	8003f92 <HAL_RCC_OscConfig+0xe02>
 80033f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033f8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003400:	fa93 f3a3 	rbit	r3, r3
 8003404:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003408:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800340c:	fab3 f383 	clz	r3, r3
 8003410:	b2db      	uxtb	r3, r3
 8003412:	095b      	lsrs	r3, r3, #5
 8003414:	b2db      	uxtb	r3, r3
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b01      	cmp	r3, #1
 800341e:	d102      	bne.n	8003426 <HAL_RCC_OscConfig+0x296>
 8003420:	4b19      	ldr	r3, [pc, #100]	; (8003488 <HAL_RCC_OscConfig+0x2f8>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	e015      	b.n	8003452 <HAL_RCC_OscConfig+0x2c2>
 8003426:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800342a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003432:	fa93 f3a3 	rbit	r3, r3
 8003436:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800343a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800343e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003442:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003446:	fa93 f3a3 	rbit	r3, r3
 800344a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800344e:	4b0e      	ldr	r3, [pc, #56]	; (8003488 <HAL_RCC_OscConfig+0x2f8>)
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003456:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800345a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800345e:	fa92 f2a2 	rbit	r2, r2
 8003462:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003466:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800346a:	fab2 f282 	clz	r2, r2
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	f042 0220 	orr.w	r2, r2, #32
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	f002 021f 	and.w	r2, r2, #31
 800347a:	2101      	movs	r1, #1
 800347c:	fa01 f202 	lsl.w	r2, r1, r2
 8003480:	4013      	ands	r3, r2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1ab      	bne.n	80033de <HAL_RCC_OscConfig+0x24e>
 8003486:	e002      	b.n	800348e <HAL_RCC_OscConfig+0x2fe>
 8003488:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800348c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800348e:	1d3b      	adds	r3, r7, #4
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 816f 	beq.w	800377c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800349e:	4bd0      	ldr	r3, [pc, #832]	; (80037e0 <HAL_RCC_OscConfig+0x650>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f003 030c 	and.w	r3, r3, #12
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00b      	beq.n	80034c2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80034aa:	4bcd      	ldr	r3, [pc, #820]	; (80037e0 <HAL_RCC_OscConfig+0x650>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d16c      	bne.n	8003590 <HAL_RCC_OscConfig+0x400>
 80034b6:	4bca      	ldr	r3, [pc, #808]	; (80037e0 <HAL_RCC_OscConfig+0x650>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d166      	bne.n	8003590 <HAL_RCC_OscConfig+0x400>
 80034c2:	2302      	movs	r3, #2
 80034c4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80034cc:	fa93 f3a3 	rbit	r3, r3
 80034d0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80034d4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d8:	fab3 f383 	clz	r3, r3
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	f043 0301 	orr.w	r3, r3, #1
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d102      	bne.n	80034f2 <HAL_RCC_OscConfig+0x362>
 80034ec:	4bbc      	ldr	r3, [pc, #752]	; (80037e0 <HAL_RCC_OscConfig+0x650>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	e013      	b.n	800351a <HAL_RCC_OscConfig+0x38a>
 80034f2:	2302      	movs	r3, #2
 80034f4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80034fc:	fa93 f3a3 	rbit	r3, r3
 8003500:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003504:	2302      	movs	r3, #2
 8003506:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800350a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800350e:	fa93 f3a3 	rbit	r3, r3
 8003512:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003516:	4bb2      	ldr	r3, [pc, #712]	; (80037e0 <HAL_RCC_OscConfig+0x650>)
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	2202      	movs	r2, #2
 800351c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003520:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003524:	fa92 f2a2 	rbit	r2, r2
 8003528:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800352c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003530:	fab2 f282 	clz	r2, r2
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	f042 0220 	orr.w	r2, r2, #32
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	f002 021f 	and.w	r2, r2, #31
 8003540:	2101      	movs	r1, #1
 8003542:	fa01 f202 	lsl.w	r2, r1, r2
 8003546:	4013      	ands	r3, r2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d007      	beq.n	800355c <HAL_RCC_OscConfig+0x3cc>
 800354c:	1d3b      	adds	r3, r7, #4
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d002      	beq.n	800355c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	f000 bd1b 	b.w	8003f92 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800355c:	4ba0      	ldr	r3, [pc, #640]	; (80037e0 <HAL_RCC_OscConfig+0x650>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003564:	1d3b      	adds	r3, r7, #4
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	21f8      	movs	r1, #248	; 0xf8
 800356c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003570:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003574:	fa91 f1a1 	rbit	r1, r1
 8003578:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800357c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003580:	fab1 f181 	clz	r1, r1
 8003584:	b2c9      	uxtb	r1, r1
 8003586:	408b      	lsls	r3, r1
 8003588:	4995      	ldr	r1, [pc, #596]	; (80037e0 <HAL_RCC_OscConfig+0x650>)
 800358a:	4313      	orrs	r3, r2
 800358c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358e:	e0f5      	b.n	800377c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003590:	1d3b      	adds	r3, r7, #4
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 8085 	beq.w	80036a6 <HAL_RCC_OscConfig+0x516>
 800359c:	2301      	movs	r3, #1
 800359e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80035a6:	fa93 f3a3 	rbit	r3, r3
 80035aa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80035ae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035b2:	fab3 f383 	clz	r3, r3
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	461a      	mov	r2, r3
 80035c4:	2301      	movs	r3, #1
 80035c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c8:	f7ff fa94 	bl	8002af4 <HAL_GetTick>
 80035cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d0:	e00a      	b.n	80035e8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035d2:	f7ff fa8f 	bl	8002af4 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d902      	bls.n	80035e8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	f000 bcd5 	b.w	8003f92 <HAL_RCC_OscConfig+0xe02>
 80035e8:	2302      	movs	r3, #2
 80035ea:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ee:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80035f2:	fa93 f3a3 	rbit	r3, r3
 80035f6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80035fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fe:	fab3 f383 	clz	r3, r3
 8003602:	b2db      	uxtb	r3, r3
 8003604:	095b      	lsrs	r3, r3, #5
 8003606:	b2db      	uxtb	r3, r3
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b01      	cmp	r3, #1
 8003610:	d102      	bne.n	8003618 <HAL_RCC_OscConfig+0x488>
 8003612:	4b73      	ldr	r3, [pc, #460]	; (80037e0 <HAL_RCC_OscConfig+0x650>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	e013      	b.n	8003640 <HAL_RCC_OscConfig+0x4b0>
 8003618:	2302      	movs	r3, #2
 800361a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003622:	fa93 f3a3 	rbit	r3, r3
 8003626:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800362a:	2302      	movs	r3, #2
 800362c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003630:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003634:	fa93 f3a3 	rbit	r3, r3
 8003638:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800363c:	4b68      	ldr	r3, [pc, #416]	; (80037e0 <HAL_RCC_OscConfig+0x650>)
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	2202      	movs	r2, #2
 8003642:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003646:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800364a:	fa92 f2a2 	rbit	r2, r2
 800364e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003652:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003656:	fab2 f282 	clz	r2, r2
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	f042 0220 	orr.w	r2, r2, #32
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	f002 021f 	and.w	r2, r2, #31
 8003666:	2101      	movs	r1, #1
 8003668:	fa01 f202 	lsl.w	r2, r1, r2
 800366c:	4013      	ands	r3, r2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0af      	beq.n	80035d2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003672:	4b5b      	ldr	r3, [pc, #364]	; (80037e0 <HAL_RCC_OscConfig+0x650>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800367a:	1d3b      	adds	r3, r7, #4
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	21f8      	movs	r1, #248	; 0xf8
 8003682:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003686:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800368a:	fa91 f1a1 	rbit	r1, r1
 800368e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003692:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003696:	fab1 f181 	clz	r1, r1
 800369a:	b2c9      	uxtb	r1, r1
 800369c:	408b      	lsls	r3, r1
 800369e:	4950      	ldr	r1, [pc, #320]	; (80037e0 <HAL_RCC_OscConfig+0x650>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	600b      	str	r3, [r1, #0]
 80036a4:	e06a      	b.n	800377c <HAL_RCC_OscConfig+0x5ec>
 80036a6:	2301      	movs	r3, #1
 80036a8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80036b0:	fa93 f3a3 	rbit	r3, r3
 80036b4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80036b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036bc:	fab3 f383 	clz	r3, r3
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	461a      	mov	r2, r3
 80036ce:	2300      	movs	r3, #0
 80036d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d2:	f7ff fa0f 	bl	8002af4 <HAL_GetTick>
 80036d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036da:	e00a      	b.n	80036f2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036dc:	f7ff fa0a 	bl	8002af4 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d902      	bls.n	80036f2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	f000 bc50 	b.w	8003f92 <HAL_RCC_OscConfig+0xe02>
 80036f2:	2302      	movs	r3, #2
 80036f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80036fc:	fa93 f3a3 	rbit	r3, r3
 8003700:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003708:	fab3 f383 	clz	r3, r3
 800370c:	b2db      	uxtb	r3, r3
 800370e:	095b      	lsrs	r3, r3, #5
 8003710:	b2db      	uxtb	r3, r3
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b01      	cmp	r3, #1
 800371a:	d102      	bne.n	8003722 <HAL_RCC_OscConfig+0x592>
 800371c:	4b30      	ldr	r3, [pc, #192]	; (80037e0 <HAL_RCC_OscConfig+0x650>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	e013      	b.n	800374a <HAL_RCC_OscConfig+0x5ba>
 8003722:	2302      	movs	r3, #2
 8003724:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003728:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800372c:	fa93 f3a3 	rbit	r3, r3
 8003730:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003734:	2302      	movs	r3, #2
 8003736:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800373a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800373e:	fa93 f3a3 	rbit	r3, r3
 8003742:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003746:	4b26      	ldr	r3, [pc, #152]	; (80037e0 <HAL_RCC_OscConfig+0x650>)
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	2202      	movs	r2, #2
 800374c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003750:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003754:	fa92 f2a2 	rbit	r2, r2
 8003758:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800375c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003760:	fab2 f282 	clz	r2, r2
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	f042 0220 	orr.w	r2, r2, #32
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	f002 021f 	and.w	r2, r2, #31
 8003770:	2101      	movs	r1, #1
 8003772:	fa01 f202 	lsl.w	r2, r1, r2
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1af      	bne.n	80036dc <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800377c:	1d3b      	adds	r3, r7, #4
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 80da 	beq.w	8003940 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800378c:	1d3b      	adds	r3, r7, #4
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d069      	beq.n	800386a <HAL_RCC_OscConfig+0x6da>
 8003796:	2301      	movs	r3, #1
 8003798:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80037a0:	fa93 f3a3 	rbit	r3, r3
 80037a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80037a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ac:	fab3 f383 	clz	r3, r3
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	461a      	mov	r2, r3
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <HAL_RCC_OscConfig+0x654>)
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	461a      	mov	r2, r3
 80037bc:	2301      	movs	r3, #1
 80037be:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c0:	f7ff f998 	bl	8002af4 <HAL_GetTick>
 80037c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037c8:	e00e      	b.n	80037e8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ca:	f7ff f993 	bl	8002af4 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d906      	bls.n	80037e8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e3d9      	b.n	8003f92 <HAL_RCC_OscConfig+0xe02>
 80037de:	bf00      	nop
 80037e0:	40021000 	.word	0x40021000
 80037e4:	10908120 	.word	0x10908120
 80037e8:	2302      	movs	r3, #2
 80037ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80037f2:	fa93 f3a3 	rbit	r3, r3
 80037f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80037fa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80037fe:	2202      	movs	r2, #2
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	fa93 f2a3 	rbit	r2, r3
 800380c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003816:	2202      	movs	r2, #2
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	fa93 f2a3 	rbit	r2, r3
 8003824:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003828:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800382a:	4ba5      	ldr	r3, [pc, #660]	; (8003ac0 <HAL_RCC_OscConfig+0x930>)
 800382c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800382e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003832:	2102      	movs	r1, #2
 8003834:	6019      	str	r1, [r3, #0]
 8003836:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	fa93 f1a3 	rbit	r1, r3
 8003840:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003844:	6019      	str	r1, [r3, #0]
  return result;
 8003846:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	fab3 f383 	clz	r3, r3
 8003850:	b2db      	uxtb	r3, r3
 8003852:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003856:	b2db      	uxtb	r3, r3
 8003858:	f003 031f 	and.w	r3, r3, #31
 800385c:	2101      	movs	r1, #1
 800385e:	fa01 f303 	lsl.w	r3, r1, r3
 8003862:	4013      	ands	r3, r2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0b0      	beq.n	80037ca <HAL_RCC_OscConfig+0x63a>
 8003868:	e06a      	b.n	8003940 <HAL_RCC_OscConfig+0x7b0>
 800386a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800386e:	2201      	movs	r2, #1
 8003870:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003872:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	fa93 f2a3 	rbit	r2, r3
 800387c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003880:	601a      	str	r2, [r3, #0]
  return result;
 8003882:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003886:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003888:	fab3 f383 	clz	r3, r3
 800388c:	b2db      	uxtb	r3, r3
 800388e:	461a      	mov	r2, r3
 8003890:	4b8c      	ldr	r3, [pc, #560]	; (8003ac4 <HAL_RCC_OscConfig+0x934>)
 8003892:	4413      	add	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	461a      	mov	r2, r3
 8003898:	2300      	movs	r3, #0
 800389a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800389c:	f7ff f92a 	bl	8002af4 <HAL_GetTick>
 80038a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a4:	e009      	b.n	80038ba <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038a6:	f7ff f925 	bl	8002af4 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e36b      	b.n	8003f92 <HAL_RCC_OscConfig+0xe02>
 80038ba:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80038be:	2202      	movs	r2, #2
 80038c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	fa93 f2a3 	rbit	r2, r3
 80038cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80038d6:	2202      	movs	r2, #2
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	fa93 f2a3 	rbit	r2, r3
 80038e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80038ee:	2202      	movs	r2, #2
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	fa93 f2a3 	rbit	r2, r3
 80038fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003900:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003902:	4b6f      	ldr	r3, [pc, #444]	; (8003ac0 <HAL_RCC_OscConfig+0x930>)
 8003904:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003906:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800390a:	2102      	movs	r1, #2
 800390c:	6019      	str	r1, [r3, #0]
 800390e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	fa93 f1a3 	rbit	r1, r3
 8003918:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800391c:	6019      	str	r1, [r3, #0]
  return result;
 800391e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	fab3 f383 	clz	r3, r3
 8003928:	b2db      	uxtb	r3, r3
 800392a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800392e:	b2db      	uxtb	r3, r3
 8003930:	f003 031f 	and.w	r3, r3, #31
 8003934:	2101      	movs	r1, #1
 8003936:	fa01 f303 	lsl.w	r3, r1, r3
 800393a:	4013      	ands	r3, r2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1b2      	bne.n	80038a6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003940:	1d3b      	adds	r3, r7, #4
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 8158 	beq.w	8003c00 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003950:	2300      	movs	r3, #0
 8003952:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003956:	4b5a      	ldr	r3, [pc, #360]	; (8003ac0 <HAL_RCC_OscConfig+0x930>)
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d112      	bne.n	8003988 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003962:	4b57      	ldr	r3, [pc, #348]	; (8003ac0 <HAL_RCC_OscConfig+0x930>)
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	4a56      	ldr	r2, [pc, #344]	; (8003ac0 <HAL_RCC_OscConfig+0x930>)
 8003968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800396c:	61d3      	str	r3, [r2, #28]
 800396e:	4b54      	ldr	r3, [pc, #336]	; (8003ac0 <HAL_RCC_OscConfig+0x930>)
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003976:	f107 0308 	add.w	r3, r7, #8
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	f107 0308 	add.w	r3, r7, #8
 8003980:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003982:	2301      	movs	r3, #1
 8003984:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003988:	4b4f      	ldr	r3, [pc, #316]	; (8003ac8 <HAL_RCC_OscConfig+0x938>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003990:	2b00      	cmp	r3, #0
 8003992:	d11a      	bne.n	80039ca <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003994:	4b4c      	ldr	r3, [pc, #304]	; (8003ac8 <HAL_RCC_OscConfig+0x938>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a4b      	ldr	r2, [pc, #300]	; (8003ac8 <HAL_RCC_OscConfig+0x938>)
 800399a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a0:	f7ff f8a8 	bl	8002af4 <HAL_GetTick>
 80039a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a8:	e009      	b.n	80039be <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039aa:	f7ff f8a3 	bl	8002af4 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b64      	cmp	r3, #100	; 0x64
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e2e9      	b.n	8003f92 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039be:	4b42      	ldr	r3, [pc, #264]	; (8003ac8 <HAL_RCC_OscConfig+0x938>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0ef      	beq.n	80039aa <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ca:	1d3b      	adds	r3, r7, #4
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d106      	bne.n	80039e2 <HAL_RCC_OscConfig+0x852>
 80039d4:	4b3a      	ldr	r3, [pc, #232]	; (8003ac0 <HAL_RCC_OscConfig+0x930>)
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	4a39      	ldr	r2, [pc, #228]	; (8003ac0 <HAL_RCC_OscConfig+0x930>)
 80039da:	f043 0301 	orr.w	r3, r3, #1
 80039de:	6213      	str	r3, [r2, #32]
 80039e0:	e02f      	b.n	8003a42 <HAL_RCC_OscConfig+0x8b2>
 80039e2:	1d3b      	adds	r3, r7, #4
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10c      	bne.n	8003a06 <HAL_RCC_OscConfig+0x876>
 80039ec:	4b34      	ldr	r3, [pc, #208]	; (8003ac0 <HAL_RCC_OscConfig+0x930>)
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	4a33      	ldr	r2, [pc, #204]	; (8003ac0 <HAL_RCC_OscConfig+0x930>)
 80039f2:	f023 0301 	bic.w	r3, r3, #1
 80039f6:	6213      	str	r3, [r2, #32]
 80039f8:	4b31      	ldr	r3, [pc, #196]	; (8003ac0 <HAL_RCC_OscConfig+0x930>)
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	4a30      	ldr	r2, [pc, #192]	; (8003ac0 <HAL_RCC_OscConfig+0x930>)
 80039fe:	f023 0304 	bic.w	r3, r3, #4
 8003a02:	6213      	str	r3, [r2, #32]
 8003a04:	e01d      	b.n	8003a42 <HAL_RCC_OscConfig+0x8b2>
 8003a06:	1d3b      	adds	r3, r7, #4
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	2b05      	cmp	r3, #5
 8003a0e:	d10c      	bne.n	8003a2a <HAL_RCC_OscConfig+0x89a>
 8003a10:	4b2b      	ldr	r3, [pc, #172]	; (8003ac0 <HAL_RCC_OscConfig+0x930>)
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	4a2a      	ldr	r2, [pc, #168]	; (8003ac0 <HAL_RCC_OscConfig+0x930>)
 8003a16:	f043 0304 	orr.w	r3, r3, #4
 8003a1a:	6213      	str	r3, [r2, #32]
 8003a1c:	4b28      	ldr	r3, [pc, #160]	; (8003ac0 <HAL_RCC_OscConfig+0x930>)
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	4a27      	ldr	r2, [pc, #156]	; (8003ac0 <HAL_RCC_OscConfig+0x930>)
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	6213      	str	r3, [r2, #32]
 8003a28:	e00b      	b.n	8003a42 <HAL_RCC_OscConfig+0x8b2>
 8003a2a:	4b25      	ldr	r3, [pc, #148]	; (8003ac0 <HAL_RCC_OscConfig+0x930>)
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	4a24      	ldr	r2, [pc, #144]	; (8003ac0 <HAL_RCC_OscConfig+0x930>)
 8003a30:	f023 0301 	bic.w	r3, r3, #1
 8003a34:	6213      	str	r3, [r2, #32]
 8003a36:	4b22      	ldr	r3, [pc, #136]	; (8003ac0 <HAL_RCC_OscConfig+0x930>)
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	4a21      	ldr	r2, [pc, #132]	; (8003ac0 <HAL_RCC_OscConfig+0x930>)
 8003a3c:	f023 0304 	bic.w	r3, r3, #4
 8003a40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a42:	1d3b      	adds	r3, r7, #4
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d06b      	beq.n	8003b24 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a4c:	f7ff f852 	bl	8002af4 <HAL_GetTick>
 8003a50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a54:	e00b      	b.n	8003a6e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a56:	f7ff f84d 	bl	8002af4 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e291      	b.n	8003f92 <HAL_RCC_OscConfig+0xe02>
 8003a6e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003a72:	2202      	movs	r2, #2
 8003a74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a76:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	fa93 f2a3 	rbit	r2, r3
 8003a80:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	fa93 f2a3 	rbit	r2, r3
 8003a98:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003a9c:	601a      	str	r2, [r3, #0]
  return result;
 8003a9e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003aa2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa4:	fab3 f383 	clz	r3, r3
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	095b      	lsrs	r3, r3, #5
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	f043 0302 	orr.w	r3, r3, #2
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d109      	bne.n	8003acc <HAL_RCC_OscConfig+0x93c>
 8003ab8:	4b01      	ldr	r3, [pc, #4]	; (8003ac0 <HAL_RCC_OscConfig+0x930>)
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	e014      	b.n	8003ae8 <HAL_RCC_OscConfig+0x958>
 8003abe:	bf00      	nop
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	10908120 	.word	0x10908120
 8003ac8:	40007000 	.word	0x40007000
 8003acc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	fa93 f2a3 	rbit	r2, r3
 8003ade:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	4bbb      	ldr	r3, [pc, #748]	; (8003dd4 <HAL_RCC_OscConfig+0xc44>)
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003aec:	2102      	movs	r1, #2
 8003aee:	6011      	str	r1, [r2, #0]
 8003af0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003af4:	6812      	ldr	r2, [r2, #0]
 8003af6:	fa92 f1a2 	rbit	r1, r2
 8003afa:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003afe:	6011      	str	r1, [r2, #0]
  return result;
 8003b00:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003b04:	6812      	ldr	r2, [r2, #0]
 8003b06:	fab2 f282 	clz	r2, r2
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b10:	b2d2      	uxtb	r2, r2
 8003b12:	f002 021f 	and.w	r2, r2, #31
 8003b16:	2101      	movs	r1, #1
 8003b18:	fa01 f202 	lsl.w	r2, r1, r2
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d099      	beq.n	8003a56 <HAL_RCC_OscConfig+0x8c6>
 8003b22:	e063      	b.n	8003bec <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b24:	f7fe ffe6 	bl	8002af4 <HAL_GetTick>
 8003b28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b2c:	e00b      	b.n	8003b46 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b2e:	f7fe ffe1 	bl	8002af4 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e225      	b.n	8003f92 <HAL_RCC_OscConfig+0xe02>
 8003b46:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	fa93 f2a3 	rbit	r2, r3
 8003b58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003b62:	2202      	movs	r2, #2
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	fa93 f2a3 	rbit	r2, r3
 8003b70:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003b74:	601a      	str	r2, [r3, #0]
  return result;
 8003b76:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003b7a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b7c:	fab3 f383 	clz	r3, r3
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	095b      	lsrs	r3, r3, #5
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f043 0302 	orr.w	r3, r3, #2
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d102      	bne.n	8003b96 <HAL_RCC_OscConfig+0xa06>
 8003b90:	4b90      	ldr	r3, [pc, #576]	; (8003dd4 <HAL_RCC_OscConfig+0xc44>)
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	e00d      	b.n	8003bb2 <HAL_RCC_OscConfig+0xa22>
 8003b96:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	fa93 f2a3 	rbit	r2, r3
 8003ba8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	4b89      	ldr	r3, [pc, #548]	; (8003dd4 <HAL_RCC_OscConfig+0xc44>)
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003bb6:	2102      	movs	r1, #2
 8003bb8:	6011      	str	r1, [r2, #0]
 8003bba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003bbe:	6812      	ldr	r2, [r2, #0]
 8003bc0:	fa92 f1a2 	rbit	r1, r2
 8003bc4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003bc8:	6011      	str	r1, [r2, #0]
  return result;
 8003bca:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003bce:	6812      	ldr	r2, [r2, #0]
 8003bd0:	fab2 f282 	clz	r2, r2
 8003bd4:	b2d2      	uxtb	r2, r2
 8003bd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	f002 021f 	and.w	r2, r2, #31
 8003be0:	2101      	movs	r1, #1
 8003be2:	fa01 f202 	lsl.w	r2, r1, r2
 8003be6:	4013      	ands	r3, r2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1a0      	bne.n	8003b2e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bec:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d105      	bne.n	8003c00 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bf4:	4b77      	ldr	r3, [pc, #476]	; (8003dd4 <HAL_RCC_OscConfig+0xc44>)
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	4a76      	ldr	r2, [pc, #472]	; (8003dd4 <HAL_RCC_OscConfig+0xc44>)
 8003bfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c00:	1d3b      	adds	r3, r7, #4
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 81c2 	beq.w	8003f90 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c0c:	4b71      	ldr	r3, [pc, #452]	; (8003dd4 <HAL_RCC_OscConfig+0xc44>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 030c 	and.w	r3, r3, #12
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	f000 819c 	beq.w	8003f52 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c1a:	1d3b      	adds	r3, r7, #4
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	f040 8114 	bne.w	8003e4e <HAL_RCC_OscConfig+0xcbe>
 8003c26:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003c2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c30:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	fa93 f2a3 	rbit	r2, r3
 8003c3a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003c3e:	601a      	str	r2, [r3, #0]
  return result;
 8003c40:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003c44:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c46:	fab3 f383 	clz	r3, r3
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	461a      	mov	r2, r3
 8003c58:	2300      	movs	r3, #0
 8003c5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5c:	f7fe ff4a 	bl	8002af4 <HAL_GetTick>
 8003c60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c64:	e009      	b.n	8003c7a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c66:	f7fe ff45 	bl	8002af4 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e18b      	b.n	8003f92 <HAL_RCC_OscConfig+0xe02>
 8003c7a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003c7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c84:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	fa93 f2a3 	rbit	r2, r3
 8003c8e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003c92:	601a      	str	r2, [r3, #0]
  return result;
 8003c94:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003c98:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c9a:	fab3 f383 	clz	r3, r3
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	095b      	lsrs	r3, r3, #5
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d102      	bne.n	8003cb4 <HAL_RCC_OscConfig+0xb24>
 8003cae:	4b49      	ldr	r3, [pc, #292]	; (8003dd4 <HAL_RCC_OscConfig+0xc44>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	e01b      	b.n	8003cec <HAL_RCC_OscConfig+0xb5c>
 8003cb4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003cb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	fa93 f2a3 	rbit	r2, r3
 8003cc8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003cd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	fa93 f2a3 	rbit	r2, r3
 8003ce2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	4b3a      	ldr	r3, [pc, #232]	; (8003dd4 <HAL_RCC_OscConfig+0xc44>)
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003cf0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003cf4:	6011      	str	r1, [r2, #0]
 8003cf6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003cfa:	6812      	ldr	r2, [r2, #0]
 8003cfc:	fa92 f1a2 	rbit	r1, r2
 8003d00:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003d04:	6011      	str	r1, [r2, #0]
  return result;
 8003d06:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003d0a:	6812      	ldr	r2, [r2, #0]
 8003d0c:	fab2 f282 	clz	r2, r2
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	f042 0220 	orr.w	r2, r2, #32
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	f002 021f 	and.w	r2, r2, #31
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d22:	4013      	ands	r3, r2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d19e      	bne.n	8003c66 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d28:	4b2a      	ldr	r3, [pc, #168]	; (8003dd4 <HAL_RCC_OscConfig+0xc44>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d30:	1d3b      	adds	r3, r7, #4
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003d36:	1d3b      	adds	r3, r7, #4
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	4925      	ldr	r1, [pc, #148]	; (8003dd4 <HAL_RCC_OscConfig+0xc44>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	604b      	str	r3, [r1, #4]
 8003d44:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003d48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	fa93 f2a3 	rbit	r2, r3
 8003d58:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d5c:	601a      	str	r2, [r3, #0]
  return result;
 8003d5e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d62:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d64:	fab3 f383 	clz	r3, r3
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d6e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	461a      	mov	r2, r3
 8003d76:	2301      	movs	r3, #1
 8003d78:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7a:	f7fe febb 	bl	8002af4 <HAL_GetTick>
 8003d7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d82:	e009      	b.n	8003d98 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d84:	f7fe feb6 	bl	8002af4 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e0fc      	b.n	8003f92 <HAL_RCC_OscConfig+0xe02>
 8003d98:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003d9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003da0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	fa93 f2a3 	rbit	r2, r3
 8003dac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003db0:	601a      	str	r2, [r3, #0]
  return result;
 8003db2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003db6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003db8:	fab3 f383 	clz	r3, r3
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d105      	bne.n	8003dd8 <HAL_RCC_OscConfig+0xc48>
 8003dcc:	4b01      	ldr	r3, [pc, #4]	; (8003dd4 <HAL_RCC_OscConfig+0xc44>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	e01e      	b.n	8003e10 <HAL_RCC_OscConfig+0xc80>
 8003dd2:	bf00      	nop
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ddc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003de0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	fa93 f2a3 	rbit	r2, r3
 8003dec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003df6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	fa93 f2a3 	rbit	r2, r3
 8003e06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	4b63      	ldr	r3, [pc, #396]	; (8003f9c <HAL_RCC_OscConfig+0xe0c>)
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003e14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e18:	6011      	str	r1, [r2, #0]
 8003e1a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003e1e:	6812      	ldr	r2, [r2, #0]
 8003e20:	fa92 f1a2 	rbit	r1, r2
 8003e24:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003e28:	6011      	str	r1, [r2, #0]
  return result;
 8003e2a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003e2e:	6812      	ldr	r2, [r2, #0]
 8003e30:	fab2 f282 	clz	r2, r2
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	f042 0220 	orr.w	r2, r2, #32
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	f002 021f 	and.w	r2, r2, #31
 8003e40:	2101      	movs	r1, #1
 8003e42:	fa01 f202 	lsl.w	r2, r1, r2
 8003e46:	4013      	ands	r3, r2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d09b      	beq.n	8003d84 <HAL_RCC_OscConfig+0xbf4>
 8003e4c:	e0a0      	b.n	8003f90 <HAL_RCC_OscConfig+0xe00>
 8003e4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	fa93 f2a3 	rbit	r2, r3
 8003e62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e66:	601a      	str	r2, [r3, #0]
  return result;
 8003e68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e6c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6e:	fab3 f383 	clz	r3, r3
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	461a      	mov	r2, r3
 8003e80:	2300      	movs	r3, #0
 8003e82:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e84:	f7fe fe36 	bl	8002af4 <HAL_GetTick>
 8003e88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e8c:	e009      	b.n	8003ea2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e8e:	f7fe fe31 	bl	8002af4 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e077      	b.n	8003f92 <HAL_RCC_OscConfig+0xe02>
 8003ea2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ea6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003eaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	fa93 f2a3 	rbit	r2, r3
 8003eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eba:	601a      	str	r2, [r3, #0]
  return result;
 8003ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ec0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ec2:	fab3 f383 	clz	r3, r3
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	095b      	lsrs	r3, r3, #5
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	f043 0301 	orr.w	r3, r3, #1
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d102      	bne.n	8003edc <HAL_RCC_OscConfig+0xd4c>
 8003ed6:	4b31      	ldr	r3, [pc, #196]	; (8003f9c <HAL_RCC_OscConfig+0xe0c>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	e01b      	b.n	8003f14 <HAL_RCC_OscConfig+0xd84>
 8003edc:	f107 0320 	add.w	r3, r7, #32
 8003ee0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ee4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee6:	f107 0320 	add.w	r3, r7, #32
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	fa93 f2a3 	rbit	r2, r3
 8003ef0:	f107 031c 	add.w	r3, r7, #28
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	f107 0318 	add.w	r3, r7, #24
 8003efa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	f107 0318 	add.w	r3, r7, #24
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	fa93 f2a3 	rbit	r2, r3
 8003f0a:	f107 0314 	add.w	r3, r7, #20
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	4b22      	ldr	r3, [pc, #136]	; (8003f9c <HAL_RCC_OscConfig+0xe0c>)
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	f107 0210 	add.w	r2, r7, #16
 8003f18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f1c:	6011      	str	r1, [r2, #0]
 8003f1e:	f107 0210 	add.w	r2, r7, #16
 8003f22:	6812      	ldr	r2, [r2, #0]
 8003f24:	fa92 f1a2 	rbit	r1, r2
 8003f28:	f107 020c 	add.w	r2, r7, #12
 8003f2c:	6011      	str	r1, [r2, #0]
  return result;
 8003f2e:	f107 020c 	add.w	r2, r7, #12
 8003f32:	6812      	ldr	r2, [r2, #0]
 8003f34:	fab2 f282 	clz	r2, r2
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	f042 0220 	orr.w	r2, r2, #32
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	f002 021f 	and.w	r2, r2, #31
 8003f44:	2101      	movs	r1, #1
 8003f46:	fa01 f202 	lsl.w	r2, r1, r2
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d19e      	bne.n	8003e8e <HAL_RCC_OscConfig+0xcfe>
 8003f50:	e01e      	b.n	8003f90 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f52:	1d3b      	adds	r3, r7, #4
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e018      	b.n	8003f92 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f60:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <HAL_RCC_OscConfig+0xe0c>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003f68:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003f6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f70:	1d3b      	adds	r3, r7, #4
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d108      	bne.n	8003f8c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003f7a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003f7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f82:	1d3b      	adds	r3, r7, #4
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d001      	beq.n	8003f90 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e000      	b.n	8003f92 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40021000 	.word	0x40021000

08003fa0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b09e      	sub	sp, #120	; 0x78
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e162      	b.n	800427e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb8:	4b90      	ldr	r3, [pc, #576]	; (80041fc <HAL_RCC_ClockConfig+0x25c>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d910      	bls.n	8003fe8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc6:	4b8d      	ldr	r3, [pc, #564]	; (80041fc <HAL_RCC_ClockConfig+0x25c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 0207 	bic.w	r2, r3, #7
 8003fce:	498b      	ldr	r1, [pc, #556]	; (80041fc <HAL_RCC_ClockConfig+0x25c>)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd6:	4b89      	ldr	r3, [pc, #548]	; (80041fc <HAL_RCC_ClockConfig+0x25c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e14a      	b.n	800427e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d008      	beq.n	8004006 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff4:	4b82      	ldr	r3, [pc, #520]	; (8004200 <HAL_RCC_ClockConfig+0x260>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	497f      	ldr	r1, [pc, #508]	; (8004200 <HAL_RCC_ClockConfig+0x260>)
 8004002:	4313      	orrs	r3, r2
 8004004:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	f000 80dc 	beq.w	80041cc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d13c      	bne.n	8004096 <HAL_RCC_ClockConfig+0xf6>
 800401c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004020:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004022:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004024:	fa93 f3a3 	rbit	r3, r3
 8004028:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800402a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402c:	fab3 f383 	clz	r3, r3
 8004030:	b2db      	uxtb	r3, r3
 8004032:	095b      	lsrs	r3, r3, #5
 8004034:	b2db      	uxtb	r3, r3
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b01      	cmp	r3, #1
 800403e:	d102      	bne.n	8004046 <HAL_RCC_ClockConfig+0xa6>
 8004040:	4b6f      	ldr	r3, [pc, #444]	; (8004200 <HAL_RCC_ClockConfig+0x260>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	e00f      	b.n	8004066 <HAL_RCC_ClockConfig+0xc6>
 8004046:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800404a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800404e:	fa93 f3a3 	rbit	r3, r3
 8004052:	667b      	str	r3, [r7, #100]	; 0x64
 8004054:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004058:	663b      	str	r3, [r7, #96]	; 0x60
 800405a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800405c:	fa93 f3a3 	rbit	r3, r3
 8004060:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004062:	4b67      	ldr	r3, [pc, #412]	; (8004200 <HAL_RCC_ClockConfig+0x260>)
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800406a:	65ba      	str	r2, [r7, #88]	; 0x58
 800406c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800406e:	fa92 f2a2 	rbit	r2, r2
 8004072:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004074:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004076:	fab2 f282 	clz	r2, r2
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	f042 0220 	orr.w	r2, r2, #32
 8004080:	b2d2      	uxtb	r2, r2
 8004082:	f002 021f 	and.w	r2, r2, #31
 8004086:	2101      	movs	r1, #1
 8004088:	fa01 f202 	lsl.w	r2, r1, r2
 800408c:	4013      	ands	r3, r2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d17b      	bne.n	800418a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e0f3      	b.n	800427e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b02      	cmp	r3, #2
 800409c:	d13c      	bne.n	8004118 <HAL_RCC_ClockConfig+0x178>
 800409e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040a6:	fa93 f3a3 	rbit	r3, r3
 80040aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80040ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ae:	fab3 f383 	clz	r3, r3
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	095b      	lsrs	r3, r3, #5
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	f043 0301 	orr.w	r3, r3, #1
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d102      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x128>
 80040c2:	4b4f      	ldr	r3, [pc, #316]	; (8004200 <HAL_RCC_ClockConfig+0x260>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	e00f      	b.n	80040e8 <HAL_RCC_ClockConfig+0x148>
 80040c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040cc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040d0:	fa93 f3a3 	rbit	r3, r3
 80040d4:	647b      	str	r3, [r7, #68]	; 0x44
 80040d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040da:	643b      	str	r3, [r7, #64]	; 0x40
 80040dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040de:	fa93 f3a3 	rbit	r3, r3
 80040e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040e4:	4b46      	ldr	r3, [pc, #280]	; (8004200 <HAL_RCC_ClockConfig+0x260>)
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040ec:	63ba      	str	r2, [r7, #56]	; 0x38
 80040ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040f0:	fa92 f2a2 	rbit	r2, r2
 80040f4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80040f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040f8:	fab2 f282 	clz	r2, r2
 80040fc:	b2d2      	uxtb	r2, r2
 80040fe:	f042 0220 	orr.w	r2, r2, #32
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	f002 021f 	and.w	r2, r2, #31
 8004108:	2101      	movs	r1, #1
 800410a:	fa01 f202 	lsl.w	r2, r1, r2
 800410e:	4013      	ands	r3, r2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d13a      	bne.n	800418a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e0b2      	b.n	800427e <HAL_RCC_ClockConfig+0x2de>
 8004118:	2302      	movs	r3, #2
 800411a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411e:	fa93 f3a3 	rbit	r3, r3
 8004122:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004126:	fab3 f383 	clz	r3, r3
 800412a:	b2db      	uxtb	r3, r3
 800412c:	095b      	lsrs	r3, r3, #5
 800412e:	b2db      	uxtb	r3, r3
 8004130:	f043 0301 	orr.w	r3, r3, #1
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b01      	cmp	r3, #1
 8004138:	d102      	bne.n	8004140 <HAL_RCC_ClockConfig+0x1a0>
 800413a:	4b31      	ldr	r3, [pc, #196]	; (8004200 <HAL_RCC_ClockConfig+0x260>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	e00d      	b.n	800415c <HAL_RCC_ClockConfig+0x1bc>
 8004140:	2302      	movs	r3, #2
 8004142:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004146:	fa93 f3a3 	rbit	r3, r3
 800414a:	627b      	str	r3, [r7, #36]	; 0x24
 800414c:	2302      	movs	r3, #2
 800414e:	623b      	str	r3, [r7, #32]
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	fa93 f3a3 	rbit	r3, r3
 8004156:	61fb      	str	r3, [r7, #28]
 8004158:	4b29      	ldr	r3, [pc, #164]	; (8004200 <HAL_RCC_ClockConfig+0x260>)
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	2202      	movs	r2, #2
 800415e:	61ba      	str	r2, [r7, #24]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	fa92 f2a2 	rbit	r2, r2
 8004166:	617a      	str	r2, [r7, #20]
  return result;
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	fab2 f282 	clz	r2, r2
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	f042 0220 	orr.w	r2, r2, #32
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	f002 021f 	and.w	r2, r2, #31
 800417a:	2101      	movs	r1, #1
 800417c:	fa01 f202 	lsl.w	r2, r1, r2
 8004180:	4013      	ands	r3, r2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e079      	b.n	800427e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800418a:	4b1d      	ldr	r3, [pc, #116]	; (8004200 <HAL_RCC_ClockConfig+0x260>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f023 0203 	bic.w	r2, r3, #3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	491a      	ldr	r1, [pc, #104]	; (8004200 <HAL_RCC_ClockConfig+0x260>)
 8004198:	4313      	orrs	r3, r2
 800419a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800419c:	f7fe fcaa 	bl	8002af4 <HAL_GetTick>
 80041a0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a2:	e00a      	b.n	80041ba <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a4:	f7fe fca6 	bl	8002af4 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e061      	b.n	800427e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ba:	4b11      	ldr	r3, [pc, #68]	; (8004200 <HAL_RCC_ClockConfig+0x260>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f003 020c 	and.w	r2, r3, #12
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d1eb      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041cc:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <HAL_RCC_ClockConfig+0x25c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d214      	bcs.n	8004204 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041da:	4b08      	ldr	r3, [pc, #32]	; (80041fc <HAL_RCC_ClockConfig+0x25c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f023 0207 	bic.w	r2, r3, #7
 80041e2:	4906      	ldr	r1, [pc, #24]	; (80041fc <HAL_RCC_ClockConfig+0x25c>)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ea:	4b04      	ldr	r3, [pc, #16]	; (80041fc <HAL_RCC_ClockConfig+0x25c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d005      	beq.n	8004204 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e040      	b.n	800427e <HAL_RCC_ClockConfig+0x2de>
 80041fc:	40022000 	.word	0x40022000
 8004200:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0304 	and.w	r3, r3, #4
 800420c:	2b00      	cmp	r3, #0
 800420e:	d008      	beq.n	8004222 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004210:	4b1d      	ldr	r3, [pc, #116]	; (8004288 <HAL_RCC_ClockConfig+0x2e8>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	491a      	ldr	r1, [pc, #104]	; (8004288 <HAL_RCC_ClockConfig+0x2e8>)
 800421e:	4313      	orrs	r3, r2
 8004220:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b00      	cmp	r3, #0
 800422c:	d009      	beq.n	8004242 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800422e:	4b16      	ldr	r3, [pc, #88]	; (8004288 <HAL_RCC_ClockConfig+0x2e8>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	4912      	ldr	r1, [pc, #72]	; (8004288 <HAL_RCC_ClockConfig+0x2e8>)
 800423e:	4313      	orrs	r3, r2
 8004240:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004242:	f000 f829 	bl	8004298 <HAL_RCC_GetSysClockFreq>
 8004246:	4601      	mov	r1, r0
 8004248:	4b0f      	ldr	r3, [pc, #60]	; (8004288 <HAL_RCC_ClockConfig+0x2e8>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004250:	22f0      	movs	r2, #240	; 0xf0
 8004252:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	fa92 f2a2 	rbit	r2, r2
 800425a:	60fa      	str	r2, [r7, #12]
  return result;
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	fab2 f282 	clz	r2, r2
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	40d3      	lsrs	r3, r2
 8004266:	4a09      	ldr	r2, [pc, #36]	; (800428c <HAL_RCC_ClockConfig+0x2ec>)
 8004268:	5cd3      	ldrb	r3, [r2, r3]
 800426a:	fa21 f303 	lsr.w	r3, r1, r3
 800426e:	4a08      	ldr	r2, [pc, #32]	; (8004290 <HAL_RCC_ClockConfig+0x2f0>)
 8004270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004272:	4b08      	ldr	r3, [pc, #32]	; (8004294 <HAL_RCC_ClockConfig+0x2f4>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f7fe fbf8 	bl	8002a6c <HAL_InitTick>
  
  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3778      	adds	r7, #120	; 0x78
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	40021000 	.word	0x40021000
 800428c:	080080b8 	.word	0x080080b8
 8004290:	20000004 	.word	0x20000004
 8004294:	20000008 	.word	0x20000008

08004298 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004298:	b480      	push	{r7}
 800429a:	b08b      	sub	sp, #44	; 0x2c
 800429c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	61fb      	str	r3, [r7, #28]
 80042a2:	2300      	movs	r3, #0
 80042a4:	61bb      	str	r3, [r7, #24]
 80042a6:	2300      	movs	r3, #0
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
 80042aa:	2300      	movs	r3, #0
 80042ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80042b2:	4b29      	ldr	r3, [pc, #164]	; (8004358 <HAL_RCC_GetSysClockFreq+0xc0>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f003 030c 	and.w	r3, r3, #12
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d002      	beq.n	80042c8 <HAL_RCC_GetSysClockFreq+0x30>
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	d003      	beq.n	80042ce <HAL_RCC_GetSysClockFreq+0x36>
 80042c6:	e03c      	b.n	8004342 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042c8:	4b24      	ldr	r3, [pc, #144]	; (800435c <HAL_RCC_GetSysClockFreq+0xc4>)
 80042ca:	623b      	str	r3, [r7, #32]
      break;
 80042cc:	e03c      	b.n	8004348 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80042d4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80042d8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	fa92 f2a2 	rbit	r2, r2
 80042e0:	607a      	str	r2, [r7, #4]
  return result;
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	fab2 f282 	clz	r2, r2
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	40d3      	lsrs	r3, r2
 80042ec:	4a1c      	ldr	r2, [pc, #112]	; (8004360 <HAL_RCC_GetSysClockFreq+0xc8>)
 80042ee:	5cd3      	ldrb	r3, [r2, r3]
 80042f0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80042f2:	4b19      	ldr	r3, [pc, #100]	; (8004358 <HAL_RCC_GetSysClockFreq+0xc0>)
 80042f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	220f      	movs	r2, #15
 80042fc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	fa92 f2a2 	rbit	r2, r2
 8004304:	60fa      	str	r2, [r7, #12]
  return result;
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	fab2 f282 	clz	r2, r2
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	40d3      	lsrs	r3, r2
 8004310:	4a14      	ldr	r2, [pc, #80]	; (8004364 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004312:	5cd3      	ldrb	r3, [r2, r3]
 8004314:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004320:	4a0e      	ldr	r2, [pc, #56]	; (800435c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	fbb2 f2f3 	udiv	r2, r2, r3
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	fb02 f303 	mul.w	r3, r2, r3
 800432e:	627b      	str	r3, [r7, #36]	; 0x24
 8004330:	e004      	b.n	800433c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	4a0c      	ldr	r2, [pc, #48]	; (8004368 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004336:	fb02 f303 	mul.w	r3, r2, r3
 800433a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	623b      	str	r3, [r7, #32]
      break;
 8004340:	e002      	b.n	8004348 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004342:	4b0a      	ldr	r3, [pc, #40]	; (800436c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004344:	623b      	str	r3, [r7, #32]
      break;
 8004346:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004348:	6a3b      	ldr	r3, [r7, #32]
}
 800434a:	4618      	mov	r0, r3
 800434c:	372c      	adds	r7, #44	; 0x2c
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	40021000 	.word	0x40021000
 800435c:	00f42400 	.word	0x00f42400
 8004360:	080080d0 	.word	0x080080d0
 8004364:	080080e0 	.word	0x080080e0
 8004368:	003d0900 	.word	0x003d0900
 800436c:	007a1200 	.word	0x007a1200

08004370 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004374:	4b03      	ldr	r3, [pc, #12]	; (8004384 <HAL_RCC_GetHCLKFreq+0x14>)
 8004376:	681b      	ldr	r3, [r3, #0]
}
 8004378:	4618      	mov	r0, r3
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	20000004 	.word	0x20000004

08004388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800438e:	f7ff ffef 	bl	8004370 <HAL_RCC_GetHCLKFreq>
 8004392:	4601      	mov	r1, r0
 8004394:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800439c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80043a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	fa92 f2a2 	rbit	r2, r2
 80043a8:	603a      	str	r2, [r7, #0]
  return result;
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	fab2 f282 	clz	r2, r2
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	40d3      	lsrs	r3, r2
 80043b4:	4a04      	ldr	r2, [pc, #16]	; (80043c8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80043b6:	5cd3      	ldrb	r3, [r2, r3]
 80043b8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80043bc:	4618      	mov	r0, r3
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40021000 	.word	0x40021000
 80043c8:	080080c8 	.word	0x080080c8

080043cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80043d2:	f7ff ffcd 	bl	8004370 <HAL_RCC_GetHCLKFreq>
 80043d6:	4601      	mov	r1, r0
 80043d8:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80043e0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80043e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	fa92 f2a2 	rbit	r2, r2
 80043ec:	603a      	str	r2, [r7, #0]
  return result;
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	fab2 f282 	clz	r2, r2
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	40d3      	lsrs	r3, r2
 80043f8:	4a04      	ldr	r2, [pc, #16]	; (800440c <HAL_RCC_GetPCLK2Freq+0x40>)
 80043fa:	5cd3      	ldrb	r3, [r2, r3]
 80043fc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004400:	4618      	mov	r0, r3
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40021000 	.word	0x40021000
 800440c:	080080c8 	.word	0x080080c8

08004410 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b092      	sub	sp, #72	; 0x48
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800441c:	2300      	movs	r3, #0
 800441e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004420:	2300      	movs	r3, #0
 8004422:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 80cd 	beq.w	80045ce <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004434:	4b86      	ldr	r3, [pc, #536]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10e      	bne.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004440:	4b83      	ldr	r3, [pc, #524]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	4a82      	ldr	r2, [pc, #520]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800444a:	61d3      	str	r3, [r2, #28]
 800444c:	4b80      	ldr	r3, [pc, #512]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004454:	60bb      	str	r3, [r7, #8]
 8004456:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004458:	2301      	movs	r3, #1
 800445a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800445e:	4b7d      	ldr	r3, [pc, #500]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004466:	2b00      	cmp	r3, #0
 8004468:	d118      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800446a:	4b7a      	ldr	r3, [pc, #488]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a79      	ldr	r2, [pc, #484]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004474:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004476:	f7fe fb3d 	bl	8002af4 <HAL_GetTick>
 800447a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447c:	e008      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800447e:	f7fe fb39 	bl	8002af4 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b64      	cmp	r3, #100	; 0x64
 800448a:	d901      	bls.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e0db      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004490:	4b70      	ldr	r3, [pc, #448]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0f0      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800449c:	4b6c      	ldr	r3, [pc, #432]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d07d      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d076      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044ba:	4b65      	ldr	r3, [pc, #404]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044c8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044cc:	fa93 f3a3 	rbit	r3, r3
 80044d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80044d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044d4:	fab3 f383 	clz	r3, r3
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	461a      	mov	r2, r3
 80044dc:	4b5e      	ldr	r3, [pc, #376]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044de:	4413      	add	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	461a      	mov	r2, r3
 80044e4:	2301      	movs	r3, #1
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f0:	fa93 f3a3 	rbit	r3, r3
 80044f4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80044f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044f8:	fab3 f383 	clz	r3, r3
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	461a      	mov	r2, r3
 8004500:	4b55      	ldr	r3, [pc, #340]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004502:	4413      	add	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	461a      	mov	r2, r3
 8004508:	2300      	movs	r3, #0
 800450a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800450c:	4a50      	ldr	r2, [pc, #320]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800450e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004510:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d045      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451c:	f7fe faea 	bl	8002af4 <HAL_GetTick>
 8004520:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004522:	e00a      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004524:	f7fe fae6 	bl	8002af4 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004532:	4293      	cmp	r3, r2
 8004534:	d901      	bls.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e086      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800453a:	2302      	movs	r3, #2
 800453c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004540:	fa93 f3a3 	rbit	r3, r3
 8004544:	627b      	str	r3, [r7, #36]	; 0x24
 8004546:	2302      	movs	r3, #2
 8004548:	623b      	str	r3, [r7, #32]
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	fa93 f3a3 	rbit	r3, r3
 8004550:	61fb      	str	r3, [r7, #28]
  return result;
 8004552:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004554:	fab3 f383 	clz	r3, r3
 8004558:	b2db      	uxtb	r3, r3
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	b2db      	uxtb	r3, r3
 800455e:	f043 0302 	orr.w	r3, r3, #2
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d102      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004568:	4b39      	ldr	r3, [pc, #228]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	e007      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800456e:	2302      	movs	r3, #2
 8004570:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	fa93 f3a3 	rbit	r3, r3
 8004578:	617b      	str	r3, [r7, #20]
 800457a:	4b35      	ldr	r3, [pc, #212]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	2202      	movs	r2, #2
 8004580:	613a      	str	r2, [r7, #16]
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	fa92 f2a2 	rbit	r2, r2
 8004588:	60fa      	str	r2, [r7, #12]
  return result;
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	fab2 f282 	clz	r2, r2
 8004590:	b2d2      	uxtb	r2, r2
 8004592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	f002 021f 	and.w	r2, r2, #31
 800459c:	2101      	movs	r1, #1
 800459e:	fa01 f202 	lsl.w	r2, r1, r2
 80045a2:	4013      	ands	r3, r2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0bd      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80045a8:	4b29      	ldr	r3, [pc, #164]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	4926      	ldr	r1, [pc, #152]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d105      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045c2:	4b23      	ldr	r3, [pc, #140]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	4a22      	ldr	r2, [pc, #136]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045cc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d008      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045da:	4b1d      	ldr	r3, [pc, #116]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	f023 0203 	bic.w	r2, r3, #3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	491a      	ldr	r1, [pc, #104]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0320 	and.w	r3, r3, #32
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d008      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045f8:	4b15      	ldr	r3, [pc, #84]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fc:	f023 0210 	bic.w	r2, r3, #16
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	4912      	ldr	r1, [pc, #72]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004606:	4313      	orrs	r3, r2
 8004608:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004612:	2b00      	cmp	r3, #0
 8004614:	d008      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004616:	4b0e      	ldr	r3, [pc, #56]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	490b      	ldr	r1, [pc, #44]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004624:	4313      	orrs	r3, r2
 8004626:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d008      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004634:	4b06      	ldr	r3, [pc, #24]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004638:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	4903      	ldr	r1, [pc, #12]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004642:	4313      	orrs	r3, r2
 8004644:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3748      	adds	r7, #72	; 0x48
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	40021000 	.word	0x40021000
 8004654:	40007000 	.word	0x40007000
 8004658:	10908100 	.word	0x10908100

0800465c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e049      	b.n	8004702 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d106      	bne.n	8004688 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7fe f808 	bl	8002698 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3304      	adds	r3, #4
 8004698:	4619      	mov	r1, r3
 800469a:	4610      	mov	r0, r2
 800469c:	f000 fd66 	bl	800516c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
	...

0800470c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b01      	cmp	r3, #1
 800471e:	d001      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e040      	b.n	80047a6 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0201 	orr.w	r2, r2, #1
 800473a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a1c      	ldr	r2, [pc, #112]	; (80047b4 <HAL_TIM_Base_Start_IT+0xa8>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00e      	beq.n	8004764 <HAL_TIM_Base_Start_IT+0x58>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800474e:	d009      	beq.n	8004764 <HAL_TIM_Base_Start_IT+0x58>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a18      	ldr	r2, [pc, #96]	; (80047b8 <HAL_TIM_Base_Start_IT+0xac>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d004      	beq.n	8004764 <HAL_TIM_Base_Start_IT+0x58>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a17      	ldr	r2, [pc, #92]	; (80047bc <HAL_TIM_Base_Start_IT+0xb0>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d115      	bne.n	8004790 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	4b15      	ldr	r3, [pc, #84]	; (80047c0 <HAL_TIM_Base_Start_IT+0xb4>)
 800476c:	4013      	ands	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b06      	cmp	r3, #6
 8004774:	d015      	beq.n	80047a2 <HAL_TIM_Base_Start_IT+0x96>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800477c:	d011      	beq.n	80047a2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 0201 	orr.w	r2, r2, #1
 800478c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478e:	e008      	b.n	80047a2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0201 	orr.w	r2, r2, #1
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	e000      	b.n	80047a4 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	40012c00 	.word	0x40012c00
 80047b8:	40000400 	.word	0x40000400
 80047bc:	40014000 	.word	0x40014000
 80047c0:	00010007 	.word	0x00010007

080047c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e049      	b.n	800486a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d106      	bne.n	80047f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7fd fec2 	bl	8002574 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3304      	adds	r3, #4
 8004800:	4619      	mov	r1, r3
 8004802:	4610      	mov	r0, r2
 8004804:	f000 fcb2 	bl	800516c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
	...

08004874 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d109      	bne.n	8004898 <HAL_TIM_PWM_Start+0x24>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b01      	cmp	r3, #1
 800488e:	bf14      	ite	ne
 8004890:	2301      	movne	r3, #1
 8004892:	2300      	moveq	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	e03c      	b.n	8004912 <HAL_TIM_PWM_Start+0x9e>
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2b04      	cmp	r3, #4
 800489c:	d109      	bne.n	80048b2 <HAL_TIM_PWM_Start+0x3e>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	bf14      	ite	ne
 80048aa:	2301      	movne	r3, #1
 80048ac:	2300      	moveq	r3, #0
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	e02f      	b.n	8004912 <HAL_TIM_PWM_Start+0x9e>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d109      	bne.n	80048cc <HAL_TIM_PWM_Start+0x58>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	bf14      	ite	ne
 80048c4:	2301      	movne	r3, #1
 80048c6:	2300      	moveq	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	e022      	b.n	8004912 <HAL_TIM_PWM_Start+0x9e>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2b0c      	cmp	r3, #12
 80048d0:	d109      	bne.n	80048e6 <HAL_TIM_PWM_Start+0x72>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b01      	cmp	r3, #1
 80048dc:	bf14      	ite	ne
 80048de:	2301      	movne	r3, #1
 80048e0:	2300      	moveq	r3, #0
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	e015      	b.n	8004912 <HAL_TIM_PWM_Start+0x9e>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b10      	cmp	r3, #16
 80048ea:	d109      	bne.n	8004900 <HAL_TIM_PWM_Start+0x8c>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	bf14      	ite	ne
 80048f8:	2301      	movne	r3, #1
 80048fa:	2300      	moveq	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	e008      	b.n	8004912 <HAL_TIM_PWM_Start+0x9e>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b01      	cmp	r3, #1
 800490a:	bf14      	ite	ne
 800490c:	2301      	movne	r3, #1
 800490e:	2300      	moveq	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e088      	b.n	8004a2c <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d104      	bne.n	800492a <HAL_TIM_PWM_Start+0xb6>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004928:	e023      	b.n	8004972 <HAL_TIM_PWM_Start+0xfe>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b04      	cmp	r3, #4
 800492e:	d104      	bne.n	800493a <HAL_TIM_PWM_Start+0xc6>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004938:	e01b      	b.n	8004972 <HAL_TIM_PWM_Start+0xfe>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b08      	cmp	r3, #8
 800493e:	d104      	bne.n	800494a <HAL_TIM_PWM_Start+0xd6>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004948:	e013      	b.n	8004972 <HAL_TIM_PWM_Start+0xfe>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b0c      	cmp	r3, #12
 800494e:	d104      	bne.n	800495a <HAL_TIM_PWM_Start+0xe6>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004958:	e00b      	b.n	8004972 <HAL_TIM_PWM_Start+0xfe>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b10      	cmp	r3, #16
 800495e:	d104      	bne.n	800496a <HAL_TIM_PWM_Start+0xf6>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004968:	e003      	b.n	8004972 <HAL_TIM_PWM_Start+0xfe>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2202      	movs	r2, #2
 800496e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2201      	movs	r2, #1
 8004978:	6839      	ldr	r1, [r7, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f000 ff14 	bl	80057a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a2b      	ldr	r2, [pc, #172]	; (8004a34 <HAL_TIM_PWM_Start+0x1c0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d00e      	beq.n	80049a8 <HAL_TIM_PWM_Start+0x134>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a2a      	ldr	r2, [pc, #168]	; (8004a38 <HAL_TIM_PWM_Start+0x1c4>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d009      	beq.n	80049a8 <HAL_TIM_PWM_Start+0x134>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a28      	ldr	r2, [pc, #160]	; (8004a3c <HAL_TIM_PWM_Start+0x1c8>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d004      	beq.n	80049a8 <HAL_TIM_PWM_Start+0x134>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a27      	ldr	r2, [pc, #156]	; (8004a40 <HAL_TIM_PWM_Start+0x1cc>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d101      	bne.n	80049ac <HAL_TIM_PWM_Start+0x138>
 80049a8:	2301      	movs	r3, #1
 80049aa:	e000      	b.n	80049ae <HAL_TIM_PWM_Start+0x13a>
 80049ac:	2300      	movs	r3, #0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d007      	beq.n	80049c2 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a1b      	ldr	r2, [pc, #108]	; (8004a34 <HAL_TIM_PWM_Start+0x1c0>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d00e      	beq.n	80049ea <HAL_TIM_PWM_Start+0x176>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d4:	d009      	beq.n	80049ea <HAL_TIM_PWM_Start+0x176>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a1a      	ldr	r2, [pc, #104]	; (8004a44 <HAL_TIM_PWM_Start+0x1d0>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d004      	beq.n	80049ea <HAL_TIM_PWM_Start+0x176>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a14      	ldr	r2, [pc, #80]	; (8004a38 <HAL_TIM_PWM_Start+0x1c4>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d115      	bne.n	8004a16 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	4b15      	ldr	r3, [pc, #84]	; (8004a48 <HAL_TIM_PWM_Start+0x1d4>)
 80049f2:	4013      	ands	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2b06      	cmp	r3, #6
 80049fa:	d015      	beq.n	8004a28 <HAL_TIM_PWM_Start+0x1b4>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a02:	d011      	beq.n	8004a28 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f042 0201 	orr.w	r2, r2, #1
 8004a12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a14:	e008      	b.n	8004a28 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f042 0201 	orr.w	r2, r2, #1
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	e000      	b.n	8004a2a <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40012c00 	.word	0x40012c00
 8004a38:	40014000 	.word	0x40014000
 8004a3c:	40014400 	.word	0x40014400
 8004a40:	40014800 	.word	0x40014800
 8004a44:	40000400 	.word	0x40000400
 8004a48:	00010007 	.word	0x00010007

08004a4c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e097      	b.n	8004b90 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d106      	bne.n	8004a7a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7fd fd9d 	bl	80025b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6812      	ldr	r2, [r2, #0]
 8004a8c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004a90:	f023 0307 	bic.w	r3, r3, #7
 8004a94:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4610      	mov	r0, r2
 8004aa2:	f000 fb63 	bl	800516c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ace:	f023 0303 	bic.w	r3, r3, #3
 8004ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	021b      	lsls	r3, r3, #8
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004aec:	f023 030c 	bic.w	r3, r3, #12
 8004af0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004af8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004afc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68da      	ldr	r2, [r3, #12]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	021b      	lsls	r3, r3, #8
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	011a      	lsls	r2, r3, #4
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	031b      	lsls	r3, r3, #12
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004b2a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004b32:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	011b      	lsls	r3, r3, #4
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ba8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bb0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bb8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bc0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d110      	bne.n	8004bea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004bc8:	7bfb      	ldrb	r3, [r7, #15]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d102      	bne.n	8004bd4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004bce:	7b7b      	ldrb	r3, [r7, #13]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d001      	beq.n	8004bd8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e069      	b.n	8004cac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004be8:	e031      	b.n	8004c4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d110      	bne.n	8004c12 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004bf0:	7bbb      	ldrb	r3, [r7, #14]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d102      	bne.n	8004bfc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004bf6:	7b3b      	ldrb	r3, [r7, #12]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d001      	beq.n	8004c00 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e055      	b.n	8004cac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c10:	e01d      	b.n	8004c4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c12:	7bfb      	ldrb	r3, [r7, #15]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d108      	bne.n	8004c2a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c18:	7bbb      	ldrb	r3, [r7, #14]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d105      	bne.n	8004c2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c1e:	7b7b      	ldrb	r3, [r7, #13]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d102      	bne.n	8004c2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c24:	7b3b      	ldrb	r3, [r7, #12]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d001      	beq.n	8004c2e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e03e      	b.n	8004cac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2202      	movs	r2, #2
 8004c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2202      	movs	r2, #2
 8004c3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2202      	movs	r2, #2
 8004c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2202      	movs	r2, #2
 8004c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d003      	beq.n	8004c5c <HAL_TIM_Encoder_Start+0xc4>
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d008      	beq.n	8004c6c <HAL_TIM_Encoder_Start+0xd4>
 8004c5a:	e00f      	b.n	8004c7c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2201      	movs	r2, #1
 8004c62:	2100      	movs	r1, #0
 8004c64:	4618      	mov	r0, r3
 8004c66:	f000 fd9f 	bl	80057a8 <TIM_CCxChannelCmd>
      break;
 8004c6a:	e016      	b.n	8004c9a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2201      	movs	r2, #1
 8004c72:	2104      	movs	r1, #4
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 fd97 	bl	80057a8 <TIM_CCxChannelCmd>
      break;
 8004c7a:	e00e      	b.n	8004c9a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2201      	movs	r2, #1
 8004c82:	2100      	movs	r1, #0
 8004c84:	4618      	mov	r0, r3
 8004c86:	f000 fd8f 	bl	80057a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	2104      	movs	r1, #4
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 fd88 	bl	80057a8 <TIM_CCxChannelCmd>
      break;
 8004c98:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f042 0201 	orr.w	r2, r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d122      	bne.n	8004d10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d11b      	bne.n	8004d10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f06f 0202 	mvn.w	r2, #2
 8004ce0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fa1a 	bl	8005130 <HAL_TIM_IC_CaptureCallback>
 8004cfc:	e005      	b.n	8004d0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 fa0c 	bl	800511c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 fa1d 	bl	8005144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d122      	bne.n	8004d64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b04      	cmp	r3, #4
 8004d2a:	d11b      	bne.n	8004d64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f06f 0204 	mvn.w	r2, #4
 8004d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2202      	movs	r2, #2
 8004d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f9f0 	bl	8005130 <HAL_TIM_IC_CaptureCallback>
 8004d50:	e005      	b.n	8004d5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f9e2 	bl	800511c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f9f3 	bl	8005144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	f003 0308 	and.w	r3, r3, #8
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	d122      	bne.n	8004db8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f003 0308 	and.w	r3, r3, #8
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d11b      	bne.n	8004db8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f06f 0208 	mvn.w	r2, #8
 8004d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2204      	movs	r2, #4
 8004d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	f003 0303 	and.w	r3, r3, #3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f9c6 	bl	8005130 <HAL_TIM_IC_CaptureCallback>
 8004da4:	e005      	b.n	8004db2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f9b8 	bl	800511c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f9c9 	bl	8005144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f003 0310 	and.w	r3, r3, #16
 8004dc2:	2b10      	cmp	r3, #16
 8004dc4:	d122      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f003 0310 	and.w	r3, r3, #16
 8004dd0:	2b10      	cmp	r3, #16
 8004dd2:	d11b      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f06f 0210 	mvn.w	r2, #16
 8004ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2208      	movs	r2, #8
 8004de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f99c 	bl	8005130 <HAL_TIM_IC_CaptureCallback>
 8004df8:	e005      	b.n	8004e06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f98e 	bl	800511c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f99f 	bl	8005144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d10e      	bne.n	8004e38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d107      	bne.n	8004e38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0201 	mvn.w	r2, #1
 8004e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7fc fe9c 	bl	8001b70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e42:	2b80      	cmp	r3, #128	; 0x80
 8004e44:	d10e      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e50:	2b80      	cmp	r3, #128	; 0x80
 8004e52:	d107      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 fdb8 	bl	80059d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e72:	d10e      	bne.n	8004e92 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7e:	2b80      	cmp	r3, #128	; 0x80
 8004e80:	d107      	bne.n	8004e92 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fdab 	bl	80059e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9c:	2b40      	cmp	r3, #64	; 0x40
 8004e9e:	d10e      	bne.n	8004ebe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eaa:	2b40      	cmp	r3, #64	; 0x40
 8004eac:	d107      	bne.n	8004ebe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f94d 	bl	8005158 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	f003 0320 	and.w	r3, r3, #32
 8004ec8:	2b20      	cmp	r3, #32
 8004eca:	d10e      	bne.n	8004eea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f003 0320 	and.w	r3, r3, #32
 8004ed6:	2b20      	cmp	r3, #32
 8004ed8:	d107      	bne.n	8004eea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f06f 0220 	mvn.w	r2, #32
 8004ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 fd6b 	bl	80059c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eea:	bf00      	nop
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
	...

08004ef4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f00:	2300      	movs	r3, #0
 8004f02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d101      	bne.n	8004f12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f0e:	2302      	movs	r3, #2
 8004f10:	e0ff      	b.n	8005112 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b14      	cmp	r3, #20
 8004f1e:	f200 80f0 	bhi.w	8005102 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f22:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f28:	08004f7d 	.word	0x08004f7d
 8004f2c:	08005103 	.word	0x08005103
 8004f30:	08005103 	.word	0x08005103
 8004f34:	08005103 	.word	0x08005103
 8004f38:	08004fbd 	.word	0x08004fbd
 8004f3c:	08005103 	.word	0x08005103
 8004f40:	08005103 	.word	0x08005103
 8004f44:	08005103 	.word	0x08005103
 8004f48:	08004fff 	.word	0x08004fff
 8004f4c:	08005103 	.word	0x08005103
 8004f50:	08005103 	.word	0x08005103
 8004f54:	08005103 	.word	0x08005103
 8004f58:	0800503f 	.word	0x0800503f
 8004f5c:	08005103 	.word	0x08005103
 8004f60:	08005103 	.word	0x08005103
 8004f64:	08005103 	.word	0x08005103
 8004f68:	08005081 	.word	0x08005081
 8004f6c:	08005103 	.word	0x08005103
 8004f70:	08005103 	.word	0x08005103
 8004f74:	08005103 	.word	0x08005103
 8004f78:	080050c1 	.word	0x080050c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68b9      	ldr	r1, [r7, #8]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 f96a 	bl	800525c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699a      	ldr	r2, [r3, #24]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 0208 	orr.w	r2, r2, #8
 8004f96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	699a      	ldr	r2, [r3, #24]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0204 	bic.w	r2, r2, #4
 8004fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6999      	ldr	r1, [r3, #24]
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	691a      	ldr	r2, [r3, #16]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	619a      	str	r2, [r3, #24]
      break;
 8004fba:	e0a5      	b.n	8005108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68b9      	ldr	r1, [r7, #8]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 f9d0 	bl	8005368 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699a      	ldr	r2, [r3, #24]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	699a      	ldr	r2, [r3, #24]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6999      	ldr	r1, [r3, #24]
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	021a      	lsls	r2, r3, #8
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	619a      	str	r2, [r3, #24]
      break;
 8004ffc:	e084      	b.n	8005108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	4618      	mov	r0, r3
 8005006:	f000 fa2f 	bl	8005468 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69da      	ldr	r2, [r3, #28]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f042 0208 	orr.w	r2, r2, #8
 8005018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69da      	ldr	r2, [r3, #28]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 0204 	bic.w	r2, r2, #4
 8005028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	69d9      	ldr	r1, [r3, #28]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	691a      	ldr	r2, [r3, #16]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	61da      	str	r2, [r3, #28]
      break;
 800503c:	e064      	b.n	8005108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68b9      	ldr	r1, [r7, #8]
 8005044:	4618      	mov	r0, r3
 8005046:	f000 fa8d 	bl	8005564 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69da      	ldr	r2, [r3, #28]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005058:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	69da      	ldr	r2, [r3, #28]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	69d9      	ldr	r1, [r3, #28]
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	021a      	lsls	r2, r3, #8
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	61da      	str	r2, [r3, #28]
      break;
 800507e:	e043      	b.n	8005108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68b9      	ldr	r1, [r7, #8]
 8005086:	4618      	mov	r0, r3
 8005088:	f000 fad0 	bl	800562c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0208 	orr.w	r2, r2, #8
 800509a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0204 	bic.w	r2, r2, #4
 80050aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	691a      	ldr	r2, [r3, #16]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050be:	e023      	b.n	8005108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68b9      	ldr	r1, [r7, #8]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 fb0e 	bl	80056e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	021a      	lsls	r2, r3, #8
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005100:	e002      	b.n	8005108 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	75fb      	strb	r3, [r7, #23]
      break;
 8005106:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005110:	7dfb      	ldrb	r3, [r7, #23]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3718      	adds	r7, #24
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop

0800511c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a32      	ldr	r2, [pc, #200]	; (8005248 <TIM_Base_SetConfig+0xdc>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d007      	beq.n	8005194 <TIM_Base_SetConfig+0x28>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800518a:	d003      	beq.n	8005194 <TIM_Base_SetConfig+0x28>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a2f      	ldr	r2, [pc, #188]	; (800524c <TIM_Base_SetConfig+0xe0>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d108      	bne.n	80051a6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a27      	ldr	r2, [pc, #156]	; (8005248 <TIM_Base_SetConfig+0xdc>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d013      	beq.n	80051d6 <TIM_Base_SetConfig+0x6a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b4:	d00f      	beq.n	80051d6 <TIM_Base_SetConfig+0x6a>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a24      	ldr	r2, [pc, #144]	; (800524c <TIM_Base_SetConfig+0xe0>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d00b      	beq.n	80051d6 <TIM_Base_SetConfig+0x6a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a23      	ldr	r2, [pc, #140]	; (8005250 <TIM_Base_SetConfig+0xe4>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d007      	beq.n	80051d6 <TIM_Base_SetConfig+0x6a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a22      	ldr	r2, [pc, #136]	; (8005254 <TIM_Base_SetConfig+0xe8>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d003      	beq.n	80051d6 <TIM_Base_SetConfig+0x6a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a21      	ldr	r2, [pc, #132]	; (8005258 <TIM_Base_SetConfig+0xec>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d108      	bne.n	80051e8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a0e      	ldr	r2, [pc, #56]	; (8005248 <TIM_Base_SetConfig+0xdc>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d00b      	beq.n	800522c <TIM_Base_SetConfig+0xc0>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a0e      	ldr	r2, [pc, #56]	; (8005250 <TIM_Base_SetConfig+0xe4>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d007      	beq.n	800522c <TIM_Base_SetConfig+0xc0>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a0d      	ldr	r2, [pc, #52]	; (8005254 <TIM_Base_SetConfig+0xe8>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d003      	beq.n	800522c <TIM_Base_SetConfig+0xc0>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a0c      	ldr	r2, [pc, #48]	; (8005258 <TIM_Base_SetConfig+0xec>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d103      	bne.n	8005234 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	691a      	ldr	r2, [r3, #16]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	615a      	str	r2, [r3, #20]
}
 800523a:	bf00      	nop
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40012c00 	.word	0x40012c00
 800524c:	40000400 	.word	0x40000400
 8005250:	40014000 	.word	0x40014000
 8005254:	40014400 	.word	0x40014400
 8005258:	40014800 	.word	0x40014800

0800525c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800525c:	b480      	push	{r7}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	f023 0201 	bic.w	r2, r3, #1
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800528a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 0303 	bic.w	r3, r3, #3
 8005296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f023 0302 	bic.w	r3, r3, #2
 80052a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a28      	ldr	r2, [pc, #160]	; (8005358 <TIM_OC1_SetConfig+0xfc>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d00b      	beq.n	80052d4 <TIM_OC1_SetConfig+0x78>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a27      	ldr	r2, [pc, #156]	; (800535c <TIM_OC1_SetConfig+0x100>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d007      	beq.n	80052d4 <TIM_OC1_SetConfig+0x78>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a26      	ldr	r2, [pc, #152]	; (8005360 <TIM_OC1_SetConfig+0x104>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d003      	beq.n	80052d4 <TIM_OC1_SetConfig+0x78>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a25      	ldr	r2, [pc, #148]	; (8005364 <TIM_OC1_SetConfig+0x108>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d10c      	bne.n	80052ee <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f023 0308 	bic.w	r3, r3, #8
 80052da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f023 0304 	bic.w	r3, r3, #4
 80052ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a19      	ldr	r2, [pc, #100]	; (8005358 <TIM_OC1_SetConfig+0xfc>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d00b      	beq.n	800530e <TIM_OC1_SetConfig+0xb2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a18      	ldr	r2, [pc, #96]	; (800535c <TIM_OC1_SetConfig+0x100>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d007      	beq.n	800530e <TIM_OC1_SetConfig+0xb2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a17      	ldr	r2, [pc, #92]	; (8005360 <TIM_OC1_SetConfig+0x104>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d003      	beq.n	800530e <TIM_OC1_SetConfig+0xb2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a16      	ldr	r2, [pc, #88]	; (8005364 <TIM_OC1_SetConfig+0x108>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d111      	bne.n	8005332 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800531c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	4313      	orrs	r3, r2
 8005326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	4313      	orrs	r3, r2
 8005330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	621a      	str	r2, [r3, #32]
}
 800534c:	bf00      	nop
 800534e:	371c      	adds	r7, #28
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	40012c00 	.word	0x40012c00
 800535c:	40014000 	.word	0x40014000
 8005360:	40014400 	.word	0x40014400
 8005364:	40014800 	.word	0x40014800

08005368 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	f023 0210 	bic.w	r2, r3, #16
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800539a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	021b      	lsls	r3, r3, #8
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f023 0320 	bic.w	r3, r3, #32
 80053b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	011b      	lsls	r3, r3, #4
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a24      	ldr	r2, [pc, #144]	; (8005458 <TIM_OC2_SetConfig+0xf0>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d10d      	bne.n	80053e8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	011b      	lsls	r3, r3, #4
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	4313      	orrs	r3, r2
 80053de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a1b      	ldr	r2, [pc, #108]	; (8005458 <TIM_OC2_SetConfig+0xf0>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d00b      	beq.n	8005408 <TIM_OC2_SetConfig+0xa0>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a1a      	ldr	r2, [pc, #104]	; (800545c <TIM_OC2_SetConfig+0xf4>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d007      	beq.n	8005408 <TIM_OC2_SetConfig+0xa0>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a19      	ldr	r2, [pc, #100]	; (8005460 <TIM_OC2_SetConfig+0xf8>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d003      	beq.n	8005408 <TIM_OC2_SetConfig+0xa0>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a18      	ldr	r2, [pc, #96]	; (8005464 <TIM_OC2_SetConfig+0xfc>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d113      	bne.n	8005430 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800540e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005416:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	4313      	orrs	r3, r2
 8005422:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	4313      	orrs	r3, r2
 800542e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	621a      	str	r2, [r3, #32]
}
 800544a:	bf00      	nop
 800544c:	371c      	adds	r7, #28
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	40012c00 	.word	0x40012c00
 800545c:	40014000 	.word	0x40014000
 8005460:	40014400 	.word	0x40014400
 8005464:	40014800 	.word	0x40014800

08005468 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 0303 	bic.w	r3, r3, #3
 80054a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	021b      	lsls	r3, r3, #8
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	4313      	orrs	r3, r2
 80054c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a23      	ldr	r2, [pc, #140]	; (8005554 <TIM_OC3_SetConfig+0xec>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d10d      	bne.n	80054e6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	021b      	lsls	r3, r3, #8
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	4313      	orrs	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054e4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a1a      	ldr	r2, [pc, #104]	; (8005554 <TIM_OC3_SetConfig+0xec>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d00b      	beq.n	8005506 <TIM_OC3_SetConfig+0x9e>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a19      	ldr	r2, [pc, #100]	; (8005558 <TIM_OC3_SetConfig+0xf0>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d007      	beq.n	8005506 <TIM_OC3_SetConfig+0x9e>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a18      	ldr	r2, [pc, #96]	; (800555c <TIM_OC3_SetConfig+0xf4>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d003      	beq.n	8005506 <TIM_OC3_SetConfig+0x9e>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a17      	ldr	r2, [pc, #92]	; (8005560 <TIM_OC3_SetConfig+0xf8>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d113      	bne.n	800552e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800550c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005514:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	011b      	lsls	r3, r3, #4
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	4313      	orrs	r3, r2
 8005520:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	011b      	lsls	r3, r3, #4
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	4313      	orrs	r3, r2
 800552c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	621a      	str	r2, [r3, #32]
}
 8005548:	bf00      	nop
 800554a:	371c      	adds	r7, #28
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	40012c00 	.word	0x40012c00
 8005558:	40014000 	.word	0x40014000
 800555c:	40014400 	.word	0x40014400
 8005560:	40014800 	.word	0x40014800

08005564 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005564:	b480      	push	{r7}
 8005566:	b087      	sub	sp, #28
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800559e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	021b      	lsls	r3, r3, #8
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	031b      	lsls	r3, r3, #12
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	4313      	orrs	r3, r2
 80055be:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a16      	ldr	r2, [pc, #88]	; (800561c <TIM_OC4_SetConfig+0xb8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d00b      	beq.n	80055e0 <TIM_OC4_SetConfig+0x7c>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a15      	ldr	r2, [pc, #84]	; (8005620 <TIM_OC4_SetConfig+0xbc>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d007      	beq.n	80055e0 <TIM_OC4_SetConfig+0x7c>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a14      	ldr	r2, [pc, #80]	; (8005624 <TIM_OC4_SetConfig+0xc0>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d003      	beq.n	80055e0 <TIM_OC4_SetConfig+0x7c>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a13      	ldr	r2, [pc, #76]	; (8005628 <TIM_OC4_SetConfig+0xc4>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d109      	bne.n	80055f4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	695b      	ldr	r3, [r3, #20]
 80055ec:	019b      	lsls	r3, r3, #6
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	621a      	str	r2, [r3, #32]
}
 800560e:	bf00      	nop
 8005610:	371c      	adds	r7, #28
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	40012c00 	.word	0x40012c00
 8005620:	40014000 	.word	0x40014000
 8005624:	40014400 	.word	0x40014400
 8005628:	40014800 	.word	0x40014800

0800562c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800562c:	b480      	push	{r7}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800565a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005670:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	041b      	lsls	r3, r3, #16
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	4313      	orrs	r3, r2
 800567c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a15      	ldr	r2, [pc, #84]	; (80056d8 <TIM_OC5_SetConfig+0xac>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d00b      	beq.n	800569e <TIM_OC5_SetConfig+0x72>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a14      	ldr	r2, [pc, #80]	; (80056dc <TIM_OC5_SetConfig+0xb0>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d007      	beq.n	800569e <TIM_OC5_SetConfig+0x72>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a13      	ldr	r2, [pc, #76]	; (80056e0 <TIM_OC5_SetConfig+0xb4>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d003      	beq.n	800569e <TIM_OC5_SetConfig+0x72>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a12      	ldr	r2, [pc, #72]	; (80056e4 <TIM_OC5_SetConfig+0xb8>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d109      	bne.n	80056b2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	021b      	lsls	r3, r3, #8
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	621a      	str	r2, [r3, #32]
}
 80056cc:	bf00      	nop
 80056ce:	371c      	adds	r7, #28
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	40012c00 	.word	0x40012c00
 80056dc:	40014000 	.word	0x40014000
 80056e0:	40014400 	.word	0x40014400
 80056e4:	40014800 	.word	0x40014800

080056e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b087      	sub	sp, #28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800571a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	021b      	lsls	r3, r3, #8
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	4313      	orrs	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800572e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	051b      	lsls	r3, r3, #20
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	4313      	orrs	r3, r2
 800573a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a16      	ldr	r2, [pc, #88]	; (8005798 <TIM_OC6_SetConfig+0xb0>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d00b      	beq.n	800575c <TIM_OC6_SetConfig+0x74>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a15      	ldr	r2, [pc, #84]	; (800579c <TIM_OC6_SetConfig+0xb4>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d007      	beq.n	800575c <TIM_OC6_SetConfig+0x74>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a14      	ldr	r2, [pc, #80]	; (80057a0 <TIM_OC6_SetConfig+0xb8>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d003      	beq.n	800575c <TIM_OC6_SetConfig+0x74>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a13      	ldr	r2, [pc, #76]	; (80057a4 <TIM_OC6_SetConfig+0xbc>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d109      	bne.n	8005770 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005762:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	029b      	lsls	r3, r3, #10
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	4313      	orrs	r3, r2
 800576e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	621a      	str	r2, [r3, #32]
}
 800578a:	bf00      	nop
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	40012c00 	.word	0x40012c00
 800579c:	40014000 	.word	0x40014000
 80057a0:	40014400 	.word	0x40014400
 80057a4:	40014800 	.word	0x40014800

080057a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	f003 031f 	and.w	r3, r3, #31
 80057ba:	2201      	movs	r2, #1
 80057bc:	fa02 f303 	lsl.w	r3, r2, r3
 80057c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6a1a      	ldr	r2, [r3, #32]
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	43db      	mvns	r3, r3
 80057ca:	401a      	ands	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6a1a      	ldr	r2, [r3, #32]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f003 031f 	and.w	r3, r3, #31
 80057da:	6879      	ldr	r1, [r7, #4]
 80057dc:	fa01 f303 	lsl.w	r3, r1, r3
 80057e0:	431a      	orrs	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	621a      	str	r2, [r3, #32]
}
 80057e6:	bf00      	nop
 80057e8:	371c      	adds	r7, #28
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
	...

080057f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005804:	2b01      	cmp	r3, #1
 8005806:	d101      	bne.n	800580c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005808:	2302      	movs	r3, #2
 800580a:	e054      	b.n	80058b6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2202      	movs	r2, #2
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a24      	ldr	r2, [pc, #144]	; (80058c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d108      	bne.n	8005848 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800583c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	4313      	orrs	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a17      	ldr	r2, [pc, #92]	; (80058c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00e      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005874:	d009      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a13      	ldr	r2, [pc, #76]	; (80058c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d004      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a11      	ldr	r2, [pc, #68]	; (80058cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d10c      	bne.n	80058a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005890:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	4313      	orrs	r3, r2
 800589a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	40012c00 	.word	0x40012c00
 80058c8:	40000400 	.word	0x40000400
 80058cc:	40014000 	.word	0x40014000

080058d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e060      	b.n	80059ae <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	4313      	orrs	r3, r2
 800590e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	4313      	orrs	r3, r2
 800591c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4313      	orrs	r3, r2
 800592a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	4313      	orrs	r3, r2
 8005938:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	4313      	orrs	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005952:	4313      	orrs	r3, r2
 8005954:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	041b      	lsls	r3, r3, #16
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a14      	ldr	r2, [pc, #80]	; (80059bc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d115      	bne.n	800599c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	051b      	lsls	r3, r3, #20
 800597c:	4313      	orrs	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	4313      	orrs	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	4313      	orrs	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	40012c00 	.word	0x40012c00

080059c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e040      	b.n	8005a90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d106      	bne.n	8005a24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7fc ff60 	bl	80028e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2224      	movs	r2, #36	; 0x24
 8005a28:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0201 	bic.w	r2, r2, #1
 8005a38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fcde 	bl	80063fc <UART_SetConfig>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d101      	bne.n	8005a4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e022      	b.n	8005a90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d002      	beq.n	8005a58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fe08 	bl	8006668 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689a      	ldr	r2, [r3, #8]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0201 	orr.w	r2, r2, #1
 8005a86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fe8f 	bl	80067ac <UART_CheckIdleState>
 8005a8e:	4603      	mov	r3, r0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b08a      	sub	sp, #40	; 0x28
 8005a9c:	af02      	add	r7, sp, #8
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	603b      	str	r3, [r7, #0]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aac:	2b20      	cmp	r3, #32
 8005aae:	f040 8082 	bne.w	8005bb6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <HAL_UART_Transmit+0x26>
 8005ab8:	88fb      	ldrh	r3, [r7, #6]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e07a      	b.n	8005bb8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d101      	bne.n	8005ad0 <HAL_UART_Transmit+0x38>
 8005acc:	2302      	movs	r3, #2
 8005ace:	e073      	b.n	8005bb8 <HAL_UART_Transmit+0x120>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2221      	movs	r2, #33	; 0x21
 8005ae4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ae6:	f7fd f805 	bl	8002af4 <HAL_GetTick>
 8005aea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	88fa      	ldrh	r2, [r7, #6]
 8005af0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	88fa      	ldrh	r2, [r7, #6]
 8005af8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b04:	d108      	bne.n	8005b18 <HAL_UART_Transmit+0x80>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d104      	bne.n	8005b18 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	61bb      	str	r3, [r7, #24]
 8005b16:	e003      	b.n	8005b20 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005b28:	e02d      	b.n	8005b86 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2200      	movs	r2, #0
 8005b32:	2180      	movs	r1, #128	; 0x80
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 fe82 	bl	800683e <UART_WaitOnFlagUntilTimeout>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e039      	b.n	8005bb8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10b      	bne.n	8005b62 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	881a      	ldrh	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b56:	b292      	uxth	r2, r2
 8005b58:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	3302      	adds	r3, #2
 8005b5e:	61bb      	str	r3, [r7, #24]
 8005b60:	e008      	b.n	8005b74 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	781a      	ldrb	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	b292      	uxth	r2, r2
 8005b6c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	3301      	adds	r3, #1
 8005b72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1cb      	bne.n	8005b2a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	2140      	movs	r1, #64	; 0x40
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 fe4e 	bl	800683e <UART_WaitOnFlagUntilTimeout>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e005      	b.n	8005bb8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	e000      	b.n	8005bb8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005bb6:	2302      	movs	r3, #2
  }
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3720      	adds	r7, #32
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08a      	sub	sp, #40	; 0x28
 8005bc4:	af02      	add	r7, sp, #8
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	603b      	str	r3, [r7, #0]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	f040 80bf 	bne.w	8005d58 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d002      	beq.n	8005be6 <HAL_UART_Receive+0x26>
 8005be0:	88fb      	ldrh	r3, [r7, #6]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e0b7      	b.n	8005d5a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_UART_Receive+0x38>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e0b0      	b.n	8005d5a <HAL_UART_Receive+0x19a>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2222      	movs	r2, #34	; 0x22
 8005c0c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c14:	f7fc ff6e 	bl	8002af4 <HAL_GetTick>
 8005c18:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	88fa      	ldrh	r2, [r7, #6]
 8005c1e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	88fa      	ldrh	r2, [r7, #6]
 8005c26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c32:	d10e      	bne.n	8005c52 <HAL_UART_Receive+0x92>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d105      	bne.n	8005c48 <HAL_UART_Receive+0x88>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005c42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c46:	e02d      	b.n	8005ca4 <HAL_UART_Receive+0xe4>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	22ff      	movs	r2, #255	; 0xff
 8005c4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c50:	e028      	b.n	8005ca4 <HAL_UART_Receive+0xe4>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10d      	bne.n	8005c76 <HAL_UART_Receive+0xb6>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d104      	bne.n	8005c6c <HAL_UART_Receive+0xac>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	22ff      	movs	r2, #255	; 0xff
 8005c66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c6a:	e01b      	b.n	8005ca4 <HAL_UART_Receive+0xe4>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	227f      	movs	r2, #127	; 0x7f
 8005c70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c74:	e016      	b.n	8005ca4 <HAL_UART_Receive+0xe4>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c7e:	d10d      	bne.n	8005c9c <HAL_UART_Receive+0xdc>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d104      	bne.n	8005c92 <HAL_UART_Receive+0xd2>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	227f      	movs	r2, #127	; 0x7f
 8005c8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c90:	e008      	b.n	8005ca4 <HAL_UART_Receive+0xe4>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	223f      	movs	r2, #63	; 0x3f
 8005c96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c9a:	e003      	b.n	8005ca4 <HAL_UART_Receive+0xe4>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005caa:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb4:	d108      	bne.n	8005cc8 <HAL_UART_Receive+0x108>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d104      	bne.n	8005cc8 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	61bb      	str	r3, [r7, #24]
 8005cc6:	e003      	b.n	8005cd0 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005cd8:	e033      	b.n	8005d42 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	2120      	movs	r1, #32
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 fdaa 	bl	800683e <UART_WaitOnFlagUntilTimeout>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e032      	b.n	8005d5a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10c      	bne.n	8005d14 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	8a7b      	ldrh	r3, [r7, #18]
 8005d04:	4013      	ands	r3, r2
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	3302      	adds	r3, #2
 8005d10:	61bb      	str	r3, [r7, #24]
 8005d12:	e00d      	b.n	8005d30 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	8a7b      	ldrh	r3, [r7, #18]
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	4013      	ands	r3, r2
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1c5      	bne.n	8005cda <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2220      	movs	r2, #32
 8005d52:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	e000      	b.n	8005d5a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005d58:	2302      	movs	r3, #2
  }
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3720      	adds	r7, #32
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b08a      	sub	sp, #40	; 0x28
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	60f8      	str	r0, [r7, #12]
 8005d6a:	60b9      	str	r1, [r7, #8]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d74:	2b20      	cmp	r3, #32
 8005d76:	d13d      	bne.n	8005df4 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d002      	beq.n	8005d84 <HAL_UART_Receive_IT+0x22>
 8005d7e:	88fb      	ldrh	r3, [r7, #6]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d101      	bne.n	8005d88 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e036      	b.n	8005df6 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d101      	bne.n	8005d96 <HAL_UART_Receive_IT+0x34>
 8005d92:	2302      	movs	r3, #2
 8005d94:	e02f      	b.n	8005df6 <HAL_UART_Receive_IT+0x94>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d018      	beq.n	8005de4 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	e853 3f00 	ldrex	r3, [r3]
 8005dbe:	613b      	str	r3, [r7, #16]
   return(result);
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	461a      	mov	r2, r3
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	623b      	str	r3, [r7, #32]
 8005dd2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd4:	69f9      	ldr	r1, [r7, #28]
 8005dd6:	6a3a      	ldr	r2, [r7, #32]
 8005dd8:	e841 2300 	strex	r3, r2, [r1]
 8005ddc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1e6      	bne.n	8005db2 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005de4:	88fb      	ldrh	r3, [r7, #6]
 8005de6:	461a      	mov	r2, r3
 8005de8:	68b9      	ldr	r1, [r7, #8]
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 fdec 	bl	80069c8 <UART_Start_Receive_IT>
 8005df0:	4603      	mov	r3, r0
 8005df2:	e000      	b.n	8005df6 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005df4:	2302      	movs	r3, #2
  }
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3728      	adds	r7, #40	; 0x28
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
	...

08005e00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b0ba      	sub	sp, #232	; 0xe8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005e2a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e2e:	4013      	ands	r3, r2
 8005e30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005e34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d115      	bne.n	8005e68 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e40:	f003 0320 	and.w	r3, r3, #32
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00f      	beq.n	8005e68 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e4c:	f003 0320 	and.w	r3, r3, #32
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d009      	beq.n	8005e68 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f000 82a3 	beq.w	80063a4 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	4798      	blx	r3
      }
      return;
 8005e66:	e29d      	b.n	80063a4 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 8117 	beq.w	80060a0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d106      	bne.n	8005e8c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005e7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005e82:	4b85      	ldr	r3, [pc, #532]	; (8006098 <HAL_UART_IRQHandler+0x298>)
 8005e84:	4013      	ands	r3, r2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f000 810a 	beq.w	80060a0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d011      	beq.n	8005ebc <HAL_UART_IRQHandler+0xbc>
 8005e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00b      	beq.n	8005ebc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eb2:	f043 0201 	orr.w	r2, r3, #1
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d011      	beq.n	8005eec <HAL_UART_IRQHandler+0xec>
 8005ec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00b      	beq.n	8005eec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2202      	movs	r2, #2
 8005eda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ee2:	f043 0204 	orr.w	r2, r3, #4
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef0:	f003 0304 	and.w	r3, r3, #4
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d011      	beq.n	8005f1c <HAL_UART_IRQHandler+0x11c>
 8005ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00b      	beq.n	8005f1c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2204      	movs	r2, #4
 8005f0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f12:	f043 0202 	orr.w	r2, r3, #2
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f20:	f003 0308 	and.w	r3, r3, #8
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d017      	beq.n	8005f58 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f2c:	f003 0320 	and.w	r3, r3, #32
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d105      	bne.n	8005f40 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f38:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00b      	beq.n	8005f58 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2208      	movs	r2, #8
 8005f46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f4e:	f043 0208 	orr.w	r2, r3, #8
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d012      	beq.n	8005f8a <HAL_UART_IRQHandler+0x18a>
 8005f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00c      	beq.n	8005f8a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f80:	f043 0220 	orr.w	r2, r3, #32
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 8209 	beq.w	80063a8 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00d      	beq.n	8005fbe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fa6:	f003 0320 	and.w	r3, r3, #32
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d007      	beq.n	8005fbe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd2:	2b40      	cmp	r3, #64	; 0x40
 8005fd4:	d005      	beq.n	8005fe2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005fd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d04f      	beq.n	8006082 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 fd9c 	bl	8006b20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff2:	2b40      	cmp	r3, #64	; 0x40
 8005ff4:	d141      	bne.n	800607a <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3308      	adds	r3, #8
 8005ffc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006000:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800600c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006014:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3308      	adds	r3, #8
 800601e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006022:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006026:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800602e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006032:	e841 2300 	strex	r3, r2, [r1]
 8006036:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800603a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1d9      	bne.n	8005ff6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006046:	2b00      	cmp	r3, #0
 8006048:	d013      	beq.n	8006072 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604e:	4a13      	ldr	r2, [pc, #76]	; (800609c <HAL_UART_IRQHandler+0x29c>)
 8006050:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006056:	4618      	mov	r0, r3
 8006058:	f7fc fea2 	bl	8002da0 <HAL_DMA_Abort_IT>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d017      	beq.n	8006092 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800606c:	4610      	mov	r0, r2
 800606e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006070:	e00f      	b.n	8006092 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f9ac 	bl	80063d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006078:	e00b      	b.n	8006092 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f9a8 	bl	80063d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006080:	e007      	b.n	8006092 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f9a4 	bl	80063d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006090:	e18a      	b.n	80063a8 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006092:	bf00      	nop
    return;
 8006094:	e188      	b.n	80063a8 <HAL_UART_IRQHandler+0x5a8>
 8006096:	bf00      	nop
 8006098:	04000120 	.word	0x04000120
 800609c:	08006be7 	.word	0x08006be7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	f040 8143 	bne.w	8006330 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80060aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ae:	f003 0310 	and.w	r3, r3, #16
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f000 813c 	beq.w	8006330 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80060b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060bc:	f003 0310 	and.w	r3, r3, #16
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 8135 	beq.w	8006330 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2210      	movs	r2, #16
 80060cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d8:	2b40      	cmp	r3, #64	; 0x40
 80060da:	f040 80b1 	bne.w	8006240 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060ea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f000 815c 	beq.w	80063ac <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80060fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060fe:	429a      	cmp	r2, r3
 8006100:	f080 8154 	bcs.w	80063ac <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800610a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	2b20      	cmp	r3, #32
 8006116:	f000 8085 	beq.w	8006224 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006122:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006126:	e853 3f00 	ldrex	r3, [r3]
 800612a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800612e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006132:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006136:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	461a      	mov	r2, r3
 8006140:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006144:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006148:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006150:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006154:	e841 2300 	strex	r3, r2, [r1]
 8006158:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800615c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1da      	bne.n	800611a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	3308      	adds	r3, #8
 800616a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800616e:	e853 3f00 	ldrex	r3, [r3]
 8006172:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006174:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006176:	f023 0301 	bic.w	r3, r3, #1
 800617a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3308      	adds	r3, #8
 8006184:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006188:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800618c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006190:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006194:	e841 2300 	strex	r3, r2, [r1]
 8006198:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800619a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1e1      	bne.n	8006164 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3308      	adds	r3, #8
 80061a6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061aa:	e853 3f00 	ldrex	r3, [r3]
 80061ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3308      	adds	r3, #8
 80061c0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80061c4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80061ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80061cc:	e841 2300 	strex	r3, r2, [r1]
 80061d0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80061d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1e3      	bne.n	80061a0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2220      	movs	r2, #32
 80061dc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80061f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061f4:	f023 0310 	bic.w	r3, r3, #16
 80061f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	461a      	mov	r2, r3
 8006202:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006206:	65bb      	str	r3, [r7, #88]	; 0x58
 8006208:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800620c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800620e:	e841 2300 	strex	r3, r2, [r1]
 8006212:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1e4      	bne.n	80061e4 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621e:	4618      	mov	r0, r3
 8006220:	f7fc fd85 	bl	8002d2e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006230:	b29b      	uxth	r3, r3
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	b29b      	uxth	r3, r3
 8006236:	4619      	mov	r1, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f8d3 	bl	80063e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800623e:	e0b5      	b.n	80063ac <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800624c:	b29b      	uxth	r3, r3
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800625a:	b29b      	uxth	r3, r3
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 80a7 	beq.w	80063b0 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8006262:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006266:	2b00      	cmp	r3, #0
 8006268:	f000 80a2 	beq.w	80063b0 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006274:	e853 3f00 	ldrex	r3, [r3]
 8006278:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800627a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800627c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006280:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	461a      	mov	r2, r3
 800628a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800628e:	647b      	str	r3, [r7, #68]	; 0x44
 8006290:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006292:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006294:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006296:	e841 2300 	strex	r3, r2, [r1]
 800629a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800629c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1e4      	bne.n	800626c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3308      	adds	r3, #8
 80062a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	e853 3f00 	ldrex	r3, [r3]
 80062b0:	623b      	str	r3, [r7, #32]
   return(result);
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	f023 0301 	bic.w	r3, r3, #1
 80062b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3308      	adds	r3, #8
 80062c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80062c6:	633a      	str	r2, [r7, #48]	; 0x30
 80062c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ce:	e841 2300 	strex	r3, r2, [r1]
 80062d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1e3      	bne.n	80062a2 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2220      	movs	r2, #32
 80062de:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	e853 3f00 	ldrex	r3, [r3]
 80062f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f023 0310 	bic.w	r3, r3, #16
 8006300:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	461a      	mov	r2, r3
 800630a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800630e:	61fb      	str	r3, [r7, #28]
 8006310:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006312:	69b9      	ldr	r1, [r7, #24]
 8006314:	69fa      	ldr	r2, [r7, #28]
 8006316:	e841 2300 	strex	r3, r2, [r1]
 800631a:	617b      	str	r3, [r7, #20]
   return(result);
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1e4      	bne.n	80062ec <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006322:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006326:	4619      	mov	r1, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 f85b 	bl	80063e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800632e:	e03f      	b.n	80063b0 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006334:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00e      	beq.n	800635a <HAL_UART_IRQHandler+0x55a>
 800633c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006340:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d008      	beq.n	800635a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006350:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fde3 	bl	8006f1e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006358:	e02d      	b.n	80063b6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800635a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800635e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00e      	beq.n	8006384 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800636a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800636e:	2b00      	cmp	r3, #0
 8006370:	d008      	beq.n	8006384 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006376:	2b00      	cmp	r3, #0
 8006378:	d01c      	beq.n	80063b4 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	4798      	blx	r3
    }
    return;
 8006382:	e017      	b.n	80063b4 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638c:	2b00      	cmp	r3, #0
 800638e:	d012      	beq.n	80063b6 <HAL_UART_IRQHandler+0x5b6>
 8006390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00c      	beq.n	80063b6 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fc38 	bl	8006c12 <UART_EndTransmit_IT>
    return;
 80063a2:	e008      	b.n	80063b6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80063a4:	bf00      	nop
 80063a6:	e006      	b.n	80063b6 <HAL_UART_IRQHandler+0x5b6>
    return;
 80063a8:	bf00      	nop
 80063aa:	e004      	b.n	80063b6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80063ac:	bf00      	nop
 80063ae:	e002      	b.n	80063b6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80063b0:	bf00      	nop
 80063b2:	e000      	b.n	80063b6 <HAL_UART_IRQHandler+0x5b6>
    return;
 80063b4:	bf00      	nop
  }

}
 80063b6:	37e8      	adds	r7, #232	; 0xe8
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	460b      	mov	r3, r1
 80063ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b088      	sub	sp, #32
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006404:	2300      	movs	r3, #0
 8006406:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	431a      	orrs	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	431a      	orrs	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	69db      	ldr	r3, [r3, #28]
 800641c:	4313      	orrs	r3, r2
 800641e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	4b8a      	ldr	r3, [pc, #552]	; (8006650 <UART_SetConfig+0x254>)
 8006428:	4013      	ands	r3, r2
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	6812      	ldr	r2, [r2, #0]
 800642e:	6979      	ldr	r1, [r7, #20]
 8006430:	430b      	orrs	r3, r1
 8006432:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68da      	ldr	r2, [r3, #12]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	4313      	orrs	r3, r2
 8006458:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	430a      	orrs	r2, r1
 800646c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a78      	ldr	r2, [pc, #480]	; (8006654 <UART_SetConfig+0x258>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d120      	bne.n	80064ba <UART_SetConfig+0xbe>
 8006478:	4b77      	ldr	r3, [pc, #476]	; (8006658 <UART_SetConfig+0x25c>)
 800647a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647c:	f003 0303 	and.w	r3, r3, #3
 8006480:	2b03      	cmp	r3, #3
 8006482:	d817      	bhi.n	80064b4 <UART_SetConfig+0xb8>
 8006484:	a201      	add	r2, pc, #4	; (adr r2, 800648c <UART_SetConfig+0x90>)
 8006486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648a:	bf00      	nop
 800648c:	0800649d 	.word	0x0800649d
 8006490:	080064a9 	.word	0x080064a9
 8006494:	080064af 	.word	0x080064af
 8006498:	080064a3 	.word	0x080064a3
 800649c:	2300      	movs	r3, #0
 800649e:	77fb      	strb	r3, [r7, #31]
 80064a0:	e01d      	b.n	80064de <UART_SetConfig+0xe2>
 80064a2:	2302      	movs	r3, #2
 80064a4:	77fb      	strb	r3, [r7, #31]
 80064a6:	e01a      	b.n	80064de <UART_SetConfig+0xe2>
 80064a8:	2304      	movs	r3, #4
 80064aa:	77fb      	strb	r3, [r7, #31]
 80064ac:	e017      	b.n	80064de <UART_SetConfig+0xe2>
 80064ae:	2308      	movs	r3, #8
 80064b0:	77fb      	strb	r3, [r7, #31]
 80064b2:	e014      	b.n	80064de <UART_SetConfig+0xe2>
 80064b4:	2310      	movs	r3, #16
 80064b6:	77fb      	strb	r3, [r7, #31]
 80064b8:	e011      	b.n	80064de <UART_SetConfig+0xe2>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a67      	ldr	r2, [pc, #412]	; (800665c <UART_SetConfig+0x260>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d102      	bne.n	80064ca <UART_SetConfig+0xce>
 80064c4:	2300      	movs	r3, #0
 80064c6:	77fb      	strb	r3, [r7, #31]
 80064c8:	e009      	b.n	80064de <UART_SetConfig+0xe2>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a64      	ldr	r2, [pc, #400]	; (8006660 <UART_SetConfig+0x264>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d102      	bne.n	80064da <UART_SetConfig+0xde>
 80064d4:	2300      	movs	r3, #0
 80064d6:	77fb      	strb	r3, [r7, #31]
 80064d8:	e001      	b.n	80064de <UART_SetConfig+0xe2>
 80064da:	2310      	movs	r3, #16
 80064dc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064e6:	d15b      	bne.n	80065a0 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80064e8:	7ffb      	ldrb	r3, [r7, #31]
 80064ea:	2b08      	cmp	r3, #8
 80064ec:	d827      	bhi.n	800653e <UART_SetConfig+0x142>
 80064ee:	a201      	add	r2, pc, #4	; (adr r2, 80064f4 <UART_SetConfig+0xf8>)
 80064f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f4:	08006519 	.word	0x08006519
 80064f8:	08006521 	.word	0x08006521
 80064fc:	08006529 	.word	0x08006529
 8006500:	0800653f 	.word	0x0800653f
 8006504:	0800652f 	.word	0x0800652f
 8006508:	0800653f 	.word	0x0800653f
 800650c:	0800653f 	.word	0x0800653f
 8006510:	0800653f 	.word	0x0800653f
 8006514:	08006537 	.word	0x08006537
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006518:	f7fd ff36 	bl	8004388 <HAL_RCC_GetPCLK1Freq>
 800651c:	61b8      	str	r0, [r7, #24]
        break;
 800651e:	e013      	b.n	8006548 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006520:	f7fd ff54 	bl	80043cc <HAL_RCC_GetPCLK2Freq>
 8006524:	61b8      	str	r0, [r7, #24]
        break;
 8006526:	e00f      	b.n	8006548 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006528:	4b4e      	ldr	r3, [pc, #312]	; (8006664 <UART_SetConfig+0x268>)
 800652a:	61bb      	str	r3, [r7, #24]
        break;
 800652c:	e00c      	b.n	8006548 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800652e:	f7fd feb3 	bl	8004298 <HAL_RCC_GetSysClockFreq>
 8006532:	61b8      	str	r0, [r7, #24]
        break;
 8006534:	e008      	b.n	8006548 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800653a:	61bb      	str	r3, [r7, #24]
        break;
 800653c:	e004      	b.n	8006548 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800653e:	2300      	movs	r3, #0
 8006540:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	77bb      	strb	r3, [r7, #30]
        break;
 8006546:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d074      	beq.n	8006638 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	005a      	lsls	r2, r3, #1
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	085b      	lsrs	r3, r3, #1
 8006558:	441a      	add	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006562:	b29b      	uxth	r3, r3
 8006564:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	2b0f      	cmp	r3, #15
 800656a:	d916      	bls.n	800659a <UART_SetConfig+0x19e>
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006572:	d212      	bcs.n	800659a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	b29b      	uxth	r3, r3
 8006578:	f023 030f 	bic.w	r3, r3, #15
 800657c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	085b      	lsrs	r3, r3, #1
 8006582:	b29b      	uxth	r3, r3
 8006584:	f003 0307 	and.w	r3, r3, #7
 8006588:	b29a      	uxth	r2, r3
 800658a:	89fb      	ldrh	r3, [r7, #14]
 800658c:	4313      	orrs	r3, r2
 800658e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	89fa      	ldrh	r2, [r7, #14]
 8006596:	60da      	str	r2, [r3, #12]
 8006598:	e04e      	b.n	8006638 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	77bb      	strb	r3, [r7, #30]
 800659e:	e04b      	b.n	8006638 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065a0:	7ffb      	ldrb	r3, [r7, #31]
 80065a2:	2b08      	cmp	r3, #8
 80065a4:	d827      	bhi.n	80065f6 <UART_SetConfig+0x1fa>
 80065a6:	a201      	add	r2, pc, #4	; (adr r2, 80065ac <UART_SetConfig+0x1b0>)
 80065a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ac:	080065d1 	.word	0x080065d1
 80065b0:	080065d9 	.word	0x080065d9
 80065b4:	080065e1 	.word	0x080065e1
 80065b8:	080065f7 	.word	0x080065f7
 80065bc:	080065e7 	.word	0x080065e7
 80065c0:	080065f7 	.word	0x080065f7
 80065c4:	080065f7 	.word	0x080065f7
 80065c8:	080065f7 	.word	0x080065f7
 80065cc:	080065ef 	.word	0x080065ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065d0:	f7fd feda 	bl	8004388 <HAL_RCC_GetPCLK1Freq>
 80065d4:	61b8      	str	r0, [r7, #24]
        break;
 80065d6:	e013      	b.n	8006600 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065d8:	f7fd fef8 	bl	80043cc <HAL_RCC_GetPCLK2Freq>
 80065dc:	61b8      	str	r0, [r7, #24]
        break;
 80065de:	e00f      	b.n	8006600 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065e0:	4b20      	ldr	r3, [pc, #128]	; (8006664 <UART_SetConfig+0x268>)
 80065e2:	61bb      	str	r3, [r7, #24]
        break;
 80065e4:	e00c      	b.n	8006600 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065e6:	f7fd fe57 	bl	8004298 <HAL_RCC_GetSysClockFreq>
 80065ea:	61b8      	str	r0, [r7, #24]
        break;
 80065ec:	e008      	b.n	8006600 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065f2:	61bb      	str	r3, [r7, #24]
        break;
 80065f4:	e004      	b.n	8006600 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80065f6:	2300      	movs	r3, #0
 80065f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	77bb      	strb	r3, [r7, #30]
        break;
 80065fe:	bf00      	nop
    }

    if (pclk != 0U)
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d018      	beq.n	8006638 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	085a      	lsrs	r2, r3, #1
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	441a      	add	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	fbb2 f3f3 	udiv	r3, r2, r3
 8006618:	b29b      	uxth	r3, r3
 800661a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	2b0f      	cmp	r3, #15
 8006620:	d908      	bls.n	8006634 <UART_SetConfig+0x238>
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006628:	d204      	bcs.n	8006634 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	60da      	str	r2, [r3, #12]
 8006632:	e001      	b.n	8006638 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006644:	7fbb      	ldrb	r3, [r7, #30]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3720      	adds	r7, #32
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	efff69f3 	.word	0xefff69f3
 8006654:	40013800 	.word	0x40013800
 8006658:	40021000 	.word	0x40021000
 800665c:	40004400 	.word	0x40004400
 8006660:	40004800 	.word	0x40004800
 8006664:	007a1200 	.word	0x007a1200

08006668 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00a      	beq.n	8006692 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	430a      	orrs	r2, r1
 8006690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	f003 0302 	and.w	r3, r3, #2
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00a      	beq.n	80066b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	430a      	orrs	r2, r1
 80066b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b8:	f003 0304 	and.w	r3, r3, #4
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00a      	beq.n	80066d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066da:	f003 0308 	and.w	r3, r3, #8
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00a      	beq.n	80066f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fc:	f003 0310 	and.w	r3, r3, #16
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00a      	beq.n	800671a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	430a      	orrs	r2, r1
 8006718:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671e:	f003 0320 	and.w	r3, r3, #32
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00a      	beq.n	800673c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	430a      	orrs	r2, r1
 800673a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006744:	2b00      	cmp	r3, #0
 8006746:	d01a      	beq.n	800677e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	430a      	orrs	r2, r1
 800675c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006762:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006766:	d10a      	bne.n	800677e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00a      	beq.n	80067a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	430a      	orrs	r2, r1
 800679e:	605a      	str	r2, [r3, #4]
  }
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af02      	add	r7, sp, #8
 80067b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067bc:	f7fc f99a 	bl	8002af4 <HAL_GetTick>
 80067c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0308 	and.w	r3, r3, #8
 80067cc:	2b08      	cmp	r3, #8
 80067ce:	d10e      	bne.n	80067ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f82d 	bl	800683e <UART_WaitOnFlagUntilTimeout>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e023      	b.n	8006836 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0304 	and.w	r3, r3, #4
 80067f8:	2b04      	cmp	r3, #4
 80067fa:	d10e      	bne.n	800681a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f817 	bl	800683e <UART_WaitOnFlagUntilTimeout>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d001      	beq.n	800681a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e00d      	b.n	8006836 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2220      	movs	r2, #32
 800681e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2220      	movs	r2, #32
 8006824:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b09c      	sub	sp, #112	; 0x70
 8006842:	af00      	add	r7, sp, #0
 8006844:	60f8      	str	r0, [r7, #12]
 8006846:	60b9      	str	r1, [r7, #8]
 8006848:	603b      	str	r3, [r7, #0]
 800684a:	4613      	mov	r3, r2
 800684c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800684e:	e0a5      	b.n	800699c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006856:	f000 80a1 	beq.w	800699c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800685a:	f7fc f94b 	bl	8002af4 <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006866:	429a      	cmp	r2, r3
 8006868:	d302      	bcc.n	8006870 <UART_WaitOnFlagUntilTimeout+0x32>
 800686a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800686c:	2b00      	cmp	r3, #0
 800686e:	d13e      	bne.n	80068ee <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006878:	e853 3f00 	ldrex	r3, [r3]
 800687c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800687e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006880:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006884:	667b      	str	r3, [r7, #100]	; 0x64
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	461a      	mov	r2, r3
 800688c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800688e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006890:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006892:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006894:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006896:	e841 2300 	strex	r3, r2, [r1]
 800689a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800689c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1e6      	bne.n	8006870 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3308      	adds	r3, #8
 80068a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ac:	e853 3f00 	ldrex	r3, [r3]
 80068b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b4:	f023 0301 	bic.w	r3, r3, #1
 80068b8:	663b      	str	r3, [r7, #96]	; 0x60
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	3308      	adds	r3, #8
 80068c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80068c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80068c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068ca:	e841 2300 	strex	r3, r2, [r1]
 80068ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80068d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1e5      	bne.n	80068a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2220      	movs	r2, #32
 80068da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2220      	movs	r2, #32
 80068e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e067      	b.n	80069be <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0304 	and.w	r3, r3, #4
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d04f      	beq.n	800699c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	69db      	ldr	r3, [r3, #28]
 8006902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006906:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800690a:	d147      	bne.n	800699c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006914:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691e:	e853 3f00 	ldrex	r3, [r3]
 8006922:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006926:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800692a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	461a      	mov	r2, r3
 8006932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006934:	637b      	str	r3, [r7, #52]	; 0x34
 8006936:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006938:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800693a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800693c:	e841 2300 	strex	r3, r2, [r1]
 8006940:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e6      	bne.n	8006916 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3308      	adds	r3, #8
 800694e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	e853 3f00 	ldrex	r3, [r3]
 8006956:	613b      	str	r3, [r7, #16]
   return(result);
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	f023 0301 	bic.w	r3, r3, #1
 800695e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	3308      	adds	r3, #8
 8006966:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006968:	623a      	str	r2, [r7, #32]
 800696a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696c:	69f9      	ldr	r1, [r7, #28]
 800696e:	6a3a      	ldr	r2, [r7, #32]
 8006970:	e841 2300 	strex	r3, r2, [r1]
 8006974:	61bb      	str	r3, [r7, #24]
   return(result);
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1e5      	bne.n	8006948 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2220      	movs	r2, #32
 8006980:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2220      	movs	r2, #32
 8006986:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2220      	movs	r2, #32
 800698c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e010      	b.n	80069be <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	69da      	ldr	r2, [r3, #28]
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	4013      	ands	r3, r2
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	bf0c      	ite	eq
 80069ac:	2301      	moveq	r3, #1
 80069ae:	2300      	movne	r3, #0
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	461a      	mov	r2, r3
 80069b4:	79fb      	ldrb	r3, [r7, #7]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	f43f af4a 	beq.w	8006850 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3770      	adds	r7, #112	; 0x70
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
	...

080069c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b091      	sub	sp, #68	; 0x44
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	4613      	mov	r3, r2
 80069d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	88fa      	ldrh	r2, [r7, #6]
 80069e0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	88fa      	ldrh	r2, [r7, #6]
 80069e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069fa:	d10e      	bne.n	8006a1a <UART_Start_Receive_IT+0x52>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d105      	bne.n	8006a10 <UART_Start_Receive_IT+0x48>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006a0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a0e:	e02d      	b.n	8006a6c <UART_Start_Receive_IT+0xa4>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	22ff      	movs	r2, #255	; 0xff
 8006a14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a18:	e028      	b.n	8006a6c <UART_Start_Receive_IT+0xa4>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10d      	bne.n	8006a3e <UART_Start_Receive_IT+0x76>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d104      	bne.n	8006a34 <UART_Start_Receive_IT+0x6c>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	22ff      	movs	r2, #255	; 0xff
 8006a2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a32:	e01b      	b.n	8006a6c <UART_Start_Receive_IT+0xa4>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	227f      	movs	r2, #127	; 0x7f
 8006a38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a3c:	e016      	b.n	8006a6c <UART_Start_Receive_IT+0xa4>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a46:	d10d      	bne.n	8006a64 <UART_Start_Receive_IT+0x9c>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d104      	bne.n	8006a5a <UART_Start_Receive_IT+0x92>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	227f      	movs	r2, #127	; 0x7f
 8006a54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a58:	e008      	b.n	8006a6c <UART_Start_Receive_IT+0xa4>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	223f      	movs	r2, #63	; 0x3f
 8006a5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a62:	e003      	b.n	8006a6c <UART_Start_Receive_IT+0xa4>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2222      	movs	r2, #34	; 0x22
 8006a78:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3308      	adds	r3, #8
 8006a80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a84:	e853 3f00 	ldrex	r3, [r3]
 8006a88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	f043 0301 	orr.w	r3, r3, #1
 8006a90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3308      	adds	r3, #8
 8006a98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a9a:	637a      	str	r2, [r7, #52]	; 0x34
 8006a9c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006aa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006aa2:	e841 2300 	strex	r3, r2, [r1]
 8006aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1e5      	bne.n	8006a7a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ab6:	d107      	bne.n	8006ac8 <UART_Start_Receive_IT+0x100>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d103      	bne.n	8006ac8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4a15      	ldr	r2, [pc, #84]	; (8006b18 <UART_Start_Receive_IT+0x150>)
 8006ac4:	665a      	str	r2, [r3, #100]	; 0x64
 8006ac6:	e002      	b.n	8006ace <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4a14      	ldr	r2, [pc, #80]	; (8006b1c <UART_Start_Receive_IT+0x154>)
 8006acc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	e853 3f00 	ldrex	r3, [r3]
 8006ae2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006aea:	63bb      	str	r3, [r7, #56]	; 0x38
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	461a      	mov	r2, r3
 8006af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af4:	623b      	str	r3, [r7, #32]
 8006af6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af8:	69f9      	ldr	r1, [r7, #28]
 8006afa:	6a3a      	ldr	r2, [r7, #32]
 8006afc:	e841 2300 	strex	r3, r2, [r1]
 8006b00:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1e6      	bne.n	8006ad6 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3744      	adds	r7, #68	; 0x44
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	08006dc3 	.word	0x08006dc3
 8006b1c:	08006c67 	.word	0x08006c67

08006b20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b095      	sub	sp, #84	; 0x54
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b30:	e853 3f00 	ldrex	r3, [r3]
 8006b34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	461a      	mov	r2, r3
 8006b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b46:	643b      	str	r3, [r7, #64]	; 0x40
 8006b48:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b4e:	e841 2300 	strex	r3, r2, [r1]
 8006b52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1e6      	bne.n	8006b28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3308      	adds	r3, #8
 8006b60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	e853 3f00 	ldrex	r3, [r3]
 8006b68:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	f023 0301 	bic.w	r3, r3, #1
 8006b70:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3308      	adds	r3, #8
 8006b78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b82:	e841 2300 	strex	r3, r2, [r1]
 8006b86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1e5      	bne.n	8006b5a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d118      	bne.n	8006bc8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	e853 3f00 	ldrex	r3, [r3]
 8006ba2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	f023 0310 	bic.w	r3, r3, #16
 8006baa:	647b      	str	r3, [r7, #68]	; 0x44
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bb4:	61bb      	str	r3, [r7, #24]
 8006bb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb8:	6979      	ldr	r1, [r7, #20]
 8006bba:	69ba      	ldr	r2, [r7, #24]
 8006bbc:	e841 2300 	strex	r3, r2, [r1]
 8006bc0:	613b      	str	r3, [r7, #16]
   return(result);
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1e6      	bne.n	8006b96 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006bda:	bf00      	nop
 8006bdc:	3754      	adds	r7, #84	; 0x54
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b084      	sub	sp, #16
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f7ff fbe3 	bl	80063d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c0a:	bf00      	nop
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b088      	sub	sp, #32
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	e853 3f00 	ldrex	r3, [r3]
 8006c26:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c2e:	61fb      	str	r3, [r7, #28]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	461a      	mov	r2, r3
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	61bb      	str	r3, [r7, #24]
 8006c3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3c:	6979      	ldr	r1, [r7, #20]
 8006c3e:	69ba      	ldr	r2, [r7, #24]
 8006c40:	e841 2300 	strex	r3, r2, [r1]
 8006c44:	613b      	str	r3, [r7, #16]
   return(result);
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e6      	bne.n	8006c1a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7ff fbaf 	bl	80063bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c5e:	bf00      	nop
 8006c60:	3720      	adds	r7, #32
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b096      	sub	sp, #88	; 0x58
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c74:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c7c:	2b22      	cmp	r3, #34	; 0x22
 8006c7e:	f040 8094 	bne.w	8006daa <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006c88:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c8c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006c90:	b2d9      	uxtb	r1, r3
 8006c92:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006c96:	b2da      	uxtb	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c9c:	400a      	ands	r2, r1
 8006c9e:	b2d2      	uxtb	r2, r2
 8006ca0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca6:	1c5a      	adds	r2, r3, #1
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d177      	bne.n	8006dba <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd2:	e853 3f00 	ldrex	r3, [r3]
 8006cd6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cde:	653b      	str	r3, [r7, #80]	; 0x50
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ce8:	647b      	str	r3, [r7, #68]	; 0x44
 8006cea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cf0:	e841 2300 	strex	r3, r2, [r1]
 8006cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1e6      	bne.n	8006cca <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	3308      	adds	r3, #8
 8006d02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	e853 3f00 	ldrex	r3, [r3]
 8006d0a:	623b      	str	r3, [r7, #32]
   return(result);
 8006d0c:	6a3b      	ldr	r3, [r7, #32]
 8006d0e:	f023 0301 	bic.w	r3, r3, #1
 8006d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3308      	adds	r3, #8
 8006d1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d1c:	633a      	str	r2, [r7, #48]	; 0x30
 8006d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d24:	e841 2300 	strex	r3, r2, [r1]
 8006d28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1e5      	bne.n	8006cfc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2220      	movs	r2, #32
 8006d34:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d12e      	bne.n	8006da2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	e853 3f00 	ldrex	r3, [r3]
 8006d56:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f023 0310 	bic.w	r3, r3, #16
 8006d5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	461a      	mov	r2, r3
 8006d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d68:	61fb      	str	r3, [r7, #28]
 8006d6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6c:	69b9      	ldr	r1, [r7, #24]
 8006d6e:	69fa      	ldr	r2, [r7, #28]
 8006d70:	e841 2300 	strex	r3, r2, [r1]
 8006d74:	617b      	str	r3, [r7, #20]
   return(result);
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1e6      	bne.n	8006d4a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	f003 0310 	and.w	r3, r3, #16
 8006d86:	2b10      	cmp	r3, #16
 8006d88:	d103      	bne.n	8006d92 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2210      	movs	r2, #16
 8006d90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d98:	4619      	mov	r1, r3
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7ff fb22 	bl	80063e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006da0:	e00b      	b.n	8006dba <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7fa fed9 	bl	8001b5a <HAL_UART_RxCpltCallback>
}
 8006da8:	e007      	b.n	8006dba <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	699a      	ldr	r2, [r3, #24]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f042 0208 	orr.w	r2, r2, #8
 8006db8:	619a      	str	r2, [r3, #24]
}
 8006dba:	bf00      	nop
 8006dbc:	3758      	adds	r7, #88	; 0x58
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b096      	sub	sp, #88	; 0x58
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006dd0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dd8:	2b22      	cmp	r3, #34	; 0x22
 8006dda:	f040 8094 	bne.w	8006f06 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006de4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dec:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006dee:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006df2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006df6:	4013      	ands	r3, r2
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dfc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e02:	1c9a      	adds	r2, r3, #2
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	3b01      	subs	r3, #1
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d177      	bne.n	8006f16 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e2e:	e853 3f00 	ldrex	r3, [r3]
 8006e32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	461a      	mov	r2, r3
 8006e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e44:	643b      	str	r3, [r7, #64]	; 0x40
 8006e46:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e4c:	e841 2300 	strex	r3, r2, [r1]
 8006e50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1e6      	bne.n	8006e26 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	3308      	adds	r3, #8
 8006e5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e60:	6a3b      	ldr	r3, [r7, #32]
 8006e62:	e853 3f00 	ldrex	r3, [r3]
 8006e66:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	f023 0301 	bic.w	r3, r3, #1
 8006e6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3308      	adds	r3, #8
 8006e76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e80:	e841 2300 	strex	r3, r2, [r1]
 8006e84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1e5      	bne.n	8006e58 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2220      	movs	r2, #32
 8006e90:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d12e      	bne.n	8006efe <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	e853 3f00 	ldrex	r3, [r3]
 8006eb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	f023 0310 	bic.w	r3, r3, #16
 8006eba:	647b      	str	r3, [r7, #68]	; 0x44
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ec4:	61bb      	str	r3, [r7, #24]
 8006ec6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec8:	6979      	ldr	r1, [r7, #20]
 8006eca:	69ba      	ldr	r2, [r7, #24]
 8006ecc:	e841 2300 	strex	r3, r2, [r1]
 8006ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1e6      	bne.n	8006ea6 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	f003 0310 	and.w	r3, r3, #16
 8006ee2:	2b10      	cmp	r3, #16
 8006ee4:	d103      	bne.n	8006eee <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2210      	movs	r2, #16
 8006eec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f7ff fa74 	bl	80063e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006efc:	e00b      	b.n	8006f16 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f7fa fe2b 	bl	8001b5a <HAL_UART_RxCpltCallback>
}
 8006f04:	e007      	b.n	8006f16 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	699a      	ldr	r2, [r3, #24]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f042 0208 	orr.w	r2, r2, #8
 8006f14:	619a      	str	r2, [r3, #24]
}
 8006f16:	bf00      	nop
 8006f18:	3758      	adds	r7, #88	; 0x58
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b083      	sub	sp, #12
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
	...

08006f34 <__libc_init_array>:
 8006f34:	b570      	push	{r4, r5, r6, lr}
 8006f36:	4d0d      	ldr	r5, [pc, #52]	; (8006f6c <__libc_init_array+0x38>)
 8006f38:	4c0d      	ldr	r4, [pc, #52]	; (8006f70 <__libc_init_array+0x3c>)
 8006f3a:	1b64      	subs	r4, r4, r5
 8006f3c:	10a4      	asrs	r4, r4, #2
 8006f3e:	2600      	movs	r6, #0
 8006f40:	42a6      	cmp	r6, r4
 8006f42:	d109      	bne.n	8006f58 <__libc_init_array+0x24>
 8006f44:	4d0b      	ldr	r5, [pc, #44]	; (8006f74 <__libc_init_array+0x40>)
 8006f46:	4c0c      	ldr	r4, [pc, #48]	; (8006f78 <__libc_init_array+0x44>)
 8006f48:	f001 f8a8 	bl	800809c <_init>
 8006f4c:	1b64      	subs	r4, r4, r5
 8006f4e:	10a4      	asrs	r4, r4, #2
 8006f50:	2600      	movs	r6, #0
 8006f52:	42a6      	cmp	r6, r4
 8006f54:	d105      	bne.n	8006f62 <__libc_init_array+0x2e>
 8006f56:	bd70      	pop	{r4, r5, r6, pc}
 8006f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f5c:	4798      	blx	r3
 8006f5e:	3601      	adds	r6, #1
 8006f60:	e7ee      	b.n	8006f40 <__libc_init_array+0xc>
 8006f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f66:	4798      	blx	r3
 8006f68:	3601      	adds	r6, #1
 8006f6a:	e7f2      	b.n	8006f52 <__libc_init_array+0x1e>
 8006f6c:	080082c8 	.word	0x080082c8
 8006f70:	080082c8 	.word	0x080082c8
 8006f74:	080082c8 	.word	0x080082c8
 8006f78:	080082cc 	.word	0x080082cc

08006f7c <memset>:
 8006f7c:	4402      	add	r2, r0
 8006f7e:	4603      	mov	r3, r0
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d100      	bne.n	8006f86 <memset+0xa>
 8006f84:	4770      	bx	lr
 8006f86:	f803 1b01 	strb.w	r1, [r3], #1
 8006f8a:	e7f9      	b.n	8006f80 <memset+0x4>
 8006f8c:	0000      	movs	r0, r0
	...

08006f90 <cos>:
 8006f90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f92:	ec53 2b10 	vmov	r2, r3, d0
 8006f96:	4824      	ldr	r0, [pc, #144]	; (8007028 <cos+0x98>)
 8006f98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006f9c:	4281      	cmp	r1, r0
 8006f9e:	dc06      	bgt.n	8006fae <cos+0x1e>
 8006fa0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8007020 <cos+0x90>
 8006fa4:	f000 faa4 	bl	80074f0 <__kernel_cos>
 8006fa8:	ec51 0b10 	vmov	r0, r1, d0
 8006fac:	e007      	b.n	8006fbe <cos+0x2e>
 8006fae:	481f      	ldr	r0, [pc, #124]	; (800702c <cos+0x9c>)
 8006fb0:	4281      	cmp	r1, r0
 8006fb2:	dd09      	ble.n	8006fc8 <cos+0x38>
 8006fb4:	ee10 0a10 	vmov	r0, s0
 8006fb8:	4619      	mov	r1, r3
 8006fba:	f7f9 f909 	bl	80001d0 <__aeabi_dsub>
 8006fbe:	ec41 0b10 	vmov	d0, r0, r1
 8006fc2:	b005      	add	sp, #20
 8006fc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8006fc8:	4668      	mov	r0, sp
 8006fca:	f000 f885 	bl	80070d8 <__ieee754_rem_pio2>
 8006fce:	f000 0003 	and.w	r0, r0, #3
 8006fd2:	2801      	cmp	r0, #1
 8006fd4:	d007      	beq.n	8006fe6 <cos+0x56>
 8006fd6:	2802      	cmp	r0, #2
 8006fd8:	d012      	beq.n	8007000 <cos+0x70>
 8006fda:	b9c0      	cbnz	r0, 800700e <cos+0x7e>
 8006fdc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006fe0:	ed9d 0b00 	vldr	d0, [sp]
 8006fe4:	e7de      	b.n	8006fa4 <cos+0x14>
 8006fe6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006fea:	ed9d 0b00 	vldr	d0, [sp]
 8006fee:	f000 fe87 	bl	8007d00 <__kernel_sin>
 8006ff2:	ec53 2b10 	vmov	r2, r3, d0
 8006ff6:	ee10 0a10 	vmov	r0, s0
 8006ffa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006ffe:	e7de      	b.n	8006fbe <cos+0x2e>
 8007000:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007004:	ed9d 0b00 	vldr	d0, [sp]
 8007008:	f000 fa72 	bl	80074f0 <__kernel_cos>
 800700c:	e7f1      	b.n	8006ff2 <cos+0x62>
 800700e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007012:	ed9d 0b00 	vldr	d0, [sp]
 8007016:	2001      	movs	r0, #1
 8007018:	f000 fe72 	bl	8007d00 <__kernel_sin>
 800701c:	e7c4      	b.n	8006fa8 <cos+0x18>
 800701e:	bf00      	nop
	...
 8007028:	3fe921fb 	.word	0x3fe921fb
 800702c:	7fefffff 	.word	0x7fefffff

08007030 <sin>:
 8007030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007032:	ec53 2b10 	vmov	r2, r3, d0
 8007036:	4826      	ldr	r0, [pc, #152]	; (80070d0 <sin+0xa0>)
 8007038:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800703c:	4281      	cmp	r1, r0
 800703e:	dc07      	bgt.n	8007050 <sin+0x20>
 8007040:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80070c8 <sin+0x98>
 8007044:	2000      	movs	r0, #0
 8007046:	f000 fe5b 	bl	8007d00 <__kernel_sin>
 800704a:	ec51 0b10 	vmov	r0, r1, d0
 800704e:	e007      	b.n	8007060 <sin+0x30>
 8007050:	4820      	ldr	r0, [pc, #128]	; (80070d4 <sin+0xa4>)
 8007052:	4281      	cmp	r1, r0
 8007054:	dd09      	ble.n	800706a <sin+0x3a>
 8007056:	ee10 0a10 	vmov	r0, s0
 800705a:	4619      	mov	r1, r3
 800705c:	f7f9 f8b8 	bl	80001d0 <__aeabi_dsub>
 8007060:	ec41 0b10 	vmov	d0, r0, r1
 8007064:	b005      	add	sp, #20
 8007066:	f85d fb04 	ldr.w	pc, [sp], #4
 800706a:	4668      	mov	r0, sp
 800706c:	f000 f834 	bl	80070d8 <__ieee754_rem_pio2>
 8007070:	f000 0003 	and.w	r0, r0, #3
 8007074:	2801      	cmp	r0, #1
 8007076:	d008      	beq.n	800708a <sin+0x5a>
 8007078:	2802      	cmp	r0, #2
 800707a:	d00d      	beq.n	8007098 <sin+0x68>
 800707c:	b9d0      	cbnz	r0, 80070b4 <sin+0x84>
 800707e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007082:	ed9d 0b00 	vldr	d0, [sp]
 8007086:	2001      	movs	r0, #1
 8007088:	e7dd      	b.n	8007046 <sin+0x16>
 800708a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800708e:	ed9d 0b00 	vldr	d0, [sp]
 8007092:	f000 fa2d 	bl	80074f0 <__kernel_cos>
 8007096:	e7d8      	b.n	800704a <sin+0x1a>
 8007098:	ed9d 1b02 	vldr	d1, [sp, #8]
 800709c:	ed9d 0b00 	vldr	d0, [sp]
 80070a0:	2001      	movs	r0, #1
 80070a2:	f000 fe2d 	bl	8007d00 <__kernel_sin>
 80070a6:	ec53 2b10 	vmov	r2, r3, d0
 80070aa:	ee10 0a10 	vmov	r0, s0
 80070ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80070b2:	e7d5      	b.n	8007060 <sin+0x30>
 80070b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80070b8:	ed9d 0b00 	vldr	d0, [sp]
 80070bc:	f000 fa18 	bl	80074f0 <__kernel_cos>
 80070c0:	e7f1      	b.n	80070a6 <sin+0x76>
 80070c2:	bf00      	nop
 80070c4:	f3af 8000 	nop.w
	...
 80070d0:	3fe921fb 	.word	0x3fe921fb
 80070d4:	7fefffff 	.word	0x7fefffff

080070d8 <__ieee754_rem_pio2>:
 80070d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070dc:	ed2d 8b02 	vpush	{d8}
 80070e0:	ec55 4b10 	vmov	r4, r5, d0
 80070e4:	4bca      	ldr	r3, [pc, #808]	; (8007410 <__ieee754_rem_pio2+0x338>)
 80070e6:	b08b      	sub	sp, #44	; 0x2c
 80070e8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80070ec:	4598      	cmp	r8, r3
 80070ee:	4682      	mov	sl, r0
 80070f0:	9502      	str	r5, [sp, #8]
 80070f2:	dc08      	bgt.n	8007106 <__ieee754_rem_pio2+0x2e>
 80070f4:	2200      	movs	r2, #0
 80070f6:	2300      	movs	r3, #0
 80070f8:	ed80 0b00 	vstr	d0, [r0]
 80070fc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007100:	f04f 0b00 	mov.w	fp, #0
 8007104:	e028      	b.n	8007158 <__ieee754_rem_pio2+0x80>
 8007106:	4bc3      	ldr	r3, [pc, #780]	; (8007414 <__ieee754_rem_pio2+0x33c>)
 8007108:	4598      	cmp	r8, r3
 800710a:	dc78      	bgt.n	80071fe <__ieee754_rem_pio2+0x126>
 800710c:	9b02      	ldr	r3, [sp, #8]
 800710e:	4ec2      	ldr	r6, [pc, #776]	; (8007418 <__ieee754_rem_pio2+0x340>)
 8007110:	2b00      	cmp	r3, #0
 8007112:	ee10 0a10 	vmov	r0, s0
 8007116:	a3b0      	add	r3, pc, #704	; (adr r3, 80073d8 <__ieee754_rem_pio2+0x300>)
 8007118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711c:	4629      	mov	r1, r5
 800711e:	dd39      	ble.n	8007194 <__ieee754_rem_pio2+0xbc>
 8007120:	f7f9 f856 	bl	80001d0 <__aeabi_dsub>
 8007124:	45b0      	cmp	r8, r6
 8007126:	4604      	mov	r4, r0
 8007128:	460d      	mov	r5, r1
 800712a:	d01b      	beq.n	8007164 <__ieee754_rem_pio2+0x8c>
 800712c:	a3ac      	add	r3, pc, #688	; (adr r3, 80073e0 <__ieee754_rem_pio2+0x308>)
 800712e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007132:	f7f9 f84d 	bl	80001d0 <__aeabi_dsub>
 8007136:	4602      	mov	r2, r0
 8007138:	460b      	mov	r3, r1
 800713a:	e9ca 2300 	strd	r2, r3, [sl]
 800713e:	4620      	mov	r0, r4
 8007140:	4629      	mov	r1, r5
 8007142:	f7f9 f845 	bl	80001d0 <__aeabi_dsub>
 8007146:	a3a6      	add	r3, pc, #664	; (adr r3, 80073e0 <__ieee754_rem_pio2+0x308>)
 8007148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714c:	f7f9 f840 	bl	80001d0 <__aeabi_dsub>
 8007150:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007154:	f04f 0b01 	mov.w	fp, #1
 8007158:	4658      	mov	r0, fp
 800715a:	b00b      	add	sp, #44	; 0x2c
 800715c:	ecbd 8b02 	vpop	{d8}
 8007160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007164:	a3a0      	add	r3, pc, #640	; (adr r3, 80073e8 <__ieee754_rem_pio2+0x310>)
 8007166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716a:	f7f9 f831 	bl	80001d0 <__aeabi_dsub>
 800716e:	a3a0      	add	r3, pc, #640	; (adr r3, 80073f0 <__ieee754_rem_pio2+0x318>)
 8007170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007174:	4604      	mov	r4, r0
 8007176:	460d      	mov	r5, r1
 8007178:	f7f9 f82a 	bl	80001d0 <__aeabi_dsub>
 800717c:	4602      	mov	r2, r0
 800717e:	460b      	mov	r3, r1
 8007180:	e9ca 2300 	strd	r2, r3, [sl]
 8007184:	4620      	mov	r0, r4
 8007186:	4629      	mov	r1, r5
 8007188:	f7f9 f822 	bl	80001d0 <__aeabi_dsub>
 800718c:	a398      	add	r3, pc, #608	; (adr r3, 80073f0 <__ieee754_rem_pio2+0x318>)
 800718e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007192:	e7db      	b.n	800714c <__ieee754_rem_pio2+0x74>
 8007194:	f7f9 f81e 	bl	80001d4 <__adddf3>
 8007198:	45b0      	cmp	r8, r6
 800719a:	4604      	mov	r4, r0
 800719c:	460d      	mov	r5, r1
 800719e:	d016      	beq.n	80071ce <__ieee754_rem_pio2+0xf6>
 80071a0:	a38f      	add	r3, pc, #572	; (adr r3, 80073e0 <__ieee754_rem_pio2+0x308>)
 80071a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a6:	f7f9 f815 	bl	80001d4 <__adddf3>
 80071aa:	4602      	mov	r2, r0
 80071ac:	460b      	mov	r3, r1
 80071ae:	e9ca 2300 	strd	r2, r3, [sl]
 80071b2:	4620      	mov	r0, r4
 80071b4:	4629      	mov	r1, r5
 80071b6:	f7f9 f80b 	bl	80001d0 <__aeabi_dsub>
 80071ba:	a389      	add	r3, pc, #548	; (adr r3, 80073e0 <__ieee754_rem_pio2+0x308>)
 80071bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c0:	f7f9 f808 	bl	80001d4 <__adddf3>
 80071c4:	f04f 3bff 	mov.w	fp, #4294967295
 80071c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80071cc:	e7c4      	b.n	8007158 <__ieee754_rem_pio2+0x80>
 80071ce:	a386      	add	r3, pc, #536	; (adr r3, 80073e8 <__ieee754_rem_pio2+0x310>)
 80071d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d4:	f7f8 fffe 	bl	80001d4 <__adddf3>
 80071d8:	a385      	add	r3, pc, #532	; (adr r3, 80073f0 <__ieee754_rem_pio2+0x318>)
 80071da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071de:	4604      	mov	r4, r0
 80071e0:	460d      	mov	r5, r1
 80071e2:	f7f8 fff7 	bl	80001d4 <__adddf3>
 80071e6:	4602      	mov	r2, r0
 80071e8:	460b      	mov	r3, r1
 80071ea:	e9ca 2300 	strd	r2, r3, [sl]
 80071ee:	4620      	mov	r0, r4
 80071f0:	4629      	mov	r1, r5
 80071f2:	f7f8 ffed 	bl	80001d0 <__aeabi_dsub>
 80071f6:	a37e      	add	r3, pc, #504	; (adr r3, 80073f0 <__ieee754_rem_pio2+0x318>)
 80071f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fc:	e7e0      	b.n	80071c0 <__ieee754_rem_pio2+0xe8>
 80071fe:	4b87      	ldr	r3, [pc, #540]	; (800741c <__ieee754_rem_pio2+0x344>)
 8007200:	4598      	cmp	r8, r3
 8007202:	f300 80d9 	bgt.w	80073b8 <__ieee754_rem_pio2+0x2e0>
 8007206:	f000 fe39 	bl	8007e7c <fabs>
 800720a:	ec55 4b10 	vmov	r4, r5, d0
 800720e:	ee10 0a10 	vmov	r0, s0
 8007212:	a379      	add	r3, pc, #484	; (adr r3, 80073f8 <__ieee754_rem_pio2+0x320>)
 8007214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007218:	4629      	mov	r1, r5
 800721a:	f7f9 f991 	bl	8000540 <__aeabi_dmul>
 800721e:	4b80      	ldr	r3, [pc, #512]	; (8007420 <__ieee754_rem_pio2+0x348>)
 8007220:	2200      	movs	r2, #0
 8007222:	f7f8 ffd7 	bl	80001d4 <__adddf3>
 8007226:	f7f9 fc25 	bl	8000a74 <__aeabi_d2iz>
 800722a:	4683      	mov	fp, r0
 800722c:	f7f9 f91e 	bl	800046c <__aeabi_i2d>
 8007230:	4602      	mov	r2, r0
 8007232:	460b      	mov	r3, r1
 8007234:	ec43 2b18 	vmov	d8, r2, r3
 8007238:	a367      	add	r3, pc, #412	; (adr r3, 80073d8 <__ieee754_rem_pio2+0x300>)
 800723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723e:	f7f9 f97f 	bl	8000540 <__aeabi_dmul>
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	4620      	mov	r0, r4
 8007248:	4629      	mov	r1, r5
 800724a:	f7f8 ffc1 	bl	80001d0 <__aeabi_dsub>
 800724e:	a364      	add	r3, pc, #400	; (adr r3, 80073e0 <__ieee754_rem_pio2+0x308>)
 8007250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007254:	4606      	mov	r6, r0
 8007256:	460f      	mov	r7, r1
 8007258:	ec51 0b18 	vmov	r0, r1, d8
 800725c:	f7f9 f970 	bl	8000540 <__aeabi_dmul>
 8007260:	f1bb 0f1f 	cmp.w	fp, #31
 8007264:	4604      	mov	r4, r0
 8007266:	460d      	mov	r5, r1
 8007268:	dc0d      	bgt.n	8007286 <__ieee754_rem_pio2+0x1ae>
 800726a:	4b6e      	ldr	r3, [pc, #440]	; (8007424 <__ieee754_rem_pio2+0x34c>)
 800726c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007274:	4543      	cmp	r3, r8
 8007276:	d006      	beq.n	8007286 <__ieee754_rem_pio2+0x1ae>
 8007278:	4622      	mov	r2, r4
 800727a:	462b      	mov	r3, r5
 800727c:	4630      	mov	r0, r6
 800727e:	4639      	mov	r1, r7
 8007280:	f7f8 ffa6 	bl	80001d0 <__aeabi_dsub>
 8007284:	e00f      	b.n	80072a6 <__ieee754_rem_pio2+0x1ce>
 8007286:	462b      	mov	r3, r5
 8007288:	4622      	mov	r2, r4
 800728a:	4630      	mov	r0, r6
 800728c:	4639      	mov	r1, r7
 800728e:	f7f8 ff9f 	bl	80001d0 <__aeabi_dsub>
 8007292:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007296:	9303      	str	r3, [sp, #12]
 8007298:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800729c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80072a0:	f1b8 0f10 	cmp.w	r8, #16
 80072a4:	dc02      	bgt.n	80072ac <__ieee754_rem_pio2+0x1d4>
 80072a6:	e9ca 0100 	strd	r0, r1, [sl]
 80072aa:	e039      	b.n	8007320 <__ieee754_rem_pio2+0x248>
 80072ac:	a34e      	add	r3, pc, #312	; (adr r3, 80073e8 <__ieee754_rem_pio2+0x310>)
 80072ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b2:	ec51 0b18 	vmov	r0, r1, d8
 80072b6:	f7f9 f943 	bl	8000540 <__aeabi_dmul>
 80072ba:	4604      	mov	r4, r0
 80072bc:	460d      	mov	r5, r1
 80072be:	4602      	mov	r2, r0
 80072c0:	460b      	mov	r3, r1
 80072c2:	4630      	mov	r0, r6
 80072c4:	4639      	mov	r1, r7
 80072c6:	f7f8 ff83 	bl	80001d0 <__aeabi_dsub>
 80072ca:	4602      	mov	r2, r0
 80072cc:	460b      	mov	r3, r1
 80072ce:	4680      	mov	r8, r0
 80072d0:	4689      	mov	r9, r1
 80072d2:	4630      	mov	r0, r6
 80072d4:	4639      	mov	r1, r7
 80072d6:	f7f8 ff7b 	bl	80001d0 <__aeabi_dsub>
 80072da:	4622      	mov	r2, r4
 80072dc:	462b      	mov	r3, r5
 80072de:	f7f8 ff77 	bl	80001d0 <__aeabi_dsub>
 80072e2:	a343      	add	r3, pc, #268	; (adr r3, 80073f0 <__ieee754_rem_pio2+0x318>)
 80072e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e8:	4604      	mov	r4, r0
 80072ea:	460d      	mov	r5, r1
 80072ec:	ec51 0b18 	vmov	r0, r1, d8
 80072f0:	f7f9 f926 	bl	8000540 <__aeabi_dmul>
 80072f4:	4622      	mov	r2, r4
 80072f6:	462b      	mov	r3, r5
 80072f8:	f7f8 ff6a 	bl	80001d0 <__aeabi_dsub>
 80072fc:	4602      	mov	r2, r0
 80072fe:	460b      	mov	r3, r1
 8007300:	4604      	mov	r4, r0
 8007302:	460d      	mov	r5, r1
 8007304:	4640      	mov	r0, r8
 8007306:	4649      	mov	r1, r9
 8007308:	f7f8 ff62 	bl	80001d0 <__aeabi_dsub>
 800730c:	9a03      	ldr	r2, [sp, #12]
 800730e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	2b31      	cmp	r3, #49	; 0x31
 8007316:	dc24      	bgt.n	8007362 <__ieee754_rem_pio2+0x28a>
 8007318:	e9ca 0100 	strd	r0, r1, [sl]
 800731c:	4646      	mov	r6, r8
 800731e:	464f      	mov	r7, r9
 8007320:	e9da 8900 	ldrd	r8, r9, [sl]
 8007324:	4630      	mov	r0, r6
 8007326:	4642      	mov	r2, r8
 8007328:	464b      	mov	r3, r9
 800732a:	4639      	mov	r1, r7
 800732c:	f7f8 ff50 	bl	80001d0 <__aeabi_dsub>
 8007330:	462b      	mov	r3, r5
 8007332:	4622      	mov	r2, r4
 8007334:	f7f8 ff4c 	bl	80001d0 <__aeabi_dsub>
 8007338:	9b02      	ldr	r3, [sp, #8]
 800733a:	2b00      	cmp	r3, #0
 800733c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007340:	f6bf af0a 	bge.w	8007158 <__ieee754_rem_pio2+0x80>
 8007344:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007348:	f8ca 3004 	str.w	r3, [sl, #4]
 800734c:	f8ca 8000 	str.w	r8, [sl]
 8007350:	f8ca 0008 	str.w	r0, [sl, #8]
 8007354:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007358:	f8ca 300c 	str.w	r3, [sl, #12]
 800735c:	f1cb 0b00 	rsb	fp, fp, #0
 8007360:	e6fa      	b.n	8007158 <__ieee754_rem_pio2+0x80>
 8007362:	a327      	add	r3, pc, #156	; (adr r3, 8007400 <__ieee754_rem_pio2+0x328>)
 8007364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007368:	ec51 0b18 	vmov	r0, r1, d8
 800736c:	f7f9 f8e8 	bl	8000540 <__aeabi_dmul>
 8007370:	4604      	mov	r4, r0
 8007372:	460d      	mov	r5, r1
 8007374:	4602      	mov	r2, r0
 8007376:	460b      	mov	r3, r1
 8007378:	4640      	mov	r0, r8
 800737a:	4649      	mov	r1, r9
 800737c:	f7f8 ff28 	bl	80001d0 <__aeabi_dsub>
 8007380:	4602      	mov	r2, r0
 8007382:	460b      	mov	r3, r1
 8007384:	4606      	mov	r6, r0
 8007386:	460f      	mov	r7, r1
 8007388:	4640      	mov	r0, r8
 800738a:	4649      	mov	r1, r9
 800738c:	f7f8 ff20 	bl	80001d0 <__aeabi_dsub>
 8007390:	4622      	mov	r2, r4
 8007392:	462b      	mov	r3, r5
 8007394:	f7f8 ff1c 	bl	80001d0 <__aeabi_dsub>
 8007398:	a31b      	add	r3, pc, #108	; (adr r3, 8007408 <__ieee754_rem_pio2+0x330>)
 800739a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739e:	4604      	mov	r4, r0
 80073a0:	460d      	mov	r5, r1
 80073a2:	ec51 0b18 	vmov	r0, r1, d8
 80073a6:	f7f9 f8cb 	bl	8000540 <__aeabi_dmul>
 80073aa:	4622      	mov	r2, r4
 80073ac:	462b      	mov	r3, r5
 80073ae:	f7f8 ff0f 	bl	80001d0 <__aeabi_dsub>
 80073b2:	4604      	mov	r4, r0
 80073b4:	460d      	mov	r5, r1
 80073b6:	e75f      	b.n	8007278 <__ieee754_rem_pio2+0x1a0>
 80073b8:	4b1b      	ldr	r3, [pc, #108]	; (8007428 <__ieee754_rem_pio2+0x350>)
 80073ba:	4598      	cmp	r8, r3
 80073bc:	dd36      	ble.n	800742c <__ieee754_rem_pio2+0x354>
 80073be:	ee10 2a10 	vmov	r2, s0
 80073c2:	462b      	mov	r3, r5
 80073c4:	4620      	mov	r0, r4
 80073c6:	4629      	mov	r1, r5
 80073c8:	f7f8 ff02 	bl	80001d0 <__aeabi_dsub>
 80073cc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80073d0:	e9ca 0100 	strd	r0, r1, [sl]
 80073d4:	e694      	b.n	8007100 <__ieee754_rem_pio2+0x28>
 80073d6:	bf00      	nop
 80073d8:	54400000 	.word	0x54400000
 80073dc:	3ff921fb 	.word	0x3ff921fb
 80073e0:	1a626331 	.word	0x1a626331
 80073e4:	3dd0b461 	.word	0x3dd0b461
 80073e8:	1a600000 	.word	0x1a600000
 80073ec:	3dd0b461 	.word	0x3dd0b461
 80073f0:	2e037073 	.word	0x2e037073
 80073f4:	3ba3198a 	.word	0x3ba3198a
 80073f8:	6dc9c883 	.word	0x6dc9c883
 80073fc:	3fe45f30 	.word	0x3fe45f30
 8007400:	2e000000 	.word	0x2e000000
 8007404:	3ba3198a 	.word	0x3ba3198a
 8007408:	252049c1 	.word	0x252049c1
 800740c:	397b839a 	.word	0x397b839a
 8007410:	3fe921fb 	.word	0x3fe921fb
 8007414:	4002d97b 	.word	0x4002d97b
 8007418:	3ff921fb 	.word	0x3ff921fb
 800741c:	413921fb 	.word	0x413921fb
 8007420:	3fe00000 	.word	0x3fe00000
 8007424:	080080f0 	.word	0x080080f0
 8007428:	7fefffff 	.word	0x7fefffff
 800742c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007430:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007434:	ee10 0a10 	vmov	r0, s0
 8007438:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800743c:	ee10 6a10 	vmov	r6, s0
 8007440:	460f      	mov	r7, r1
 8007442:	f7f9 fb17 	bl	8000a74 <__aeabi_d2iz>
 8007446:	f7f9 f811 	bl	800046c <__aeabi_i2d>
 800744a:	4602      	mov	r2, r0
 800744c:	460b      	mov	r3, r1
 800744e:	4630      	mov	r0, r6
 8007450:	4639      	mov	r1, r7
 8007452:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007456:	f7f8 febb 	bl	80001d0 <__aeabi_dsub>
 800745a:	4b22      	ldr	r3, [pc, #136]	; (80074e4 <__ieee754_rem_pio2+0x40c>)
 800745c:	2200      	movs	r2, #0
 800745e:	f7f9 f86f 	bl	8000540 <__aeabi_dmul>
 8007462:	460f      	mov	r7, r1
 8007464:	4606      	mov	r6, r0
 8007466:	f7f9 fb05 	bl	8000a74 <__aeabi_d2iz>
 800746a:	f7f8 ffff 	bl	800046c <__aeabi_i2d>
 800746e:	4602      	mov	r2, r0
 8007470:	460b      	mov	r3, r1
 8007472:	4630      	mov	r0, r6
 8007474:	4639      	mov	r1, r7
 8007476:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800747a:	f7f8 fea9 	bl	80001d0 <__aeabi_dsub>
 800747e:	4b19      	ldr	r3, [pc, #100]	; (80074e4 <__ieee754_rem_pio2+0x40c>)
 8007480:	2200      	movs	r2, #0
 8007482:	f7f9 f85d 	bl	8000540 <__aeabi_dmul>
 8007486:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800748a:	ad04      	add	r5, sp, #16
 800748c:	f04f 0803 	mov.w	r8, #3
 8007490:	46a9      	mov	r9, r5
 8007492:	2600      	movs	r6, #0
 8007494:	2700      	movs	r7, #0
 8007496:	4632      	mov	r2, r6
 8007498:	463b      	mov	r3, r7
 800749a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800749e:	46c3      	mov	fp, r8
 80074a0:	3d08      	subs	r5, #8
 80074a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80074a6:	f7f9 fab3 	bl	8000a10 <__aeabi_dcmpeq>
 80074aa:	2800      	cmp	r0, #0
 80074ac:	d1f3      	bne.n	8007496 <__ieee754_rem_pio2+0x3be>
 80074ae:	4b0e      	ldr	r3, [pc, #56]	; (80074e8 <__ieee754_rem_pio2+0x410>)
 80074b0:	9301      	str	r3, [sp, #4]
 80074b2:	2302      	movs	r3, #2
 80074b4:	9300      	str	r3, [sp, #0]
 80074b6:	4622      	mov	r2, r4
 80074b8:	465b      	mov	r3, fp
 80074ba:	4651      	mov	r1, sl
 80074bc:	4648      	mov	r0, r9
 80074be:	f000 f8df 	bl	8007680 <__kernel_rem_pio2>
 80074c2:	9b02      	ldr	r3, [sp, #8]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	4683      	mov	fp, r0
 80074c8:	f6bf ae46 	bge.w	8007158 <__ieee754_rem_pio2+0x80>
 80074cc:	f8da 3004 	ldr.w	r3, [sl, #4]
 80074d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80074d4:	f8ca 3004 	str.w	r3, [sl, #4]
 80074d8:	f8da 300c 	ldr.w	r3, [sl, #12]
 80074dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80074e0:	e73a      	b.n	8007358 <__ieee754_rem_pio2+0x280>
 80074e2:	bf00      	nop
 80074e4:	41700000 	.word	0x41700000
 80074e8:	08008170 	.word	0x08008170
 80074ec:	00000000 	.word	0x00000000

080074f0 <__kernel_cos>:
 80074f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f4:	ec57 6b10 	vmov	r6, r7, d0
 80074f8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80074fc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007500:	ed8d 1b00 	vstr	d1, [sp]
 8007504:	da07      	bge.n	8007516 <__kernel_cos+0x26>
 8007506:	ee10 0a10 	vmov	r0, s0
 800750a:	4639      	mov	r1, r7
 800750c:	f7f9 fab2 	bl	8000a74 <__aeabi_d2iz>
 8007510:	2800      	cmp	r0, #0
 8007512:	f000 8088 	beq.w	8007626 <__kernel_cos+0x136>
 8007516:	4632      	mov	r2, r6
 8007518:	463b      	mov	r3, r7
 800751a:	4630      	mov	r0, r6
 800751c:	4639      	mov	r1, r7
 800751e:	f7f9 f80f 	bl	8000540 <__aeabi_dmul>
 8007522:	4b51      	ldr	r3, [pc, #324]	; (8007668 <__kernel_cos+0x178>)
 8007524:	2200      	movs	r2, #0
 8007526:	4604      	mov	r4, r0
 8007528:	460d      	mov	r5, r1
 800752a:	f7f9 f809 	bl	8000540 <__aeabi_dmul>
 800752e:	a340      	add	r3, pc, #256	; (adr r3, 8007630 <__kernel_cos+0x140>)
 8007530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007534:	4682      	mov	sl, r0
 8007536:	468b      	mov	fp, r1
 8007538:	4620      	mov	r0, r4
 800753a:	4629      	mov	r1, r5
 800753c:	f7f9 f800 	bl	8000540 <__aeabi_dmul>
 8007540:	a33d      	add	r3, pc, #244	; (adr r3, 8007638 <__kernel_cos+0x148>)
 8007542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007546:	f7f8 fe45 	bl	80001d4 <__adddf3>
 800754a:	4622      	mov	r2, r4
 800754c:	462b      	mov	r3, r5
 800754e:	f7f8 fff7 	bl	8000540 <__aeabi_dmul>
 8007552:	a33b      	add	r3, pc, #236	; (adr r3, 8007640 <__kernel_cos+0x150>)
 8007554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007558:	f7f8 fe3a 	bl	80001d0 <__aeabi_dsub>
 800755c:	4622      	mov	r2, r4
 800755e:	462b      	mov	r3, r5
 8007560:	f7f8 ffee 	bl	8000540 <__aeabi_dmul>
 8007564:	a338      	add	r3, pc, #224	; (adr r3, 8007648 <__kernel_cos+0x158>)
 8007566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756a:	f7f8 fe33 	bl	80001d4 <__adddf3>
 800756e:	4622      	mov	r2, r4
 8007570:	462b      	mov	r3, r5
 8007572:	f7f8 ffe5 	bl	8000540 <__aeabi_dmul>
 8007576:	a336      	add	r3, pc, #216	; (adr r3, 8007650 <__kernel_cos+0x160>)
 8007578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757c:	f7f8 fe28 	bl	80001d0 <__aeabi_dsub>
 8007580:	4622      	mov	r2, r4
 8007582:	462b      	mov	r3, r5
 8007584:	f7f8 ffdc 	bl	8000540 <__aeabi_dmul>
 8007588:	a333      	add	r3, pc, #204	; (adr r3, 8007658 <__kernel_cos+0x168>)
 800758a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758e:	f7f8 fe21 	bl	80001d4 <__adddf3>
 8007592:	4622      	mov	r2, r4
 8007594:	462b      	mov	r3, r5
 8007596:	f7f8 ffd3 	bl	8000540 <__aeabi_dmul>
 800759a:	4622      	mov	r2, r4
 800759c:	462b      	mov	r3, r5
 800759e:	f7f8 ffcf 	bl	8000540 <__aeabi_dmul>
 80075a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075a6:	4604      	mov	r4, r0
 80075a8:	460d      	mov	r5, r1
 80075aa:	4630      	mov	r0, r6
 80075ac:	4639      	mov	r1, r7
 80075ae:	f7f8 ffc7 	bl	8000540 <__aeabi_dmul>
 80075b2:	460b      	mov	r3, r1
 80075b4:	4602      	mov	r2, r0
 80075b6:	4629      	mov	r1, r5
 80075b8:	4620      	mov	r0, r4
 80075ba:	f7f8 fe09 	bl	80001d0 <__aeabi_dsub>
 80075be:	4b2b      	ldr	r3, [pc, #172]	; (800766c <__kernel_cos+0x17c>)
 80075c0:	4598      	cmp	r8, r3
 80075c2:	4606      	mov	r6, r0
 80075c4:	460f      	mov	r7, r1
 80075c6:	dc10      	bgt.n	80075ea <__kernel_cos+0xfa>
 80075c8:	4602      	mov	r2, r0
 80075ca:	460b      	mov	r3, r1
 80075cc:	4650      	mov	r0, sl
 80075ce:	4659      	mov	r1, fp
 80075d0:	f7f8 fdfe 	bl	80001d0 <__aeabi_dsub>
 80075d4:	460b      	mov	r3, r1
 80075d6:	4926      	ldr	r1, [pc, #152]	; (8007670 <__kernel_cos+0x180>)
 80075d8:	4602      	mov	r2, r0
 80075da:	2000      	movs	r0, #0
 80075dc:	f7f8 fdf8 	bl	80001d0 <__aeabi_dsub>
 80075e0:	ec41 0b10 	vmov	d0, r0, r1
 80075e4:	b003      	add	sp, #12
 80075e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ea:	4b22      	ldr	r3, [pc, #136]	; (8007674 <__kernel_cos+0x184>)
 80075ec:	4920      	ldr	r1, [pc, #128]	; (8007670 <__kernel_cos+0x180>)
 80075ee:	4598      	cmp	r8, r3
 80075f0:	bfcc      	ite	gt
 80075f2:	4d21      	ldrgt	r5, [pc, #132]	; (8007678 <__kernel_cos+0x188>)
 80075f4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80075f8:	2400      	movs	r4, #0
 80075fa:	4622      	mov	r2, r4
 80075fc:	462b      	mov	r3, r5
 80075fe:	2000      	movs	r0, #0
 8007600:	f7f8 fde6 	bl	80001d0 <__aeabi_dsub>
 8007604:	4622      	mov	r2, r4
 8007606:	4680      	mov	r8, r0
 8007608:	4689      	mov	r9, r1
 800760a:	462b      	mov	r3, r5
 800760c:	4650      	mov	r0, sl
 800760e:	4659      	mov	r1, fp
 8007610:	f7f8 fdde 	bl	80001d0 <__aeabi_dsub>
 8007614:	4632      	mov	r2, r6
 8007616:	463b      	mov	r3, r7
 8007618:	f7f8 fdda 	bl	80001d0 <__aeabi_dsub>
 800761c:	4602      	mov	r2, r0
 800761e:	460b      	mov	r3, r1
 8007620:	4640      	mov	r0, r8
 8007622:	4649      	mov	r1, r9
 8007624:	e7da      	b.n	80075dc <__kernel_cos+0xec>
 8007626:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007660 <__kernel_cos+0x170>
 800762a:	e7db      	b.n	80075e4 <__kernel_cos+0xf4>
 800762c:	f3af 8000 	nop.w
 8007630:	be8838d4 	.word	0xbe8838d4
 8007634:	bda8fae9 	.word	0xbda8fae9
 8007638:	bdb4b1c4 	.word	0xbdb4b1c4
 800763c:	3e21ee9e 	.word	0x3e21ee9e
 8007640:	809c52ad 	.word	0x809c52ad
 8007644:	3e927e4f 	.word	0x3e927e4f
 8007648:	19cb1590 	.word	0x19cb1590
 800764c:	3efa01a0 	.word	0x3efa01a0
 8007650:	16c15177 	.word	0x16c15177
 8007654:	3f56c16c 	.word	0x3f56c16c
 8007658:	5555554c 	.word	0x5555554c
 800765c:	3fa55555 	.word	0x3fa55555
 8007660:	00000000 	.word	0x00000000
 8007664:	3ff00000 	.word	0x3ff00000
 8007668:	3fe00000 	.word	0x3fe00000
 800766c:	3fd33332 	.word	0x3fd33332
 8007670:	3ff00000 	.word	0x3ff00000
 8007674:	3fe90000 	.word	0x3fe90000
 8007678:	3fd20000 	.word	0x3fd20000
 800767c:	00000000 	.word	0x00000000

08007680 <__kernel_rem_pio2>:
 8007680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007684:	ed2d 8b02 	vpush	{d8}
 8007688:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800768c:	f112 0f14 	cmn.w	r2, #20
 8007690:	9308      	str	r3, [sp, #32]
 8007692:	9101      	str	r1, [sp, #4]
 8007694:	4bc6      	ldr	r3, [pc, #792]	; (80079b0 <__kernel_rem_pio2+0x330>)
 8007696:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007698:	9009      	str	r0, [sp, #36]	; 0x24
 800769a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800769e:	9304      	str	r3, [sp, #16]
 80076a0:	9b08      	ldr	r3, [sp, #32]
 80076a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80076a6:	bfa8      	it	ge
 80076a8:	1ed4      	subge	r4, r2, #3
 80076aa:	9306      	str	r3, [sp, #24]
 80076ac:	bfb2      	itee	lt
 80076ae:	2400      	movlt	r4, #0
 80076b0:	2318      	movge	r3, #24
 80076b2:	fb94 f4f3 	sdivge	r4, r4, r3
 80076b6:	f06f 0317 	mvn.w	r3, #23
 80076ba:	fb04 3303 	mla	r3, r4, r3, r3
 80076be:	eb03 0a02 	add.w	sl, r3, r2
 80076c2:	9b04      	ldr	r3, [sp, #16]
 80076c4:	9a06      	ldr	r2, [sp, #24]
 80076c6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80079a0 <__kernel_rem_pio2+0x320>
 80076ca:	eb03 0802 	add.w	r8, r3, r2
 80076ce:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80076d0:	1aa7      	subs	r7, r4, r2
 80076d2:	ae20      	add	r6, sp, #128	; 0x80
 80076d4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80076d8:	2500      	movs	r5, #0
 80076da:	4545      	cmp	r5, r8
 80076dc:	dd18      	ble.n	8007710 <__kernel_rem_pio2+0x90>
 80076de:	9b08      	ldr	r3, [sp, #32]
 80076e0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80076e4:	aa20      	add	r2, sp, #128	; 0x80
 80076e6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80079a0 <__kernel_rem_pio2+0x320>
 80076ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80076ee:	f1c3 0301 	rsb	r3, r3, #1
 80076f2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80076f6:	9307      	str	r3, [sp, #28]
 80076f8:	9b07      	ldr	r3, [sp, #28]
 80076fa:	9a04      	ldr	r2, [sp, #16]
 80076fc:	4443      	add	r3, r8
 80076fe:	429a      	cmp	r2, r3
 8007700:	db2f      	blt.n	8007762 <__kernel_rem_pio2+0xe2>
 8007702:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007706:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800770a:	462f      	mov	r7, r5
 800770c:	2600      	movs	r6, #0
 800770e:	e01b      	b.n	8007748 <__kernel_rem_pio2+0xc8>
 8007710:	42ef      	cmn	r7, r5
 8007712:	d407      	bmi.n	8007724 <__kernel_rem_pio2+0xa4>
 8007714:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007718:	f7f8 fea8 	bl	800046c <__aeabi_i2d>
 800771c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007720:	3501      	adds	r5, #1
 8007722:	e7da      	b.n	80076da <__kernel_rem_pio2+0x5a>
 8007724:	ec51 0b18 	vmov	r0, r1, d8
 8007728:	e7f8      	b.n	800771c <__kernel_rem_pio2+0x9c>
 800772a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800772e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007732:	f7f8 ff05 	bl	8000540 <__aeabi_dmul>
 8007736:	4602      	mov	r2, r0
 8007738:	460b      	mov	r3, r1
 800773a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800773e:	f7f8 fd49 	bl	80001d4 <__adddf3>
 8007742:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007746:	3601      	adds	r6, #1
 8007748:	9b06      	ldr	r3, [sp, #24]
 800774a:	429e      	cmp	r6, r3
 800774c:	f1a7 0708 	sub.w	r7, r7, #8
 8007750:	ddeb      	ble.n	800772a <__kernel_rem_pio2+0xaa>
 8007752:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007756:	3508      	adds	r5, #8
 8007758:	ecab 7b02 	vstmia	fp!, {d7}
 800775c:	f108 0801 	add.w	r8, r8, #1
 8007760:	e7ca      	b.n	80076f8 <__kernel_rem_pio2+0x78>
 8007762:	9b04      	ldr	r3, [sp, #16]
 8007764:	aa0c      	add	r2, sp, #48	; 0x30
 8007766:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800776a:	930b      	str	r3, [sp, #44]	; 0x2c
 800776c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800776e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007772:	9c04      	ldr	r4, [sp, #16]
 8007774:	930a      	str	r3, [sp, #40]	; 0x28
 8007776:	ab98      	add	r3, sp, #608	; 0x260
 8007778:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800777c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007780:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8007784:	f8cd b008 	str.w	fp, [sp, #8]
 8007788:	4625      	mov	r5, r4
 800778a:	2d00      	cmp	r5, #0
 800778c:	dc78      	bgt.n	8007880 <__kernel_rem_pio2+0x200>
 800778e:	ec47 6b10 	vmov	d0, r6, r7
 8007792:	4650      	mov	r0, sl
 8007794:	f000 fbfc 	bl	8007f90 <scalbn>
 8007798:	ec57 6b10 	vmov	r6, r7, d0
 800779c:	2200      	movs	r2, #0
 800779e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80077a2:	ee10 0a10 	vmov	r0, s0
 80077a6:	4639      	mov	r1, r7
 80077a8:	f7f8 feca 	bl	8000540 <__aeabi_dmul>
 80077ac:	ec41 0b10 	vmov	d0, r0, r1
 80077b0:	f000 fb6e 	bl	8007e90 <floor>
 80077b4:	4b7f      	ldr	r3, [pc, #508]	; (80079b4 <__kernel_rem_pio2+0x334>)
 80077b6:	ec51 0b10 	vmov	r0, r1, d0
 80077ba:	2200      	movs	r2, #0
 80077bc:	f7f8 fec0 	bl	8000540 <__aeabi_dmul>
 80077c0:	4602      	mov	r2, r0
 80077c2:	460b      	mov	r3, r1
 80077c4:	4630      	mov	r0, r6
 80077c6:	4639      	mov	r1, r7
 80077c8:	f7f8 fd02 	bl	80001d0 <__aeabi_dsub>
 80077cc:	460f      	mov	r7, r1
 80077ce:	4606      	mov	r6, r0
 80077d0:	f7f9 f950 	bl	8000a74 <__aeabi_d2iz>
 80077d4:	9007      	str	r0, [sp, #28]
 80077d6:	f7f8 fe49 	bl	800046c <__aeabi_i2d>
 80077da:	4602      	mov	r2, r0
 80077dc:	460b      	mov	r3, r1
 80077de:	4630      	mov	r0, r6
 80077e0:	4639      	mov	r1, r7
 80077e2:	f7f8 fcf5 	bl	80001d0 <__aeabi_dsub>
 80077e6:	f1ba 0f00 	cmp.w	sl, #0
 80077ea:	4606      	mov	r6, r0
 80077ec:	460f      	mov	r7, r1
 80077ee:	dd70      	ble.n	80078d2 <__kernel_rem_pio2+0x252>
 80077f0:	1e62      	subs	r2, r4, #1
 80077f2:	ab0c      	add	r3, sp, #48	; 0x30
 80077f4:	9d07      	ldr	r5, [sp, #28]
 80077f6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80077fa:	f1ca 0118 	rsb	r1, sl, #24
 80077fe:	fa40 f301 	asr.w	r3, r0, r1
 8007802:	441d      	add	r5, r3
 8007804:	408b      	lsls	r3, r1
 8007806:	1ac0      	subs	r0, r0, r3
 8007808:	ab0c      	add	r3, sp, #48	; 0x30
 800780a:	9507      	str	r5, [sp, #28]
 800780c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007810:	f1ca 0317 	rsb	r3, sl, #23
 8007814:	fa40 f303 	asr.w	r3, r0, r3
 8007818:	9302      	str	r3, [sp, #8]
 800781a:	9b02      	ldr	r3, [sp, #8]
 800781c:	2b00      	cmp	r3, #0
 800781e:	dd66      	ble.n	80078ee <__kernel_rem_pio2+0x26e>
 8007820:	9b07      	ldr	r3, [sp, #28]
 8007822:	2200      	movs	r2, #0
 8007824:	3301      	adds	r3, #1
 8007826:	9307      	str	r3, [sp, #28]
 8007828:	4615      	mov	r5, r2
 800782a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800782e:	4294      	cmp	r4, r2
 8007830:	f300 8099 	bgt.w	8007966 <__kernel_rem_pio2+0x2e6>
 8007834:	f1ba 0f00 	cmp.w	sl, #0
 8007838:	dd07      	ble.n	800784a <__kernel_rem_pio2+0x1ca>
 800783a:	f1ba 0f01 	cmp.w	sl, #1
 800783e:	f000 80a5 	beq.w	800798c <__kernel_rem_pio2+0x30c>
 8007842:	f1ba 0f02 	cmp.w	sl, #2
 8007846:	f000 80c1 	beq.w	80079cc <__kernel_rem_pio2+0x34c>
 800784a:	9b02      	ldr	r3, [sp, #8]
 800784c:	2b02      	cmp	r3, #2
 800784e:	d14e      	bne.n	80078ee <__kernel_rem_pio2+0x26e>
 8007850:	4632      	mov	r2, r6
 8007852:	463b      	mov	r3, r7
 8007854:	4958      	ldr	r1, [pc, #352]	; (80079b8 <__kernel_rem_pio2+0x338>)
 8007856:	2000      	movs	r0, #0
 8007858:	f7f8 fcba 	bl	80001d0 <__aeabi_dsub>
 800785c:	4606      	mov	r6, r0
 800785e:	460f      	mov	r7, r1
 8007860:	2d00      	cmp	r5, #0
 8007862:	d044      	beq.n	80078ee <__kernel_rem_pio2+0x26e>
 8007864:	4650      	mov	r0, sl
 8007866:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80079a8 <__kernel_rem_pio2+0x328>
 800786a:	f000 fb91 	bl	8007f90 <scalbn>
 800786e:	4630      	mov	r0, r6
 8007870:	4639      	mov	r1, r7
 8007872:	ec53 2b10 	vmov	r2, r3, d0
 8007876:	f7f8 fcab 	bl	80001d0 <__aeabi_dsub>
 800787a:	4606      	mov	r6, r0
 800787c:	460f      	mov	r7, r1
 800787e:	e036      	b.n	80078ee <__kernel_rem_pio2+0x26e>
 8007880:	4b4e      	ldr	r3, [pc, #312]	; (80079bc <__kernel_rem_pio2+0x33c>)
 8007882:	2200      	movs	r2, #0
 8007884:	4630      	mov	r0, r6
 8007886:	4639      	mov	r1, r7
 8007888:	f7f8 fe5a 	bl	8000540 <__aeabi_dmul>
 800788c:	f7f9 f8f2 	bl	8000a74 <__aeabi_d2iz>
 8007890:	f7f8 fdec 	bl	800046c <__aeabi_i2d>
 8007894:	4b4a      	ldr	r3, [pc, #296]	; (80079c0 <__kernel_rem_pio2+0x340>)
 8007896:	2200      	movs	r2, #0
 8007898:	4680      	mov	r8, r0
 800789a:	4689      	mov	r9, r1
 800789c:	f7f8 fe50 	bl	8000540 <__aeabi_dmul>
 80078a0:	4602      	mov	r2, r0
 80078a2:	460b      	mov	r3, r1
 80078a4:	4630      	mov	r0, r6
 80078a6:	4639      	mov	r1, r7
 80078a8:	f7f8 fc92 	bl	80001d0 <__aeabi_dsub>
 80078ac:	f7f9 f8e2 	bl	8000a74 <__aeabi_d2iz>
 80078b0:	9b02      	ldr	r3, [sp, #8]
 80078b2:	f843 0b04 	str.w	r0, [r3], #4
 80078b6:	3d01      	subs	r5, #1
 80078b8:	9302      	str	r3, [sp, #8]
 80078ba:	ab70      	add	r3, sp, #448	; 0x1c0
 80078bc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80078c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c4:	4640      	mov	r0, r8
 80078c6:	4649      	mov	r1, r9
 80078c8:	f7f8 fc84 	bl	80001d4 <__adddf3>
 80078cc:	4606      	mov	r6, r0
 80078ce:	460f      	mov	r7, r1
 80078d0:	e75b      	b.n	800778a <__kernel_rem_pio2+0x10a>
 80078d2:	d105      	bne.n	80078e0 <__kernel_rem_pio2+0x260>
 80078d4:	1e63      	subs	r3, r4, #1
 80078d6:	aa0c      	add	r2, sp, #48	; 0x30
 80078d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80078dc:	15c3      	asrs	r3, r0, #23
 80078de:	e79b      	b.n	8007818 <__kernel_rem_pio2+0x198>
 80078e0:	4b38      	ldr	r3, [pc, #224]	; (80079c4 <__kernel_rem_pio2+0x344>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	f7f9 f8b2 	bl	8000a4c <__aeabi_dcmpge>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d139      	bne.n	8007960 <__kernel_rem_pio2+0x2e0>
 80078ec:	9002      	str	r0, [sp, #8]
 80078ee:	2200      	movs	r2, #0
 80078f0:	2300      	movs	r3, #0
 80078f2:	4630      	mov	r0, r6
 80078f4:	4639      	mov	r1, r7
 80078f6:	f7f9 f88b 	bl	8000a10 <__aeabi_dcmpeq>
 80078fa:	2800      	cmp	r0, #0
 80078fc:	f000 80b4 	beq.w	8007a68 <__kernel_rem_pio2+0x3e8>
 8007900:	f104 3bff 	add.w	fp, r4, #4294967295
 8007904:	465b      	mov	r3, fp
 8007906:	2200      	movs	r2, #0
 8007908:	9904      	ldr	r1, [sp, #16]
 800790a:	428b      	cmp	r3, r1
 800790c:	da65      	bge.n	80079da <__kernel_rem_pio2+0x35a>
 800790e:	2a00      	cmp	r2, #0
 8007910:	d07b      	beq.n	8007a0a <__kernel_rem_pio2+0x38a>
 8007912:	ab0c      	add	r3, sp, #48	; 0x30
 8007914:	f1aa 0a18 	sub.w	sl, sl, #24
 8007918:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800791c:	2b00      	cmp	r3, #0
 800791e:	f000 80a0 	beq.w	8007a62 <__kernel_rem_pio2+0x3e2>
 8007922:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80079a8 <__kernel_rem_pio2+0x328>
 8007926:	4650      	mov	r0, sl
 8007928:	f000 fb32 	bl	8007f90 <scalbn>
 800792c:	4f23      	ldr	r7, [pc, #140]	; (80079bc <__kernel_rem_pio2+0x33c>)
 800792e:	ec55 4b10 	vmov	r4, r5, d0
 8007932:	46d8      	mov	r8, fp
 8007934:	2600      	movs	r6, #0
 8007936:	f1b8 0f00 	cmp.w	r8, #0
 800793a:	f280 80cf 	bge.w	8007adc <__kernel_rem_pio2+0x45c>
 800793e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80079a0 <__kernel_rem_pio2+0x320>
 8007942:	465f      	mov	r7, fp
 8007944:	f04f 0800 	mov.w	r8, #0
 8007948:	2f00      	cmp	r7, #0
 800794a:	f2c0 80fd 	blt.w	8007b48 <__kernel_rem_pio2+0x4c8>
 800794e:	ab70      	add	r3, sp, #448	; 0x1c0
 8007950:	f8df a074 	ldr.w	sl, [pc, #116]	; 80079c8 <__kernel_rem_pio2+0x348>
 8007954:	ec55 4b18 	vmov	r4, r5, d8
 8007958:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800795c:	2600      	movs	r6, #0
 800795e:	e0e5      	b.n	8007b2c <__kernel_rem_pio2+0x4ac>
 8007960:	2302      	movs	r3, #2
 8007962:	9302      	str	r3, [sp, #8]
 8007964:	e75c      	b.n	8007820 <__kernel_rem_pio2+0x1a0>
 8007966:	f8db 3000 	ldr.w	r3, [fp]
 800796a:	b955      	cbnz	r5, 8007982 <__kernel_rem_pio2+0x302>
 800796c:	b123      	cbz	r3, 8007978 <__kernel_rem_pio2+0x2f8>
 800796e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007972:	f8cb 3000 	str.w	r3, [fp]
 8007976:	2301      	movs	r3, #1
 8007978:	3201      	adds	r2, #1
 800797a:	f10b 0b04 	add.w	fp, fp, #4
 800797e:	461d      	mov	r5, r3
 8007980:	e755      	b.n	800782e <__kernel_rem_pio2+0x1ae>
 8007982:	1acb      	subs	r3, r1, r3
 8007984:	f8cb 3000 	str.w	r3, [fp]
 8007988:	462b      	mov	r3, r5
 800798a:	e7f5      	b.n	8007978 <__kernel_rem_pio2+0x2f8>
 800798c:	1e62      	subs	r2, r4, #1
 800798e:	ab0c      	add	r3, sp, #48	; 0x30
 8007990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007994:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007998:	a90c      	add	r1, sp, #48	; 0x30
 800799a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800799e:	e754      	b.n	800784a <__kernel_rem_pio2+0x1ca>
	...
 80079ac:	3ff00000 	.word	0x3ff00000
 80079b0:	080082b8 	.word	0x080082b8
 80079b4:	40200000 	.word	0x40200000
 80079b8:	3ff00000 	.word	0x3ff00000
 80079bc:	3e700000 	.word	0x3e700000
 80079c0:	41700000 	.word	0x41700000
 80079c4:	3fe00000 	.word	0x3fe00000
 80079c8:	08008278 	.word	0x08008278
 80079cc:	1e62      	subs	r2, r4, #1
 80079ce:	ab0c      	add	r3, sp, #48	; 0x30
 80079d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80079d8:	e7de      	b.n	8007998 <__kernel_rem_pio2+0x318>
 80079da:	a90c      	add	r1, sp, #48	; 0x30
 80079dc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80079e0:	3b01      	subs	r3, #1
 80079e2:	430a      	orrs	r2, r1
 80079e4:	e790      	b.n	8007908 <__kernel_rem_pio2+0x288>
 80079e6:	3301      	adds	r3, #1
 80079e8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80079ec:	2900      	cmp	r1, #0
 80079ee:	d0fa      	beq.n	80079e6 <__kernel_rem_pio2+0x366>
 80079f0:	9a08      	ldr	r2, [sp, #32]
 80079f2:	18e3      	adds	r3, r4, r3
 80079f4:	18a6      	adds	r6, r4, r2
 80079f6:	aa20      	add	r2, sp, #128	; 0x80
 80079f8:	1c65      	adds	r5, r4, #1
 80079fa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80079fe:	9302      	str	r3, [sp, #8]
 8007a00:	9b02      	ldr	r3, [sp, #8]
 8007a02:	42ab      	cmp	r3, r5
 8007a04:	da04      	bge.n	8007a10 <__kernel_rem_pio2+0x390>
 8007a06:	461c      	mov	r4, r3
 8007a08:	e6b5      	b.n	8007776 <__kernel_rem_pio2+0xf6>
 8007a0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e7eb      	b.n	80079e8 <__kernel_rem_pio2+0x368>
 8007a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a16:	f7f8 fd29 	bl	800046c <__aeabi_i2d>
 8007a1a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a20:	46b3      	mov	fp, r6
 8007a22:	461c      	mov	r4, r3
 8007a24:	2700      	movs	r7, #0
 8007a26:	f04f 0800 	mov.w	r8, #0
 8007a2a:	f04f 0900 	mov.w	r9, #0
 8007a2e:	9b06      	ldr	r3, [sp, #24]
 8007a30:	429f      	cmp	r7, r3
 8007a32:	dd06      	ble.n	8007a42 <__kernel_rem_pio2+0x3c2>
 8007a34:	ab70      	add	r3, sp, #448	; 0x1c0
 8007a36:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007a3a:	e9c3 8900 	strd	r8, r9, [r3]
 8007a3e:	3501      	adds	r5, #1
 8007a40:	e7de      	b.n	8007a00 <__kernel_rem_pio2+0x380>
 8007a42:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007a46:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007a4a:	f7f8 fd79 	bl	8000540 <__aeabi_dmul>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	460b      	mov	r3, r1
 8007a52:	4640      	mov	r0, r8
 8007a54:	4649      	mov	r1, r9
 8007a56:	f7f8 fbbd 	bl	80001d4 <__adddf3>
 8007a5a:	3701      	adds	r7, #1
 8007a5c:	4680      	mov	r8, r0
 8007a5e:	4689      	mov	r9, r1
 8007a60:	e7e5      	b.n	8007a2e <__kernel_rem_pio2+0x3ae>
 8007a62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a66:	e754      	b.n	8007912 <__kernel_rem_pio2+0x292>
 8007a68:	ec47 6b10 	vmov	d0, r6, r7
 8007a6c:	f1ca 0000 	rsb	r0, sl, #0
 8007a70:	f000 fa8e 	bl	8007f90 <scalbn>
 8007a74:	ec57 6b10 	vmov	r6, r7, d0
 8007a78:	4b9f      	ldr	r3, [pc, #636]	; (8007cf8 <__kernel_rem_pio2+0x678>)
 8007a7a:	ee10 0a10 	vmov	r0, s0
 8007a7e:	2200      	movs	r2, #0
 8007a80:	4639      	mov	r1, r7
 8007a82:	f7f8 ffe3 	bl	8000a4c <__aeabi_dcmpge>
 8007a86:	b300      	cbz	r0, 8007aca <__kernel_rem_pio2+0x44a>
 8007a88:	4b9c      	ldr	r3, [pc, #624]	; (8007cfc <__kernel_rem_pio2+0x67c>)
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	4639      	mov	r1, r7
 8007a90:	f7f8 fd56 	bl	8000540 <__aeabi_dmul>
 8007a94:	f7f8 ffee 	bl	8000a74 <__aeabi_d2iz>
 8007a98:	4605      	mov	r5, r0
 8007a9a:	f7f8 fce7 	bl	800046c <__aeabi_i2d>
 8007a9e:	4b96      	ldr	r3, [pc, #600]	; (8007cf8 <__kernel_rem_pio2+0x678>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f7f8 fd4d 	bl	8000540 <__aeabi_dmul>
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	4639      	mov	r1, r7
 8007aac:	4630      	mov	r0, r6
 8007aae:	f7f8 fb8f 	bl	80001d0 <__aeabi_dsub>
 8007ab2:	f7f8 ffdf 	bl	8000a74 <__aeabi_d2iz>
 8007ab6:	f104 0b01 	add.w	fp, r4, #1
 8007aba:	ab0c      	add	r3, sp, #48	; 0x30
 8007abc:	f10a 0a18 	add.w	sl, sl, #24
 8007ac0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007ac4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8007ac8:	e72b      	b.n	8007922 <__kernel_rem_pio2+0x2a2>
 8007aca:	4630      	mov	r0, r6
 8007acc:	4639      	mov	r1, r7
 8007ace:	f7f8 ffd1 	bl	8000a74 <__aeabi_d2iz>
 8007ad2:	ab0c      	add	r3, sp, #48	; 0x30
 8007ad4:	46a3      	mov	fp, r4
 8007ad6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007ada:	e722      	b.n	8007922 <__kernel_rem_pio2+0x2a2>
 8007adc:	ab70      	add	r3, sp, #448	; 0x1c0
 8007ade:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8007ae2:	ab0c      	add	r3, sp, #48	; 0x30
 8007ae4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007ae8:	f7f8 fcc0 	bl	800046c <__aeabi_i2d>
 8007aec:	4622      	mov	r2, r4
 8007aee:	462b      	mov	r3, r5
 8007af0:	f7f8 fd26 	bl	8000540 <__aeabi_dmul>
 8007af4:	4632      	mov	r2, r6
 8007af6:	e9c9 0100 	strd	r0, r1, [r9]
 8007afa:	463b      	mov	r3, r7
 8007afc:	4620      	mov	r0, r4
 8007afe:	4629      	mov	r1, r5
 8007b00:	f7f8 fd1e 	bl	8000540 <__aeabi_dmul>
 8007b04:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b08:	4604      	mov	r4, r0
 8007b0a:	460d      	mov	r5, r1
 8007b0c:	e713      	b.n	8007936 <__kernel_rem_pio2+0x2b6>
 8007b0e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007b12:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007b16:	f7f8 fd13 	bl	8000540 <__aeabi_dmul>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	4620      	mov	r0, r4
 8007b20:	4629      	mov	r1, r5
 8007b22:	f7f8 fb57 	bl	80001d4 <__adddf3>
 8007b26:	3601      	adds	r6, #1
 8007b28:	4604      	mov	r4, r0
 8007b2a:	460d      	mov	r5, r1
 8007b2c:	9b04      	ldr	r3, [sp, #16]
 8007b2e:	429e      	cmp	r6, r3
 8007b30:	dc01      	bgt.n	8007b36 <__kernel_rem_pio2+0x4b6>
 8007b32:	45b0      	cmp	r8, r6
 8007b34:	daeb      	bge.n	8007b0e <__kernel_rem_pio2+0x48e>
 8007b36:	ab48      	add	r3, sp, #288	; 0x120
 8007b38:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007b3c:	e9c3 4500 	strd	r4, r5, [r3]
 8007b40:	3f01      	subs	r7, #1
 8007b42:	f108 0801 	add.w	r8, r8, #1
 8007b46:	e6ff      	b.n	8007948 <__kernel_rem_pio2+0x2c8>
 8007b48:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	dc0b      	bgt.n	8007b66 <__kernel_rem_pio2+0x4e6>
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	dc6e      	bgt.n	8007c30 <__kernel_rem_pio2+0x5b0>
 8007b52:	d045      	beq.n	8007be0 <__kernel_rem_pio2+0x560>
 8007b54:	9b07      	ldr	r3, [sp, #28]
 8007b56:	f003 0007 	and.w	r0, r3, #7
 8007b5a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007b5e:	ecbd 8b02 	vpop	{d8}
 8007b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b66:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007b68:	2b03      	cmp	r3, #3
 8007b6a:	d1f3      	bne.n	8007b54 <__kernel_rem_pio2+0x4d4>
 8007b6c:	ab48      	add	r3, sp, #288	; 0x120
 8007b6e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8007b72:	46d0      	mov	r8, sl
 8007b74:	46d9      	mov	r9, fp
 8007b76:	f1b9 0f00 	cmp.w	r9, #0
 8007b7a:	f1a8 0808 	sub.w	r8, r8, #8
 8007b7e:	dc64      	bgt.n	8007c4a <__kernel_rem_pio2+0x5ca>
 8007b80:	465c      	mov	r4, fp
 8007b82:	2c01      	cmp	r4, #1
 8007b84:	f1aa 0a08 	sub.w	sl, sl, #8
 8007b88:	dc7e      	bgt.n	8007c88 <__kernel_rem_pio2+0x608>
 8007b8a:	2000      	movs	r0, #0
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	f1bb 0f01 	cmp.w	fp, #1
 8007b92:	f300 8097 	bgt.w	8007cc4 <__kernel_rem_pio2+0x644>
 8007b96:	9b02      	ldr	r3, [sp, #8]
 8007b98:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8007b9c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f040 8099 	bne.w	8007cd8 <__kernel_rem_pio2+0x658>
 8007ba6:	9b01      	ldr	r3, [sp, #4]
 8007ba8:	e9c3 5600 	strd	r5, r6, [r3]
 8007bac:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007bb0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007bb4:	e7ce      	b.n	8007b54 <__kernel_rem_pio2+0x4d4>
 8007bb6:	ab48      	add	r3, sp, #288	; 0x120
 8007bb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc0:	f7f8 fb08 	bl	80001d4 <__adddf3>
 8007bc4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007bc8:	f1bb 0f00 	cmp.w	fp, #0
 8007bcc:	daf3      	bge.n	8007bb6 <__kernel_rem_pio2+0x536>
 8007bce:	9b02      	ldr	r3, [sp, #8]
 8007bd0:	b113      	cbz	r3, 8007bd8 <__kernel_rem_pio2+0x558>
 8007bd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	9b01      	ldr	r3, [sp, #4]
 8007bda:	e9c3 0100 	strd	r0, r1, [r3]
 8007bde:	e7b9      	b.n	8007b54 <__kernel_rem_pio2+0x4d4>
 8007be0:	2000      	movs	r0, #0
 8007be2:	2100      	movs	r1, #0
 8007be4:	e7f0      	b.n	8007bc8 <__kernel_rem_pio2+0x548>
 8007be6:	ab48      	add	r3, sp, #288	; 0x120
 8007be8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf0:	f7f8 faf0 	bl	80001d4 <__adddf3>
 8007bf4:	3c01      	subs	r4, #1
 8007bf6:	2c00      	cmp	r4, #0
 8007bf8:	daf5      	bge.n	8007be6 <__kernel_rem_pio2+0x566>
 8007bfa:	9b02      	ldr	r3, [sp, #8]
 8007bfc:	b1e3      	cbz	r3, 8007c38 <__kernel_rem_pio2+0x5b8>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c04:	9c01      	ldr	r4, [sp, #4]
 8007c06:	e9c4 2300 	strd	r2, r3, [r4]
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007c12:	f7f8 fadd 	bl	80001d0 <__aeabi_dsub>
 8007c16:	ad4a      	add	r5, sp, #296	; 0x128
 8007c18:	2401      	movs	r4, #1
 8007c1a:	45a3      	cmp	fp, r4
 8007c1c:	da0f      	bge.n	8007c3e <__kernel_rem_pio2+0x5be>
 8007c1e:	9b02      	ldr	r3, [sp, #8]
 8007c20:	b113      	cbz	r3, 8007c28 <__kernel_rem_pio2+0x5a8>
 8007c22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c26:	4619      	mov	r1, r3
 8007c28:	9b01      	ldr	r3, [sp, #4]
 8007c2a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007c2e:	e791      	b.n	8007b54 <__kernel_rem_pio2+0x4d4>
 8007c30:	465c      	mov	r4, fp
 8007c32:	2000      	movs	r0, #0
 8007c34:	2100      	movs	r1, #0
 8007c36:	e7de      	b.n	8007bf6 <__kernel_rem_pio2+0x576>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	e7e2      	b.n	8007c04 <__kernel_rem_pio2+0x584>
 8007c3e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8007c42:	f7f8 fac7 	bl	80001d4 <__adddf3>
 8007c46:	3401      	adds	r4, #1
 8007c48:	e7e7      	b.n	8007c1a <__kernel_rem_pio2+0x59a>
 8007c4a:	e9d8 4500 	ldrd	r4, r5, [r8]
 8007c4e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8007c52:	4620      	mov	r0, r4
 8007c54:	4632      	mov	r2, r6
 8007c56:	463b      	mov	r3, r7
 8007c58:	4629      	mov	r1, r5
 8007c5a:	f7f8 fabb 	bl	80001d4 <__adddf3>
 8007c5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c62:	4602      	mov	r2, r0
 8007c64:	460b      	mov	r3, r1
 8007c66:	4620      	mov	r0, r4
 8007c68:	4629      	mov	r1, r5
 8007c6a:	f7f8 fab1 	bl	80001d0 <__aeabi_dsub>
 8007c6e:	4632      	mov	r2, r6
 8007c70:	463b      	mov	r3, r7
 8007c72:	f7f8 faaf 	bl	80001d4 <__adddf3>
 8007c76:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007c7a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8007c7e:	ed88 7b00 	vstr	d7, [r8]
 8007c82:	f109 39ff 	add.w	r9, r9, #4294967295
 8007c86:	e776      	b.n	8007b76 <__kernel_rem_pio2+0x4f6>
 8007c88:	e9da 8900 	ldrd	r8, r9, [sl]
 8007c8c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007c90:	4640      	mov	r0, r8
 8007c92:	4632      	mov	r2, r6
 8007c94:	463b      	mov	r3, r7
 8007c96:	4649      	mov	r1, r9
 8007c98:	f7f8 fa9c 	bl	80001d4 <__adddf3>
 8007c9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4640      	mov	r0, r8
 8007ca6:	4649      	mov	r1, r9
 8007ca8:	f7f8 fa92 	bl	80001d0 <__aeabi_dsub>
 8007cac:	4632      	mov	r2, r6
 8007cae:	463b      	mov	r3, r7
 8007cb0:	f7f8 fa90 	bl	80001d4 <__adddf3>
 8007cb4:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007cb8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007cbc:	ed8a 7b00 	vstr	d7, [sl]
 8007cc0:	3c01      	subs	r4, #1
 8007cc2:	e75e      	b.n	8007b82 <__kernel_rem_pio2+0x502>
 8007cc4:	ab48      	add	r3, sp, #288	; 0x120
 8007cc6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cce:	f7f8 fa81 	bl	80001d4 <__adddf3>
 8007cd2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007cd6:	e75a      	b.n	8007b8e <__kernel_rem_pio2+0x50e>
 8007cd8:	9b01      	ldr	r3, [sp, #4]
 8007cda:	9a01      	ldr	r2, [sp, #4]
 8007cdc:	601d      	str	r5, [r3, #0]
 8007cde:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007ce2:	605c      	str	r4, [r3, #4]
 8007ce4:	609f      	str	r7, [r3, #8]
 8007ce6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007cea:	60d3      	str	r3, [r2, #12]
 8007cec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cf0:	6110      	str	r0, [r2, #16]
 8007cf2:	6153      	str	r3, [r2, #20]
 8007cf4:	e72e      	b.n	8007b54 <__kernel_rem_pio2+0x4d4>
 8007cf6:	bf00      	nop
 8007cf8:	41700000 	.word	0x41700000
 8007cfc:	3e700000 	.word	0x3e700000

08007d00 <__kernel_sin>:
 8007d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d04:	ed2d 8b04 	vpush	{d8-d9}
 8007d08:	eeb0 8a41 	vmov.f32	s16, s2
 8007d0c:	eef0 8a61 	vmov.f32	s17, s3
 8007d10:	ec55 4b10 	vmov	r4, r5, d0
 8007d14:	b083      	sub	sp, #12
 8007d16:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007d1a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007d1e:	9001      	str	r0, [sp, #4]
 8007d20:	da06      	bge.n	8007d30 <__kernel_sin+0x30>
 8007d22:	ee10 0a10 	vmov	r0, s0
 8007d26:	4629      	mov	r1, r5
 8007d28:	f7f8 fea4 	bl	8000a74 <__aeabi_d2iz>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d051      	beq.n	8007dd4 <__kernel_sin+0xd4>
 8007d30:	4622      	mov	r2, r4
 8007d32:	462b      	mov	r3, r5
 8007d34:	4620      	mov	r0, r4
 8007d36:	4629      	mov	r1, r5
 8007d38:	f7f8 fc02 	bl	8000540 <__aeabi_dmul>
 8007d3c:	4682      	mov	sl, r0
 8007d3e:	468b      	mov	fp, r1
 8007d40:	4602      	mov	r2, r0
 8007d42:	460b      	mov	r3, r1
 8007d44:	4620      	mov	r0, r4
 8007d46:	4629      	mov	r1, r5
 8007d48:	f7f8 fbfa 	bl	8000540 <__aeabi_dmul>
 8007d4c:	a341      	add	r3, pc, #260	; (adr r3, 8007e54 <__kernel_sin+0x154>)
 8007d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d52:	4680      	mov	r8, r0
 8007d54:	4689      	mov	r9, r1
 8007d56:	4650      	mov	r0, sl
 8007d58:	4659      	mov	r1, fp
 8007d5a:	f7f8 fbf1 	bl	8000540 <__aeabi_dmul>
 8007d5e:	a33f      	add	r3, pc, #252	; (adr r3, 8007e5c <__kernel_sin+0x15c>)
 8007d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d64:	f7f8 fa34 	bl	80001d0 <__aeabi_dsub>
 8007d68:	4652      	mov	r2, sl
 8007d6a:	465b      	mov	r3, fp
 8007d6c:	f7f8 fbe8 	bl	8000540 <__aeabi_dmul>
 8007d70:	a33c      	add	r3, pc, #240	; (adr r3, 8007e64 <__kernel_sin+0x164>)
 8007d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d76:	f7f8 fa2d 	bl	80001d4 <__adddf3>
 8007d7a:	4652      	mov	r2, sl
 8007d7c:	465b      	mov	r3, fp
 8007d7e:	f7f8 fbdf 	bl	8000540 <__aeabi_dmul>
 8007d82:	a33a      	add	r3, pc, #232	; (adr r3, 8007e6c <__kernel_sin+0x16c>)
 8007d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d88:	f7f8 fa22 	bl	80001d0 <__aeabi_dsub>
 8007d8c:	4652      	mov	r2, sl
 8007d8e:	465b      	mov	r3, fp
 8007d90:	f7f8 fbd6 	bl	8000540 <__aeabi_dmul>
 8007d94:	a337      	add	r3, pc, #220	; (adr r3, 8007e74 <__kernel_sin+0x174>)
 8007d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9a:	f7f8 fa1b 	bl	80001d4 <__adddf3>
 8007d9e:	9b01      	ldr	r3, [sp, #4]
 8007da0:	4606      	mov	r6, r0
 8007da2:	460f      	mov	r7, r1
 8007da4:	b9eb      	cbnz	r3, 8007de2 <__kernel_sin+0xe2>
 8007da6:	4602      	mov	r2, r0
 8007da8:	460b      	mov	r3, r1
 8007daa:	4650      	mov	r0, sl
 8007dac:	4659      	mov	r1, fp
 8007dae:	f7f8 fbc7 	bl	8000540 <__aeabi_dmul>
 8007db2:	a325      	add	r3, pc, #148	; (adr r3, 8007e48 <__kernel_sin+0x148>)
 8007db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db8:	f7f8 fa0a 	bl	80001d0 <__aeabi_dsub>
 8007dbc:	4642      	mov	r2, r8
 8007dbe:	464b      	mov	r3, r9
 8007dc0:	f7f8 fbbe 	bl	8000540 <__aeabi_dmul>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	4620      	mov	r0, r4
 8007dca:	4629      	mov	r1, r5
 8007dcc:	f7f8 fa02 	bl	80001d4 <__adddf3>
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	460d      	mov	r5, r1
 8007dd4:	ec45 4b10 	vmov	d0, r4, r5
 8007dd8:	b003      	add	sp, #12
 8007dda:	ecbd 8b04 	vpop	{d8-d9}
 8007dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de2:	4b1b      	ldr	r3, [pc, #108]	; (8007e50 <__kernel_sin+0x150>)
 8007de4:	ec51 0b18 	vmov	r0, r1, d8
 8007de8:	2200      	movs	r2, #0
 8007dea:	f7f8 fba9 	bl	8000540 <__aeabi_dmul>
 8007dee:	4632      	mov	r2, r6
 8007df0:	ec41 0b19 	vmov	d9, r0, r1
 8007df4:	463b      	mov	r3, r7
 8007df6:	4640      	mov	r0, r8
 8007df8:	4649      	mov	r1, r9
 8007dfa:	f7f8 fba1 	bl	8000540 <__aeabi_dmul>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	460b      	mov	r3, r1
 8007e02:	ec51 0b19 	vmov	r0, r1, d9
 8007e06:	f7f8 f9e3 	bl	80001d0 <__aeabi_dsub>
 8007e0a:	4652      	mov	r2, sl
 8007e0c:	465b      	mov	r3, fp
 8007e0e:	f7f8 fb97 	bl	8000540 <__aeabi_dmul>
 8007e12:	ec53 2b18 	vmov	r2, r3, d8
 8007e16:	f7f8 f9db 	bl	80001d0 <__aeabi_dsub>
 8007e1a:	a30b      	add	r3, pc, #44	; (adr r3, 8007e48 <__kernel_sin+0x148>)
 8007e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e20:	4606      	mov	r6, r0
 8007e22:	460f      	mov	r7, r1
 8007e24:	4640      	mov	r0, r8
 8007e26:	4649      	mov	r1, r9
 8007e28:	f7f8 fb8a 	bl	8000540 <__aeabi_dmul>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	460b      	mov	r3, r1
 8007e30:	4630      	mov	r0, r6
 8007e32:	4639      	mov	r1, r7
 8007e34:	f7f8 f9ce 	bl	80001d4 <__adddf3>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	4629      	mov	r1, r5
 8007e40:	f7f8 f9c6 	bl	80001d0 <__aeabi_dsub>
 8007e44:	e7c4      	b.n	8007dd0 <__kernel_sin+0xd0>
 8007e46:	bf00      	nop
 8007e48:	55555549 	.word	0x55555549
 8007e4c:	3fc55555 	.word	0x3fc55555
 8007e50:	3fe00000 	.word	0x3fe00000
 8007e54:	5acfd57c 	.word	0x5acfd57c
 8007e58:	3de5d93a 	.word	0x3de5d93a
 8007e5c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007e60:	3e5ae5e6 	.word	0x3e5ae5e6
 8007e64:	57b1fe7d 	.word	0x57b1fe7d
 8007e68:	3ec71de3 	.word	0x3ec71de3
 8007e6c:	19c161d5 	.word	0x19c161d5
 8007e70:	3f2a01a0 	.word	0x3f2a01a0
 8007e74:	1110f8a6 	.word	0x1110f8a6
 8007e78:	3f811111 	.word	0x3f811111

08007e7c <fabs>:
 8007e7c:	ec51 0b10 	vmov	r0, r1, d0
 8007e80:	ee10 2a10 	vmov	r2, s0
 8007e84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007e88:	ec43 2b10 	vmov	d0, r2, r3
 8007e8c:	4770      	bx	lr
	...

08007e90 <floor>:
 8007e90:	ec51 0b10 	vmov	r0, r1, d0
 8007e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e98:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007e9c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007ea0:	2e13      	cmp	r6, #19
 8007ea2:	ee10 5a10 	vmov	r5, s0
 8007ea6:	ee10 8a10 	vmov	r8, s0
 8007eaa:	460c      	mov	r4, r1
 8007eac:	dc32      	bgt.n	8007f14 <floor+0x84>
 8007eae:	2e00      	cmp	r6, #0
 8007eb0:	da14      	bge.n	8007edc <floor+0x4c>
 8007eb2:	a333      	add	r3, pc, #204	; (adr r3, 8007f80 <floor+0xf0>)
 8007eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb8:	f7f8 f98c 	bl	80001d4 <__adddf3>
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	f7f8 fdce 	bl	8000a60 <__aeabi_dcmpgt>
 8007ec4:	b138      	cbz	r0, 8007ed6 <floor+0x46>
 8007ec6:	2c00      	cmp	r4, #0
 8007ec8:	da57      	bge.n	8007f7a <floor+0xea>
 8007eca:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007ece:	431d      	orrs	r5, r3
 8007ed0:	d001      	beq.n	8007ed6 <floor+0x46>
 8007ed2:	4c2d      	ldr	r4, [pc, #180]	; (8007f88 <floor+0xf8>)
 8007ed4:	2500      	movs	r5, #0
 8007ed6:	4621      	mov	r1, r4
 8007ed8:	4628      	mov	r0, r5
 8007eda:	e025      	b.n	8007f28 <floor+0x98>
 8007edc:	4f2b      	ldr	r7, [pc, #172]	; (8007f8c <floor+0xfc>)
 8007ede:	4137      	asrs	r7, r6
 8007ee0:	ea01 0307 	and.w	r3, r1, r7
 8007ee4:	4303      	orrs	r3, r0
 8007ee6:	d01f      	beq.n	8007f28 <floor+0x98>
 8007ee8:	a325      	add	r3, pc, #148	; (adr r3, 8007f80 <floor+0xf0>)
 8007eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eee:	f7f8 f971 	bl	80001d4 <__adddf3>
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	f7f8 fdb3 	bl	8000a60 <__aeabi_dcmpgt>
 8007efa:	2800      	cmp	r0, #0
 8007efc:	d0eb      	beq.n	8007ed6 <floor+0x46>
 8007efe:	2c00      	cmp	r4, #0
 8007f00:	bfbe      	ittt	lt
 8007f02:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007f06:	fa43 f606 	asrlt.w	r6, r3, r6
 8007f0a:	19a4      	addlt	r4, r4, r6
 8007f0c:	ea24 0407 	bic.w	r4, r4, r7
 8007f10:	2500      	movs	r5, #0
 8007f12:	e7e0      	b.n	8007ed6 <floor+0x46>
 8007f14:	2e33      	cmp	r6, #51	; 0x33
 8007f16:	dd0b      	ble.n	8007f30 <floor+0xa0>
 8007f18:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007f1c:	d104      	bne.n	8007f28 <floor+0x98>
 8007f1e:	ee10 2a10 	vmov	r2, s0
 8007f22:	460b      	mov	r3, r1
 8007f24:	f7f8 f956 	bl	80001d4 <__adddf3>
 8007f28:	ec41 0b10 	vmov	d0, r0, r1
 8007f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f30:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007f34:	f04f 33ff 	mov.w	r3, #4294967295
 8007f38:	fa23 f707 	lsr.w	r7, r3, r7
 8007f3c:	4207      	tst	r7, r0
 8007f3e:	d0f3      	beq.n	8007f28 <floor+0x98>
 8007f40:	a30f      	add	r3, pc, #60	; (adr r3, 8007f80 <floor+0xf0>)
 8007f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f46:	f7f8 f945 	bl	80001d4 <__adddf3>
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	f7f8 fd87 	bl	8000a60 <__aeabi_dcmpgt>
 8007f52:	2800      	cmp	r0, #0
 8007f54:	d0bf      	beq.n	8007ed6 <floor+0x46>
 8007f56:	2c00      	cmp	r4, #0
 8007f58:	da02      	bge.n	8007f60 <floor+0xd0>
 8007f5a:	2e14      	cmp	r6, #20
 8007f5c:	d103      	bne.n	8007f66 <floor+0xd6>
 8007f5e:	3401      	adds	r4, #1
 8007f60:	ea25 0507 	bic.w	r5, r5, r7
 8007f64:	e7b7      	b.n	8007ed6 <floor+0x46>
 8007f66:	2301      	movs	r3, #1
 8007f68:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007f6c:	fa03 f606 	lsl.w	r6, r3, r6
 8007f70:	4435      	add	r5, r6
 8007f72:	4545      	cmp	r5, r8
 8007f74:	bf38      	it	cc
 8007f76:	18e4      	addcc	r4, r4, r3
 8007f78:	e7f2      	b.n	8007f60 <floor+0xd0>
 8007f7a:	2500      	movs	r5, #0
 8007f7c:	462c      	mov	r4, r5
 8007f7e:	e7aa      	b.n	8007ed6 <floor+0x46>
 8007f80:	8800759c 	.word	0x8800759c
 8007f84:	7e37e43c 	.word	0x7e37e43c
 8007f88:	bff00000 	.word	0xbff00000
 8007f8c:	000fffff 	.word	0x000fffff

08007f90 <scalbn>:
 8007f90:	b570      	push	{r4, r5, r6, lr}
 8007f92:	ec55 4b10 	vmov	r4, r5, d0
 8007f96:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007f9a:	4606      	mov	r6, r0
 8007f9c:	462b      	mov	r3, r5
 8007f9e:	b99a      	cbnz	r2, 8007fc8 <scalbn+0x38>
 8007fa0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007fa4:	4323      	orrs	r3, r4
 8007fa6:	d036      	beq.n	8008016 <scalbn+0x86>
 8007fa8:	4b39      	ldr	r3, [pc, #228]	; (8008090 <scalbn+0x100>)
 8007faa:	4629      	mov	r1, r5
 8007fac:	ee10 0a10 	vmov	r0, s0
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f7f8 fac5 	bl	8000540 <__aeabi_dmul>
 8007fb6:	4b37      	ldr	r3, [pc, #220]	; (8008094 <scalbn+0x104>)
 8007fb8:	429e      	cmp	r6, r3
 8007fba:	4604      	mov	r4, r0
 8007fbc:	460d      	mov	r5, r1
 8007fbe:	da10      	bge.n	8007fe2 <scalbn+0x52>
 8007fc0:	a32b      	add	r3, pc, #172	; (adr r3, 8008070 <scalbn+0xe0>)
 8007fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc6:	e03a      	b.n	800803e <scalbn+0xae>
 8007fc8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007fcc:	428a      	cmp	r2, r1
 8007fce:	d10c      	bne.n	8007fea <scalbn+0x5a>
 8007fd0:	ee10 2a10 	vmov	r2, s0
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	4629      	mov	r1, r5
 8007fd8:	f7f8 f8fc 	bl	80001d4 <__adddf3>
 8007fdc:	4604      	mov	r4, r0
 8007fde:	460d      	mov	r5, r1
 8007fe0:	e019      	b.n	8008016 <scalbn+0x86>
 8007fe2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	3a36      	subs	r2, #54	; 0x36
 8007fea:	4432      	add	r2, r6
 8007fec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007ff0:	428a      	cmp	r2, r1
 8007ff2:	dd08      	ble.n	8008006 <scalbn+0x76>
 8007ff4:	2d00      	cmp	r5, #0
 8007ff6:	a120      	add	r1, pc, #128	; (adr r1, 8008078 <scalbn+0xe8>)
 8007ff8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ffc:	da1c      	bge.n	8008038 <scalbn+0xa8>
 8007ffe:	a120      	add	r1, pc, #128	; (adr r1, 8008080 <scalbn+0xf0>)
 8008000:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008004:	e018      	b.n	8008038 <scalbn+0xa8>
 8008006:	2a00      	cmp	r2, #0
 8008008:	dd08      	ble.n	800801c <scalbn+0x8c>
 800800a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800800e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008012:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008016:	ec45 4b10 	vmov	d0, r4, r5
 800801a:	bd70      	pop	{r4, r5, r6, pc}
 800801c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008020:	da19      	bge.n	8008056 <scalbn+0xc6>
 8008022:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008026:	429e      	cmp	r6, r3
 8008028:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800802c:	dd0a      	ble.n	8008044 <scalbn+0xb4>
 800802e:	a112      	add	r1, pc, #72	; (adr r1, 8008078 <scalbn+0xe8>)
 8008030:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1e2      	bne.n	8007ffe <scalbn+0x6e>
 8008038:	a30f      	add	r3, pc, #60	; (adr r3, 8008078 <scalbn+0xe8>)
 800803a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803e:	f7f8 fa7f 	bl	8000540 <__aeabi_dmul>
 8008042:	e7cb      	b.n	8007fdc <scalbn+0x4c>
 8008044:	a10a      	add	r1, pc, #40	; (adr r1, 8008070 <scalbn+0xe0>)
 8008046:	e9d1 0100 	ldrd	r0, r1, [r1]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d0b8      	beq.n	8007fc0 <scalbn+0x30>
 800804e:	a10e      	add	r1, pc, #56	; (adr r1, 8008088 <scalbn+0xf8>)
 8008050:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008054:	e7b4      	b.n	8007fc0 <scalbn+0x30>
 8008056:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800805a:	3236      	adds	r2, #54	; 0x36
 800805c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008060:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008064:	4620      	mov	r0, r4
 8008066:	4b0c      	ldr	r3, [pc, #48]	; (8008098 <scalbn+0x108>)
 8008068:	2200      	movs	r2, #0
 800806a:	e7e8      	b.n	800803e <scalbn+0xae>
 800806c:	f3af 8000 	nop.w
 8008070:	c2f8f359 	.word	0xc2f8f359
 8008074:	01a56e1f 	.word	0x01a56e1f
 8008078:	8800759c 	.word	0x8800759c
 800807c:	7e37e43c 	.word	0x7e37e43c
 8008080:	8800759c 	.word	0x8800759c
 8008084:	fe37e43c 	.word	0xfe37e43c
 8008088:	c2f8f359 	.word	0xc2f8f359
 800808c:	81a56e1f 	.word	0x81a56e1f
 8008090:	43500000 	.word	0x43500000
 8008094:	ffff3cb0 	.word	0xffff3cb0
 8008098:	3c900000 	.word	0x3c900000

0800809c <_init>:
 800809c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809e:	bf00      	nop
 80080a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080a2:	bc08      	pop	{r3}
 80080a4:	469e      	mov	lr, r3
 80080a6:	4770      	bx	lr

080080a8 <_fini>:
 80080a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080aa:	bf00      	nop
 80080ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ae:	bc08      	pop	{r3}
 80080b0:	469e      	mov	lr, r3
 80080b2:	4770      	bx	lr
