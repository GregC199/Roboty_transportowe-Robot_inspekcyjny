
Projekt_roboty_transportowe_sterujacy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008034  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  080081c0  080081c0  000181c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083d0  080083d0  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080083d0  080083d0  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080083d0  080083d0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083d0  080083d0  000183d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083d4  080083d4  000183d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080083d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000544  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000558  20000558  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001295a  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002726  00000000  00000000  0003299e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e08  00000000  00000000  000350c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d00  00000000  00000000  00035ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c3ad  00000000  00000000  00036bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000126f8  00000000  00000000  00052f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a6099  00000000  00000000  00065675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0010b70e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d84  00000000  00000000  0010b764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080081a4 	.word	0x080081a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	080081a4 	.word	0x080081a4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <motor_update_count>:
 *      Author: ciesl
 */
#include "MOT.h"

void motor_update_count(motor *m, TIM_HandleTypeDef *timer)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
	m->pulse_count = (int16_t)__HAL_TIM_GET_COUNTER(timer);
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	871a      	strh	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COUNTER(timer, 0);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <motor_calculate_speed>:
int16_t motor_calculate_speed(motor *m, TIM_HandleTypeDef *timer, int16_t timer_hz)
{
 8000b90:	b5b0      	push	{r4, r5, r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	80fb      	strh	r3, [r7, #6]
	motor_update_count(m,timer);
 8000b9e:	68b9      	ldr	r1, [r7, #8]
 8000ba0:	68f8      	ldr	r0, [r7, #12]
 8000ba2:	f7ff ffdf 	bl	8000b64 <motor_update_count>

	m->speedlist[m->iterator] = (int16_t) ( ((float) (m->pulse_count * timer_hz * SEC_IN_MIN)) / (m->resolution*MOT_RPM_TO_1000PROMILE) );
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8000bac:	461a      	mov	r2, r3
 8000bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bb2:	fb03 f302 	mul.w	r3, r3, r2
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fc58 	bl	800046c <__aeabi_i2d>
 8000bbc:	f04f 0200 	mov.w	r2, #0
 8000bc0:	4b3b      	ldr	r3, [pc, #236]	; (8000cb0 <motor_calculate_speed+0x120>)
 8000bc2:	f7ff fcbd 	bl	8000540 <__aeabi_dmul>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	460b      	mov	r3, r1
 8000bca:	4610      	mov	r0, r2
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f7ff ff79 	bl	8000ac4 <__aeabi_d2f>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fc5b 	bl	8000490 <__aeabi_f2d>
 8000bda:	4604      	mov	r4, r0
 8000bdc:	460d      	mov	r5, r1
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fc54 	bl	8000490 <__aeabi_f2d>
 8000be8:	a32f      	add	r3, pc, #188	; (adr r3, 8000ca8 <motor_calculate_speed+0x118>)
 8000bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bee:	f7ff fca7 	bl	8000540 <__aeabi_dmul>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	4620      	mov	r0, r4
 8000bf8:	4629      	mov	r1, r5
 8000bfa:	f7ff fdcb 	bl	8000794 <__aeabi_ddiv>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	460b      	mov	r3, r1
 8000c02:	4610      	mov	r0, r2
 8000c04:	4619      	mov	r1, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000c0c:	461c      	mov	r4, r3
 8000c0e:	f7ff ff31 	bl	8000a74 <__aeabi_d2iz>
 8000c12:	4603      	mov	r3, r0
 8000c14:	b219      	sxth	r1, r3
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	1d23      	adds	r3, r4, #4
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	4413      	add	r3, r2
 8000c1e:	460a      	mov	r2, r1
 8000c20:	805a      	strh	r2, [r3, #2]

	m->iterator++;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	b21a      	sxth	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	811a      	strh	r2, [r3, #8]

	if (m->iterator >= SMOOTHING) { m->iterator = 0; }
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000c3a:	2b13      	cmp	r3, #19
 8000c3c:	dd02      	ble.n	8000c44 <motor_calculate_speed+0xb4>
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	2200      	movs	r2, #0
 8000c42:	811a      	strh	r2, [r3, #8]

	m->speed = 0;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	2200      	movs	r2, #0
 8000c48:	875a      	strh	r2, [r3, #58]	; 0x3a

	for(int i=0; i<SMOOTHING;i++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	e013      	b.n	8000c78 <motor_calculate_speed+0xe8>
	{
		m->speed += m->speedlist[i];
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	68f9      	ldr	r1, [r7, #12]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	440b      	add	r3, r1
 8000c62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	4413      	add	r3, r2
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	b21a      	sxth	r2, r3
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	875a      	strh	r2, [r3, #58]	; 0x3a
	for(int i=0; i<SMOOTHING;i++)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3301      	adds	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	2b13      	cmp	r3, #19
 8000c7c:	dde8      	ble.n	8000c50 <motor_calculate_speed+0xc0>
	}

	if(m->DIRECTION == DIR_CCW)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d108      	bne.n	8000c9a <motor_calculate_speed+0x10a>
	{
		m->speed = -m->speed;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	425b      	negs	r3, r3
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	b21a      	sxth	r2, r3
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	875a      	strh	r2, [r3, #58]	; 0x3a
	}

	return m->speed;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ca8:	33333333 	.word	0x33333333
 8000cac:	3fd33333 	.word	0x3fd33333
 8000cb0:	404e0000 	.word	0x404e0000

08000cb4 <motor_init>:
void motor_init(motor *m, GPIO_TypeDef * DIR_GPIO_IN,uint16_t DIR_PIN_IN)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b087      	sub	sp, #28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	80fb      	strh	r3, [r7, #6]
	m->DIR_PIN = DIR_PIN_IN;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	88fa      	ldrh	r2, [r7, #6]
 8000cc6:	809a      	strh	r2, [r3, #4]

	m->DIR_GPIO = DIR_GPIO_IN;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	601a      	str	r2, [r3, #0]

	m->resolution = (ENCODER_RESOLUTION * TIMER_COUNTS * GEAR_RATIO);
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <motor_init+0x60>)
 8000cd2:	635a      	str	r2, [r3, #52]	; 0x34

	m->pulse_count = 0;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	871a      	strh	r2, [r3, #56]	; 0x38
	m->speed = 0;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	875a      	strh	r2, [r3, #58]	; 0x3a
	m->iterator = 0;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	811a      	strh	r2, [r3, #8]
	for(int i = 0; i<10;i++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	e009      	b.n	8000d00 <motor_init+0x4c>
	{
		m->speedlist[i] = 0;
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	4413      	add	r3, r2
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	805a      	strh	r2, [r3, #2]
	for(int i = 0; i<10;i++)
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	2b09      	cmp	r3, #9
 8000d04:	ddf2      	ble.n	8000cec <motor_init+0x38>
	}
}
 8000d06:	bf00      	nop
 8000d08:	bf00      	nop
 8000d0a:	371c      	adds	r7, #28
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	45e3d70a 	.word	0x45e3d70a

08000d18 <set_motor_dir>:
void set_motor_dir(motor *m, int16_t process)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	807b      	strh	r3, [r7, #2]
	if(process > 0)
 8000d24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	dd0b      	ble.n	8000d44 <set_motor_dir+0x2c>
	{
		HAL_GPIO_WritePin(m->DIR_GPIO, m->DIR_PIN, 0);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6818      	ldr	r0, [r3, #0]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	889b      	ldrh	r3, [r3, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	4619      	mov	r1, r3
 8000d38:	f002 fa80 	bl	800323c <HAL_GPIO_WritePin>
		m->DIRECTION = DIR_CW;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	80da      	strh	r2, [r3, #6]
	else if(process < 0)
	{
		HAL_GPIO_WritePin(m->DIR_GPIO, m->DIR_PIN, 1);
		m->DIRECTION = DIR_CCW;
	}
}
 8000d42:	e00e      	b.n	8000d62 <set_motor_dir+0x4a>
	else if(process < 0)
 8000d44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	da0a      	bge.n	8000d62 <set_motor_dir+0x4a>
		HAL_GPIO_WritePin(m->DIR_GPIO, m->DIR_PIN, 1);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6818      	ldr	r0, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	889b      	ldrh	r3, [r3, #4]
 8000d54:	2201      	movs	r2, #1
 8000d56:	4619      	mov	r1, r3
 8000d58:	f002 fa70 	bl	800323c <HAL_GPIO_WritePin>
		m->DIRECTION = DIR_CCW;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2201      	movs	r2, #1
 8000d60:	80da      	strh	r2, [r3, #6]
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <pid_init>:
 *  Created on: 6 kwi 2022
 *      Author: Grzegorz Cieslar
 */
#include "PID.h"

void pid_init(PID_t * pid, float p, float i, float d, float dt, int16_t power) {
 8000d6c:	b480      	push	{r7}
 8000d6e:	b087      	sub	sp, #28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6178      	str	r0, [r7, #20]
 8000d74:	ed87 0a04 	vstr	s0, [r7, #16]
 8000d78:	edc7 0a03 	vstr	s1, [r7, #12]
 8000d7c:	ed87 1a02 	vstr	s2, [r7, #8]
 8000d80:	edc7 1a01 	vstr	s3, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	807b      	strh	r3, [r7, #2]

	pid->p = p;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	601a      	str	r2, [r3, #0]
	pid->i = i;
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	605a      	str	r2, [r3, #4]
	pid->d = d;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	609a      	str	r2, [r3, #8]
	pid->p_val = 0.0;
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	f04f 0200 	mov.w	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
	pid->i_val = 0.0;
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	f04f 0200 	mov.w	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
	pid->d_val = 0.0;
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	f04f 0200 	mov.w	r2, #0
 8000db0:	615a      	str	r2, [r3, #20]

	pid->PID_max_val = FLOAT_MAX;
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	4a0f      	ldr	r2, [pc, #60]	; (8000df4 <pid_init+0x88>)
 8000db6:	619a      	str	r2, [r3, #24]
	pid->PID_min_val = FLOAT_MIN;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	4a0f      	ldr	r2, [pc, #60]	; (8000df8 <pid_init+0x8c>)
 8000dbc:	61da      	str	r2, [r3, #28]
	pid->total_max = FLOAT_MAX;
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	4a0c      	ldr	r2, [pc, #48]	; (8000df4 <pid_init+0x88>)
 8000dc2:	621a      	str	r2, [r3, #32]
	pid->total_min = FLOAT_MIN;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	4a0c      	ldr	r2, [pc, #48]	; (8000df8 <pid_init+0x8c>)
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24

	pid->e_last = 0.0;
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	f04f 0200 	mov.w	r2, #0
 8000dd0:	631a      	str	r2, [r3, #48]	; 0x30
	pid->sum = 0.0;
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	f04f 0200 	mov.w	r2, #0
 8000dd8:	635a      	str	r2, [r3, #52]	; 0x34

	pid->dt = dt;
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	63da      	str	r2, [r3, #60]	; 0x3c

	pid->power = power;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	887a      	ldrh	r2, [r7, #2]
 8000de4:	875a      	strh	r2, [r3, #58]	; 0x3a

}
 8000de6:	bf00      	nop
 8000de8:	371c      	adds	r7, #28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	49742400 	.word	0x49742400
 8000df8:	c9742400 	.word	0xc9742400

08000dfc <pid_calc>:

int16_t pid_calc(PID_t * pid, int16_t mv, int16_t dv) {
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	807b      	strh	r3, [r7, #2]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	803b      	strh	r3, [r7, #0]

	float p, i, d, e, total;

	//PID process variables
	pid->mv = (float)mv*pid->power;
 8000e0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e10:	ee07 3a90 	vmov	s15, r3
 8000e14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8000e1e:	ee07 3a90 	vmov	s15, r3
 8000e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	pid->dv = (float)dv*pid->power;
 8000e30:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000e34:	ee07 3a90 	vmov	s15, r3
 8000e38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8000e42:	ee07 3a90 	vmov	s15, r3
 8000e46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	//Error
	e = dv - mv;
 8000e54:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000e58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	ee07 3a90 	vmov	s15, r3
 8000e62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e66:	edc7 7a03 	vstr	s15, [r7, #12]

	//P
	p = e * pid->p;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	edd3 7a00 	vldr	s15, [r3]
 8000e70:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e78:	edc7 7a07 	vstr	s15, [r7, #28]
	if (p > pid->PID_max_val)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000e82:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e8e:	dd03      	ble.n	8000e98 <pid_calc+0x9c>
	p = pid->PID_max_val;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	61fb      	str	r3, [r7, #28]
 8000e96:	e00c      	b.n	8000eb2 <pid_calc+0xb6>
	else if (p < pid->PID_min_val)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	edd3 7a07 	vldr	s15, [r3, #28]
 8000e9e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ea2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eaa:	d502      	bpl.n	8000eb2 <pid_calc+0xb6>
	p = pid->PID_min_val;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	69db      	ldr	r3, [r3, #28]
 8000eb0:	61fb      	str	r3, [r7, #28]
	pid->p_val = p;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	69fa      	ldr	r2, [r7, #28]
 8000eb6:	60da      	str	r2, [r3, #12]

	//I
	i = pid->sum;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ebc:	61bb      	str	r3, [r7, #24]
	i += pid->dt * e / pid->i;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8000ec4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ec8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	ed93 7a01 	vldr	s14, [r3, #4]
 8000ed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ed6:	ed97 7a06 	vldr	s14, [r7, #24]
 8000eda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ede:	edc7 7a06 	vstr	s15, [r7, #24]
	if (i > pid->PID_max_val)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	edd3 7a06 	vldr	s15, [r3, #24]
 8000ee8:	ed97 7a06 	vldr	s14, [r7, #24]
 8000eec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef4:	dd03      	ble.n	8000efe <pid_calc+0x102>
	i = pid->PID_max_val;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	61bb      	str	r3, [r7, #24]
 8000efc:	e00c      	b.n	8000f18 <pid_calc+0x11c>
	else if (i < pid->PID_min_val)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f04:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f10:	d502      	bpl.n	8000f18 <pid_calc+0x11c>
	i = pid->PID_min_val;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	61bb      	str	r3, [r7, #24]
	pid->sum = i;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	635a      	str	r2, [r3, #52]	; 0x34

	//D
	d = ((e - pid->e_last) * pid->d)/pid->dt;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000f24:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f32:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8000f3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f40:	edc7 7a05 	vstr	s15, [r7, #20]
	if (d > pid->PID_max_val)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f4a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f56:	dd03      	ble.n	8000f60 <pid_calc+0x164>
	d = pid->PID_max_val;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	e00c      	b.n	8000f7a <pid_calc+0x17e>
	else if (d < pid->PID_min_val)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f66:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f72:	d502      	bpl.n	8000f7a <pid_calc+0x17e>
	d = pid->PID_min_val;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	617b      	str	r3, [r7, #20]
	pid->d_val = d;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	697a      	ldr	r2, [r7, #20]
 8000f7e:	615a      	str	r2, [r3, #20]

	//Total
	total = (p + i + d)/(float)pid->power;
 8000f80:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f84:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f90:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8000f9a:	ee07 3a90 	vmov	s15, r3
 8000f9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fa6:	edc7 7a04 	vstr	s15, [r7, #16]
	if (total > pid->total_max)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	edd3 7a08 	vldr	s15, [r3, #32]
 8000fb0:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbc:	dd03      	ble.n	8000fc6 <pid_calc+0x1ca>
	total = pid->total_max;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a1b      	ldr	r3, [r3, #32]
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	e00c      	b.n	8000fe0 <pid_calc+0x1e4>
	else if (total < pid->total_min)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000fcc:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd8:	d502      	bpl.n	8000fe0 <pid_calc+0x1e4>
	total = pid->total_min;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fde:	613b      	str	r3, [r7, #16]

	//Write computed variables
	pid->control = (int16_t)total;
 8000fe0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fe4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fe8:	ee17 3a90 	vmov	r3, s15
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	871a      	strh	r2, [r3, #56]	; 0x38
	pid->e_last = e;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	631a      	str	r2, [r3, #48]	; 0x30

	return pid->control;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3724      	adds	r7, #36	; 0x24
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <pid_scaling>:

void pid_scaling(PID_t* pid, float  pid_max, float pid_min, float total_max, float total_min)
{
 800100a:	b480      	push	{r7}
 800100c:	b087      	sub	sp, #28
 800100e:	af00      	add	r7, sp, #0
 8001010:	6178      	str	r0, [r7, #20]
 8001012:	ed87 0a04 	vstr	s0, [r7, #16]
 8001016:	edc7 0a03 	vstr	s1, [r7, #12]
 800101a:	ed87 1a02 	vstr	s2, [r7, #8]
 800101e:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->PID_max_val = pid_max*pid->power;
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8001028:	ee07 3a90 	vmov	s15, r3
 800102c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001030:	edd7 7a04 	vldr	s15, [r7, #16]
 8001034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->PID_min_val = pid_min*pid->power;
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8001044:	ee07 3a90 	vmov	s15, r3
 8001048:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800104c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	edc3 7a07 	vstr	s15, [r3, #28]
	pid->total_max = total_max;
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	621a      	str	r2, [r3, #32]
	pid->total_min = total_min;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001066:	bf00      	nop
 8001068:	371c      	adds	r7, #28
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800108a:	4b42      	ldr	r3, [pc, #264]	; (8001194 <MX_GPIO_Init+0x120>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	4a41      	ldr	r2, [pc, #260]	; (8001194 <MX_GPIO_Init+0x120>)
 8001090:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001094:	6153      	str	r3, [r2, #20]
 8001096:	4b3f      	ldr	r3, [pc, #252]	; (8001194 <MX_GPIO_Init+0x120>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	4b3c      	ldr	r3, [pc, #240]	; (8001194 <MX_GPIO_Init+0x120>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	4a3b      	ldr	r2, [pc, #236]	; (8001194 <MX_GPIO_Init+0x120>)
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	6153      	str	r3, [r2, #20]
 80010ae:	4b39      	ldr	r3, [pc, #228]	; (8001194 <MX_GPIO_Init+0x120>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	4b36      	ldr	r3, [pc, #216]	; (8001194 <MX_GPIO_Init+0x120>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	4a35      	ldr	r2, [pc, #212]	; (8001194 <MX_GPIO_Init+0x120>)
 80010c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c4:	6153      	str	r3, [r2, #20]
 80010c6:	4b33      	ldr	r3, [pc, #204]	; (8001194 <MX_GPIO_Init+0x120>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_PT_Pin|DIR_LT_Pin|DIR_SERWO_Pin|WYLACZNIK_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	f249 0130 	movw	r1, #36912	; 0x9030
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010dc:	f002 f8ae 	bl	800323c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_LP_Pin|DIR_PP_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2103      	movs	r1, #3
 80010e4:	482c      	ldr	r0, [pc, #176]	; (8001198 <MX_GPIO_Init+0x124>)
 80010e6:	f002 f8a9 	bl	800323c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STOP_AW_Pin;
 80010ea:	2302      	movs	r3, #2
 80010ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010ee:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80010f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(STOP_AW_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	4619      	mov	r1, r3
 80010fe:	4827      	ldr	r0, [pc, #156]	; (800119c <MX_GPIO_Init+0x128>)
 8001100:	f001 ff12 	bl	8002f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DIR_PT_Pin|DIR_LT_Pin|DIR_SERWO_Pin|WYLACZNIK_Pin;
 8001104:	f249 0330 	movw	r3, #36912	; 0x9030
 8001108:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	4619      	mov	r1, r3
 800111c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001120:	f001 ff02 	bl	8002f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIR_LP_Pin|DIR_PP_Pin;
 8001124:	2303      	movs	r3, #3
 8001126:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	4619      	mov	r1, r3
 800113a:	4817      	ldr	r0, [pc, #92]	; (8001198 <MX_GPIO_Init+0x124>)
 800113c:	f001 fef4 	bl	8002f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = KRANCOWKA_1_Pin|KRANCOWKA_2_Pin;
 8001140:	2318      	movs	r3, #24
 8001142:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001144:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001148:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	4619      	mov	r1, r3
 8001154:	4810      	ldr	r0, [pc, #64]	; (8001198 <MX_GPIO_Init+0x124>)
 8001156:	f001 fee7 	bl	8002f28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	2007      	movs	r0, #7
 8001160:	f001 fe35 	bl	8002dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001164:	2007      	movs	r0, #7
 8001166:	f001 fe4e 	bl	8002e06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	2009      	movs	r0, #9
 8001170:	f001 fe2d 	bl	8002dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001174:	2009      	movs	r0, #9
 8001176:	f001 fe46 	bl	8002e06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	2100      	movs	r1, #0
 800117e:	200a      	movs	r0, #10
 8001180:	f001 fe25 	bl	8002dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001184:	200a      	movs	r0, #10
 8001186:	f001 fe3e 	bl	8002e06 <HAL_NVIC_EnableIRQ>

}
 800118a:	bf00      	nop
 800118c:	3720      	adds	r7, #32
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000
 8001198:	48000400 	.word	0x48000400
 800119c:	48001400 	.word	0x48001400

080011a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a4:	f001 fcd2 	bl	8002b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a8:	f000 fcfe 	bl	8001ba8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ac:	f7ff ff62 	bl	8001074 <MX_GPIO_Init>
  MX_TIM7_Init();
 80011b0:	f001 f9b4 	bl	800251c <MX_TIM7_Init>
  MX_TIM3_Init();
 80011b4:	f001 f924 	bl	8002400 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80011b8:	f001 fbba 	bl	8002930 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80011bc:	f001 f818 	bl	80021f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80011c0:	f001 f8ca 	bl	8002358 <MX_TIM2_Init>
  MX_TIM6_Init();
 80011c4:	f001 f972 	bl	80024ac <MX_TIM6_Init>
  MX_TIM17_Init();
 80011c8:	f001 f9e0 	bl	800258c <MX_TIM17_Init>
  MX_USART2_UART_Init();
 80011cc:	f001 fbe0 	bl	8002990 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //INIT komunikacji ze zdalna aparatura
  //ibus_init();

  //timery dla PID i komunikacji z PC
  HAL_TIM_Base_Start_IT(PID_TIMER);
 80011d0:	48b1      	ldr	r0, [pc, #708]	; (8001498 <main+0x2f8>)
 80011d2:	f003 fb21 	bl	8004818 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(COMM_TIMER);
 80011d6:	48b1      	ldr	r0, [pc, #708]	; (800149c <main+0x2fc>)
 80011d8:	f003 fb1e 	bl	8004818 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(ENCODER_LEWY, TIM_CHANNEL_ALL);
 80011dc:	213c      	movs	r1, #60	; 0x3c
 80011de:	48b0      	ldr	r0, [pc, #704]	; (80014a0 <main+0x300>)
 80011e0:	f003 fd60 	bl	8004ca4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(ENCODER_PRAWY, TIM_CHANNEL_ALL);
 80011e4:	213c      	movs	r1, #60	; 0x3c
 80011e6:	48af      	ldr	r0, [pc, #700]	; (80014a4 <main+0x304>)
 80011e8:	f003 fd5c 	bl	8004ca4 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(PWM_TIMER_SILNIKI, TIM_CHANNEL_1);
 80011ec:	2100      	movs	r1, #0
 80011ee:	48ae      	ldr	r0, [pc, #696]	; (80014a8 <main+0x308>)
 80011f0:	f003 fbc6 	bl	8004980 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(PWM_TIMER_SILNIKI, TIM_CHANNEL_2);
 80011f4:	2104      	movs	r1, #4
 80011f6:	48ac      	ldr	r0, [pc, #688]	; (80014a8 <main+0x308>)
 80011f8:	f003 fbc2 	bl	8004980 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(PWM_TIMER_SILNIKI, TIM_CHANNEL_3);
 80011fc:	2108      	movs	r1, #8
 80011fe:	48aa      	ldr	r0, [pc, #680]	; (80014a8 <main+0x308>)
 8001200:	f003 fbbe 	bl	8004980 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(PWM_TIMER_SILNIKI, TIM_CHANNEL_4);
 8001204:	210c      	movs	r1, #12
 8001206:	48a8      	ldr	r0, [pc, #672]	; (80014a8 <main+0x308>)
 8001208:	f003 fbba 	bl	8004980 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(PWM_TIMER_SERWO, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	48a7      	ldr	r0, [pc, #668]	; (80014ac <main+0x30c>)
 8001210:	f003 fbb6 	bl	8004980 <HAL_TIM_PWM_Start>
  __HAL_UART_ENABLE_IT(MCU_UART, UART_IT_RXNE);  // Interrupt Enable
 8001214:	4ba6      	ldr	r3, [pc, #664]	; (80014b0 <main+0x310>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	4ba5      	ldr	r3, [pc, #660]	; (80014b0 <main+0x310>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f042 0220 	orr.w	r2, r2, #32
 8001222:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(MCU_UART, UART_IT_TC);
 8001224:	4ba2      	ldr	r3, [pc, #648]	; (80014b0 <main+0x310>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4ba1      	ldr	r3, [pc, #644]	; (80014b0 <main+0x310>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001232:	601a      	str	r2, [r3, #0]

  //Pid inicjalizacja
  ms = 1.0/(PID_HZ);
 8001234:	4b9f      	ldr	r3, [pc, #636]	; (80014b4 <main+0x314>)
 8001236:	4aa0      	ldr	r2, [pc, #640]	; (80014b8 <main+0x318>)
 8001238:	601a      	str	r2, [r3, #0]
  pid_init(&Pid_tyl_lewy, KP, TI, TD, ms,PID_POWER);
 800123a:	4b9e      	ldr	r3, [pc, #632]	; (80014b4 <main+0x314>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	2101      	movs	r1, #1
 8001242:	eef0 1a67 	vmov.f32	s3, s15
 8001246:	ed9f 1a9d 	vldr	s2, [pc, #628]	; 80014bc <main+0x31c>
 800124a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800124e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001252:	489b      	ldr	r0, [pc, #620]	; (80014c0 <main+0x320>)
 8001254:	f7ff fd8a 	bl	8000d6c <pid_init>
  pid_scaling(&Pid_tyl_lewy, Counter_20kHz_360, -Counter_20kHz_360, Counter_20kHz_360, -Counter_20kHz_360);
 8001258:	eddf 1a9a 	vldr	s3, [pc, #616]	; 80014c4 <main+0x324>
 800125c:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 80014c8 <main+0x328>
 8001260:	eddf 0a98 	vldr	s1, [pc, #608]	; 80014c4 <main+0x324>
 8001264:	ed9f 0a98 	vldr	s0, [pc, #608]	; 80014c8 <main+0x328>
 8001268:	4895      	ldr	r0, [pc, #596]	; (80014c0 <main+0x320>)
 800126a:	f7ff fece 	bl	800100a <pid_scaling>
  pid_init(&Pid_tyl_prawy, KP, TI, TD, ms,PID_POWER);
 800126e:	4b91      	ldr	r3, [pc, #580]	; (80014b4 <main+0x314>)
 8001270:	edd3 7a00 	vldr	s15, [r3]
 8001274:	2101      	movs	r1, #1
 8001276:	eef0 1a67 	vmov.f32	s3, s15
 800127a:	ed9f 1a90 	vldr	s2, [pc, #576]	; 80014bc <main+0x31c>
 800127e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001282:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001286:	4891      	ldr	r0, [pc, #580]	; (80014cc <main+0x32c>)
 8001288:	f7ff fd70 	bl	8000d6c <pid_init>
  pid_scaling(&Pid_tyl_prawy, Counter_20kHz_360, -Counter_20kHz_360, Counter_20kHz_360, -Counter_20kHz_360);
 800128c:	eddf 1a8d 	vldr	s3, [pc, #564]	; 80014c4 <main+0x324>
 8001290:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 80014c8 <main+0x328>
 8001294:	eddf 0a8b 	vldr	s1, [pc, #556]	; 80014c4 <main+0x324>
 8001298:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 80014c8 <main+0x328>
 800129c:	488b      	ldr	r0, [pc, #556]	; (80014cc <main+0x32c>)
 800129e:	f7ff feb4 	bl	800100a <pid_scaling>
  pid_init(&Pid_przod_lewy, KP, TI, TD, ms,PID_POWER);
 80012a2:	4b84      	ldr	r3, [pc, #528]	; (80014b4 <main+0x314>)
 80012a4:	edd3 7a00 	vldr	s15, [r3]
 80012a8:	2101      	movs	r1, #1
 80012aa:	eef0 1a67 	vmov.f32	s3, s15
 80012ae:	ed9f 1a83 	vldr	s2, [pc, #524]	; 80014bc <main+0x31c>
 80012b2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80012b6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80012ba:	4885      	ldr	r0, [pc, #532]	; (80014d0 <main+0x330>)
 80012bc:	f7ff fd56 	bl	8000d6c <pid_init>
  pid_scaling(&Pid_przod_lewy, Counter_20kHz_360, -Counter_20kHz_360, Counter_20kHz_360, -Counter_20kHz_360);
 80012c0:	eddf 1a80 	vldr	s3, [pc, #512]	; 80014c4 <main+0x324>
 80012c4:	ed9f 1a80 	vldr	s2, [pc, #512]	; 80014c8 <main+0x328>
 80012c8:	eddf 0a7e 	vldr	s1, [pc, #504]	; 80014c4 <main+0x324>
 80012cc:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 80014c8 <main+0x328>
 80012d0:	487f      	ldr	r0, [pc, #508]	; (80014d0 <main+0x330>)
 80012d2:	f7ff fe9a 	bl	800100a <pid_scaling>
  pid_init(&Pid_przod_prawy, KP, TI, TD, ms,PID_POWER);
 80012d6:	4b77      	ldr	r3, [pc, #476]	; (80014b4 <main+0x314>)
 80012d8:	edd3 7a00 	vldr	s15, [r3]
 80012dc:	2101      	movs	r1, #1
 80012de:	eef0 1a67 	vmov.f32	s3, s15
 80012e2:	ed9f 1a76 	vldr	s2, [pc, #472]	; 80014bc <main+0x31c>
 80012e6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80012ea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80012ee:	4879      	ldr	r0, [pc, #484]	; (80014d4 <main+0x334>)
 80012f0:	f7ff fd3c 	bl	8000d6c <pid_init>
  pid_scaling(&Pid_przod_prawy, Counter_20kHz_360, -Counter_20kHz_360, Counter_20kHz_360, -Counter_20kHz_360);
 80012f4:	eddf 1a73 	vldr	s3, [pc, #460]	; 80014c4 <main+0x324>
 80012f8:	ed9f 1a73 	vldr	s2, [pc, #460]	; 80014c8 <main+0x328>
 80012fc:	eddf 0a71 	vldr	s1, [pc, #452]	; 80014c4 <main+0x324>
 8001300:	ed9f 0a71 	vldr	s0, [pc, #452]	; 80014c8 <main+0x328>
 8001304:	4873      	ldr	r0, [pc, #460]	; (80014d4 <main+0x334>)
 8001306:	f7ff fe80 	bl	800100a <pid_scaling>

  //Motor inicjalizacja
  motor_init(&mot_tyl_lewy,DIR_LT_GPIO_Port,DIR_LT_Pin);
 800130a:	2220      	movs	r2, #32
 800130c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001310:	4871      	ldr	r0, [pc, #452]	; (80014d8 <main+0x338>)
 8001312:	f7ff fccf 	bl	8000cb4 <motor_init>
  motor_init(&mot_tyl_prawy,DIR_PT_GPIO_Port,DIR_PT_Pin);
 8001316:	2210      	movs	r2, #16
 8001318:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800131c:	486f      	ldr	r0, [pc, #444]	; (80014dc <main+0x33c>)
 800131e:	f7ff fcc9 	bl	8000cb4 <motor_init>
  motor_init(&mot_przod_lewy,DIR_LP_GPIO_Port,DIR_LP_Pin);
 8001322:	2201      	movs	r2, #1
 8001324:	496e      	ldr	r1, [pc, #440]	; (80014e0 <main+0x340>)
 8001326:	486f      	ldr	r0, [pc, #444]	; (80014e4 <main+0x344>)
 8001328:	f7ff fcc4 	bl	8000cb4 <motor_init>
  motor_init(&mot_przod_prawy,DIR_PP_GPIO_Port,DIR_PP_Pin);
 800132c:	2202      	movs	r2, #2
 800132e:	496c      	ldr	r1, [pc, #432]	; (80014e0 <main+0x340>)
 8001330:	486d      	ldr	r0, [pc, #436]	; (80014e8 <main+0x348>)
 8001332:	f7ff fcbf 	bl	8000cb4 <motor_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(PID_flaga == 1){
 8001336:	4b6d      	ldr	r3, [pc, #436]	; (80014ec <main+0x34c>)
 8001338:	f993 3000 	ldrsb.w	r3, [r3]
 800133c:	2b01      	cmp	r3, #1
 800133e:	f040 818c 	bne.w	800165a <main+0x4ba>

		  PID_flaga = 0;
 8001342:	4b6a      	ldr	r3, [pc, #424]	; (80014ec <main+0x34c>)
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]

		  //LEWE TYL - PID OBLICZA NAWET W TRYBIE MANUALNYM
		  pomiar_tyl_lewy = to_process_range(motor_calculate_speed(&mot_tyl_lewy, ENCODER_LEWY, PID_HZ));
 8001348:	220a      	movs	r2, #10
 800134a:	4955      	ldr	r1, [pc, #340]	; (80014a0 <main+0x300>)
 800134c:	4862      	ldr	r0, [pc, #392]	; (80014d8 <main+0x338>)
 800134e:	f7ff fc1f 	bl	8000b90 <motor_calculate_speed>
 8001352:	4603      	mov	r3, r0
 8001354:	4618      	mov	r0, r3
 8001356:	f000 fcb1 	bl	8001cbc <to_process_range>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	4b64      	ldr	r3, [pc, #400]	; (80014f0 <main+0x350>)
 8001360:	801a      	strh	r2, [r3, #0]
		  sterowanie_tyl_lewy = pid_calc(&Pid_tyl_lewy, pomiar_tyl_lewy, setpoint_tyl_lewy);
 8001362:	4b63      	ldr	r3, [pc, #396]	; (80014f0 <main+0x350>)
 8001364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001368:	4a62      	ldr	r2, [pc, #392]	; (80014f4 <main+0x354>)
 800136a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800136e:	4619      	mov	r1, r3
 8001370:	4853      	ldr	r0, [pc, #332]	; (80014c0 <main+0x320>)
 8001372:	f7ff fd43 	bl	8000dfc <pid_calc>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	4b5f      	ldr	r3, [pc, #380]	; (80014f8 <main+0x358>)
 800137c:	801a      	strh	r2, [r3, #0]

		  //PRZOD
		  sterowanie_przod_lewy = pid_calc(&Pid_przod_lewy, pomiar_przod_lewy, setpoint_przod_lewy);
 800137e:	4b5f      	ldr	r3, [pc, #380]	; (80014fc <main+0x35c>)
 8001380:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001384:	4a5e      	ldr	r2, [pc, #376]	; (8001500 <main+0x360>)
 8001386:	f9b2 2000 	ldrsh.w	r2, [r2]
 800138a:	4619      	mov	r1, r3
 800138c:	4850      	ldr	r0, [pc, #320]	; (80014d0 <main+0x330>)
 800138e:	f7ff fd35 	bl	8000dfc <pid_calc>
 8001392:	4603      	mov	r3, r0
 8001394:	461a      	mov	r2, r3
 8001396:	4b5b      	ldr	r3, [pc, #364]	; (8001504 <main+0x364>)
 8001398:	801a      	strh	r2, [r3, #0]

		  //PRAWE TYL
		  pomiar_tyl_prawy = to_process_range(motor_calculate_speed(&mot_tyl_prawy, ENCODER_PRAWY, PID_HZ));
 800139a:	220a      	movs	r2, #10
 800139c:	4941      	ldr	r1, [pc, #260]	; (80014a4 <main+0x304>)
 800139e:	484f      	ldr	r0, [pc, #316]	; (80014dc <main+0x33c>)
 80013a0:	f7ff fbf6 	bl	8000b90 <motor_calculate_speed>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 fc88 	bl	8001cbc <to_process_range>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b55      	ldr	r3, [pc, #340]	; (8001508 <main+0x368>)
 80013b2:	801a      	strh	r2, [r3, #0]
		  sterowanie_tyl_prawy = pid_calc(&Pid_tyl_prawy, pomiar_tyl_prawy, setpoint_tyl_prawy);
 80013b4:	4b54      	ldr	r3, [pc, #336]	; (8001508 <main+0x368>)
 80013b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ba:	4a54      	ldr	r2, [pc, #336]	; (800150c <main+0x36c>)
 80013bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80013c0:	4619      	mov	r1, r3
 80013c2:	4842      	ldr	r0, [pc, #264]	; (80014cc <main+0x32c>)
 80013c4:	f7ff fd1a 	bl	8000dfc <pid_calc>
 80013c8:	4603      	mov	r3, r0
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b50      	ldr	r3, [pc, #320]	; (8001510 <main+0x370>)
 80013ce:	801a      	strh	r2, [r3, #0]

		  //PRZOD
		  sterowanie_przod_prawy = pid_calc(&Pid_przod_prawy, pomiar_przod_prawy, setpoint_przod_prawy);
 80013d0:	4b50      	ldr	r3, [pc, #320]	; (8001514 <main+0x374>)
 80013d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d6:	4a50      	ldr	r2, [pc, #320]	; (8001518 <main+0x378>)
 80013d8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80013dc:	4619      	mov	r1, r3
 80013de:	483d      	ldr	r0, [pc, #244]	; (80014d4 <main+0x334>)
 80013e0:	f7ff fd0c 	bl	8000dfc <pid_calc>
 80013e4:	4603      	mov	r3, r0
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b4c      	ldr	r3, [pc, #304]	; (800151c <main+0x37c>)
 80013ea:	801a      	strh	r2, [r3, #0]

		  //STEROWANIE DLA TRYBU AUTOMATYCZNEGO
		  //if(MA == 1){  TU I NA KONCU ZAKOMENTOWANE
		  if (I1_V != 0){
 80013ec:	4b4c      	ldr	r3, [pc, #304]	; (8001520 <main+0x380>)
 80013ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 8111 	beq.w	800161a <main+0x47a>

			  if(sterowanie_tyl_lewy > I4_Vmax){
 80013f8:	4b3f      	ldr	r3, [pc, #252]	; (80014f8 <main+0x358>)
 80013fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013fe:	4b49      	ldr	r3, [pc, #292]	; (8001524 <main+0x384>)
 8001400:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001404:	429a      	cmp	r2, r3
 8001406:	dd05      	ble.n	8001414 <main+0x274>
				  sterowanie_tyl_lewy = I4_Vmax;
 8001408:	4b46      	ldr	r3, [pc, #280]	; (8001524 <main+0x384>)
 800140a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800140e:	4b3a      	ldr	r3, [pc, #232]	; (80014f8 <main+0x358>)
 8001410:	801a      	strh	r2, [r3, #0]
 8001412:	e012      	b.n	800143a <main+0x29a>

			  }
			  else if(sterowanie_tyl_lewy < -I4_Vmax){
 8001414:	4b38      	ldr	r3, [pc, #224]	; (80014f8 <main+0x358>)
 8001416:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141a:	461a      	mov	r2, r3
 800141c:	4b41      	ldr	r3, [pc, #260]	; (8001524 <main+0x384>)
 800141e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001422:	425b      	negs	r3, r3
 8001424:	429a      	cmp	r2, r3
 8001426:	da08      	bge.n	800143a <main+0x29a>
				  sterowanie_tyl_lewy = -I4_Vmax;
 8001428:	4b3e      	ldr	r3, [pc, #248]	; (8001524 <main+0x384>)
 800142a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142e:	b29b      	uxth	r3, r3
 8001430:	425b      	negs	r3, r3
 8001432:	b29b      	uxth	r3, r3
 8001434:	b21a      	sxth	r2, r3
 8001436:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <main+0x358>)
 8001438:	801a      	strh	r2, [r3, #0]
			  }
			  if(sterowanie_tyl_prawy > I4_Vmax){
 800143a:	4b35      	ldr	r3, [pc, #212]	; (8001510 <main+0x370>)
 800143c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001440:	4b38      	ldr	r3, [pc, #224]	; (8001524 <main+0x384>)
 8001442:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001446:	429a      	cmp	r2, r3
 8001448:	dd05      	ble.n	8001456 <main+0x2b6>
				  sterowanie_tyl_prawy = I4_Vmax;
 800144a:	4b36      	ldr	r3, [pc, #216]	; (8001524 <main+0x384>)
 800144c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001450:	4b2f      	ldr	r3, [pc, #188]	; (8001510 <main+0x370>)
 8001452:	801a      	strh	r2, [r3, #0]
 8001454:	e012      	b.n	800147c <main+0x2dc>

			  }
			  else if(sterowanie_tyl_prawy < -I4_Vmax){
 8001456:	4b2e      	ldr	r3, [pc, #184]	; (8001510 <main+0x370>)
 8001458:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145c:	461a      	mov	r2, r3
 800145e:	4b31      	ldr	r3, [pc, #196]	; (8001524 <main+0x384>)
 8001460:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001464:	425b      	negs	r3, r3
 8001466:	429a      	cmp	r2, r3
 8001468:	da08      	bge.n	800147c <main+0x2dc>
				  sterowanie_tyl_prawy = -I4_Vmax;
 800146a:	4b2e      	ldr	r3, [pc, #184]	; (8001524 <main+0x384>)
 800146c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001470:	b29b      	uxth	r3, r3
 8001472:	425b      	negs	r3, r3
 8001474:	b29b      	uxth	r3, r3
 8001476:	b21a      	sxth	r2, r3
 8001478:	4b25      	ldr	r3, [pc, #148]	; (8001510 <main+0x370>)
 800147a:	801a      	strh	r2, [r3, #0]
			  }

			  if(sterowanie_przod_lewy > I4_Vmax){
 800147c:	4b21      	ldr	r3, [pc, #132]	; (8001504 <main+0x364>)
 800147e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001482:	4b28      	ldr	r3, [pc, #160]	; (8001524 <main+0x384>)
 8001484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001488:	429a      	cmp	r2, r3
 800148a:	dd4d      	ble.n	8001528 <main+0x388>
				  sterowanie_przod_lewy = I4_Vmax;
 800148c:	4b25      	ldr	r3, [pc, #148]	; (8001524 <main+0x384>)
 800148e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001492:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <main+0x364>)
 8001494:	801a      	strh	r2, [r3, #0]
 8001496:	e05a      	b.n	800154e <main+0x3ae>
 8001498:	2000031c 	.word	0x2000031c
 800149c:	20000400 	.word	0x20000400
 80014a0:	200003b4 	.word	0x200003b4
 80014a4:	200002d0 	.word	0x200002d0
 80014a8:	20000368 	.word	0x20000368
 80014ac:	20000284 	.word	0x20000284
 80014b0:	2000044c 	.word	0x2000044c
 80014b4:	20000004 	.word	0x20000004
 80014b8:	3dcccccd 	.word	0x3dcccccd
 80014bc:	00000000 	.word	0x00000000
 80014c0:	200001c0 	.word	0x200001c0
 80014c4:	c3b38000 	.word	0xc3b38000
 80014c8:	43b38000 	.word	0x43b38000
 80014cc:	20000160 	.word	0x20000160
 80014d0:	200000e4 	.word	0x200000e4
 80014d4:	20000200 	.word	0x20000200
 80014d8:	20000244 	.word	0x20000244
 80014dc:	20000124 	.word	0x20000124
 80014e0:	48000400 	.word	0x48000400
 80014e4:	200000a8 	.word	0x200000a8
 80014e8:	2000005c 	.word	0x2000005c
 80014ec:	20000033 	.word	0x20000033
 80014f0:	2000003e 	.word	0x2000003e
 80014f4:	20000042 	.word	0x20000042
 80014f8:	2000003a 	.word	0x2000003a
 80014fc:	2000004a 	.word	0x2000004a
 8001500:	2000004e 	.word	0x2000004e
 8001504:	20000046 	.word	0x20000046
 8001508:	20000040 	.word	0x20000040
 800150c:	20000044 	.word	0x20000044
 8001510:	2000003c 	.word	0x2000003c
 8001514:	2000004c 	.word	0x2000004c
 8001518:	20000050 	.word	0x20000050
 800151c:	20000048 	.word	0x20000048
 8001520:	20000052 	.word	0x20000052
 8001524:	20000056 	.word	0x20000056

			  }
			  else if(sterowanie_przod_lewy < -I4_Vmax){
 8001528:	4b6b      	ldr	r3, [pc, #428]	; (80016d8 <main+0x538>)
 800152a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152e:	461a      	mov	r2, r3
 8001530:	4b6a      	ldr	r3, [pc, #424]	; (80016dc <main+0x53c>)
 8001532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001536:	425b      	negs	r3, r3
 8001538:	429a      	cmp	r2, r3
 800153a:	da08      	bge.n	800154e <main+0x3ae>
				  sterowanie_przod_lewy = -I4_Vmax;
 800153c:	4b67      	ldr	r3, [pc, #412]	; (80016dc <main+0x53c>)
 800153e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001542:	b29b      	uxth	r3, r3
 8001544:	425b      	negs	r3, r3
 8001546:	b29b      	uxth	r3, r3
 8001548:	b21a      	sxth	r2, r3
 800154a:	4b63      	ldr	r3, [pc, #396]	; (80016d8 <main+0x538>)
 800154c:	801a      	strh	r2, [r3, #0]
			  }
			  if(sterowanie_przod_prawy > I4_Vmax){
 800154e:	4b64      	ldr	r3, [pc, #400]	; (80016e0 <main+0x540>)
 8001550:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001554:	4b61      	ldr	r3, [pc, #388]	; (80016dc <main+0x53c>)
 8001556:	f9b3 3000 	ldrsh.w	r3, [r3]
 800155a:	429a      	cmp	r2, r3
 800155c:	dd05      	ble.n	800156a <main+0x3ca>
				  sterowanie_przod_prawy = I4_Vmax;
 800155e:	4b5f      	ldr	r3, [pc, #380]	; (80016dc <main+0x53c>)
 8001560:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001564:	4b5e      	ldr	r3, [pc, #376]	; (80016e0 <main+0x540>)
 8001566:	801a      	strh	r2, [r3, #0]
 8001568:	e012      	b.n	8001590 <main+0x3f0>

			  }
			  else if(sterowanie_przod_prawy < -I4_Vmax){
 800156a:	4b5d      	ldr	r3, [pc, #372]	; (80016e0 <main+0x540>)
 800156c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001570:	461a      	mov	r2, r3
 8001572:	4b5a      	ldr	r3, [pc, #360]	; (80016dc <main+0x53c>)
 8001574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001578:	425b      	negs	r3, r3
 800157a:	429a      	cmp	r2, r3
 800157c:	da08      	bge.n	8001590 <main+0x3f0>
				  sterowanie_przod_prawy = -I4_Vmax;
 800157e:	4b57      	ldr	r3, [pc, #348]	; (80016dc <main+0x53c>)
 8001580:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001584:	b29b      	uxth	r3, r3
 8001586:	425b      	negs	r3, r3
 8001588:	b29b      	uxth	r3, r3
 800158a:	b21a      	sxth	r2, r3
 800158c:	4b54      	ldr	r3, [pc, #336]	; (80016e0 <main+0x540>)
 800158e:	801a      	strh	r2, [r3, #0]
			  }



			  set_motor_dir(&mot_tyl_lewy,sterowanie_tyl_lewy);
 8001590:	4b54      	ldr	r3, [pc, #336]	; (80016e4 <main+0x544>)
 8001592:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001596:	4619      	mov	r1, r3
 8001598:	4853      	ldr	r0, [pc, #332]	; (80016e8 <main+0x548>)
 800159a:	f7ff fbbd 	bl	8000d18 <set_motor_dir>
			  __HAL_TIM_SetCompare(PWM_TIMER_SILNIKI, CH_TYL_LEWY,abs(sterowanie_tyl_lewy));
 800159e:	4b51      	ldr	r3, [pc, #324]	; (80016e4 <main+0x544>)
 80015a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	bfb8      	it	lt
 80015a8:	425b      	neglt	r3, r3
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	4b4f      	ldr	r3, [pc, #316]	; (80016ec <main+0x54c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	635a      	str	r2, [r3, #52]	; 0x34
			  set_motor_dir(&mot_przod_lewy,sterowanie_przod_lewy);
 80015b2:	4b49      	ldr	r3, [pc, #292]	; (80016d8 <main+0x538>)
 80015b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b8:	4619      	mov	r1, r3
 80015ba:	484d      	ldr	r0, [pc, #308]	; (80016f0 <main+0x550>)
 80015bc:	f7ff fbac 	bl	8000d18 <set_motor_dir>
			  __HAL_TIM_SetCompare(PWM_TIMER_SILNIKI, CH_PRZOD_LEWY,abs(sterowanie_przod_lewy));
 80015c0:	4b45      	ldr	r3, [pc, #276]	; (80016d8 <main+0x538>)
 80015c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	bfb8      	it	lt
 80015ca:	425b      	neglt	r3, r3
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	4b47      	ldr	r3, [pc, #284]	; (80016ec <main+0x54c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	63da      	str	r2, [r3, #60]	; 0x3c

			  set_motor_dir(&mot_tyl_prawy,sterowanie_tyl_prawy);
 80015d4:	4b47      	ldr	r3, [pc, #284]	; (80016f4 <main+0x554>)
 80015d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015da:	4619      	mov	r1, r3
 80015dc:	4846      	ldr	r0, [pc, #280]	; (80016f8 <main+0x558>)
 80015de:	f7ff fb9b 	bl	8000d18 <set_motor_dir>
			  __HAL_TIM_SetCompare(PWM_TIMER_SILNIKI, CH_TYL_PRAWY,abs(sterowanie_tyl_prawy));
 80015e2:	4b44      	ldr	r3, [pc, #272]	; (80016f4 <main+0x554>)
 80015e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	bfb8      	it	lt
 80015ec:	425b      	neglt	r3, r3
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	4b3e      	ldr	r3, [pc, #248]	; (80016ec <main+0x54c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	639a      	str	r2, [r3, #56]	; 0x38
			  set_motor_dir(&mot_przod_prawy,sterowanie_przod_prawy);
 80015f6:	4b3a      	ldr	r3, [pc, #232]	; (80016e0 <main+0x540>)
 80015f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015fc:	4619      	mov	r1, r3
 80015fe:	483f      	ldr	r0, [pc, #252]	; (80016fc <main+0x55c>)
 8001600:	f7ff fb8a 	bl	8000d18 <set_motor_dir>
			  __HAL_TIM_SetCompare(PWM_TIMER_SILNIKI, CH_PRZOD_PRAWY,abs(sterowanie_przod_prawy));
 8001604:	4b36      	ldr	r3, [pc, #216]	; (80016e0 <main+0x540>)
 8001606:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160a:	2b00      	cmp	r3, #0
 800160c:	bfb8      	it	lt
 800160e:	425b      	neglt	r3, r3
 8001610:	b29a      	uxth	r2, r3
 8001612:	4b36      	ldr	r3, [pc, #216]	; (80016ec <main+0x54c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	641a      	str	r2, [r3, #64]	; 0x40
 8001618:	e01f      	b.n	800165a <main+0x4ba>
		  }
		  else{
			  set_motor_dir(&mot_tyl_lewy,0);
 800161a:	2100      	movs	r1, #0
 800161c:	4832      	ldr	r0, [pc, #200]	; (80016e8 <main+0x548>)
 800161e:	f7ff fb7b 	bl	8000d18 <set_motor_dir>
			  __HAL_TIM_SetCompare(PWM_TIMER_SILNIKI, CH_TYL_LEWY,0);
 8001622:	4b32      	ldr	r3, [pc, #200]	; (80016ec <main+0x54c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2200      	movs	r2, #0
 8001628:	635a      	str	r2, [r3, #52]	; 0x34
			  set_motor_dir(&mot_przod_lewy,0);
 800162a:	2100      	movs	r1, #0
 800162c:	4830      	ldr	r0, [pc, #192]	; (80016f0 <main+0x550>)
 800162e:	f7ff fb73 	bl	8000d18 <set_motor_dir>
			  __HAL_TIM_SetCompare(PWM_TIMER_SILNIKI, CH_PRZOD_LEWY,0);
 8001632:	4b2e      	ldr	r3, [pc, #184]	; (80016ec <main+0x54c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2200      	movs	r2, #0
 8001638:	63da      	str	r2, [r3, #60]	; 0x3c

			  set_motor_dir(&mot_tyl_prawy,0);
 800163a:	2100      	movs	r1, #0
 800163c:	482e      	ldr	r0, [pc, #184]	; (80016f8 <main+0x558>)
 800163e:	f7ff fb6b 	bl	8000d18 <set_motor_dir>
			  __HAL_TIM_SetCompare(PWM_TIMER_SILNIKI, CH_TYL_PRAWY,0);
 8001642:	4b2a      	ldr	r3, [pc, #168]	; (80016ec <main+0x54c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2200      	movs	r2, #0
 8001648:	639a      	str	r2, [r3, #56]	; 0x38
			  set_motor_dir(&mot_przod_prawy,0);
 800164a:	2100      	movs	r1, #0
 800164c:	482b      	ldr	r0, [pc, #172]	; (80016fc <main+0x55c>)
 800164e:	f7ff fb63 	bl	8000d18 <set_motor_dir>
			  __HAL_TIM_SetCompare(PWM_TIMER_SILNIKI, CH_PRZOD_PRAWY,0);
 8001652:	4b26      	ldr	r3, [pc, #152]	; (80016ec <main+0x54c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2200      	movs	r2, #0
 8001658:	641a      	str	r2, [r3, #64]	; 0x40
				  __HAL_TIM_SetCompare(PWM_TIMER, CH_PRZOD_PRAWY,0);
			  }
		  }
	  } */

	  if(COMM_flaga == 1){
 800165a:	4b29      	ldr	r3, [pc, #164]	; (8001700 <main+0x560>)
 800165c:	f993 3000 	ldrsb.w	r3, [r3]
 8001660:	2b01      	cmp	r3, #1
 8001662:	f47f ae68 	bne.w	8001336 <main+0x196>
		  COMM_flaga = 0;
 8001666:	4b26      	ldr	r3, [pc, #152]	; (8001700 <main+0x560>)
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]

		  //Odbior danych
		  if(UART_flaga == 1)
 800166c:	4b25      	ldr	r3, [pc, #148]	; (8001704 <main+0x564>)
 800166e:	f993 3000 	ldrsb.w	r3, [r3]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d102      	bne.n	800167c <main+0x4dc>
		  {
			  UART_flaga = 0;
 8001676:	4b23      	ldr	r3, [pc, #140]	; (8001704 <main+0x564>)
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
			  //recv_mcu = HAL_UART_Receive_IT(MCU_UART,mcu_data,sizeof(mcu_data));
		  }
		  recv_mcu = HAL_UART_Receive_IT(MCU_UART,mcu_data,sizeof(mcu_data));
 800167c:	220e      	movs	r2, #14
 800167e:	4922      	ldr	r1, [pc, #136]	; (8001708 <main+0x568>)
 8001680:	4822      	ldr	r0, [pc, #136]	; (800170c <main+0x56c>)
 8001682:	f004 fbf4 	bl	8005e6e <HAL_UART_Receive_IT>
 8001686:	4603      	mov	r3, r0
 8001688:	b29a      	uxth	r2, r3
 800168a:	4b21      	ldr	r3, [pc, #132]	; (8001710 <main+0x570>)
 800168c:	801a      	strh	r2, [r3, #0]
		  //recv_mcu = HAL_UART_Receive(MCU_UART,mcu_data,sizeof(mcu_data),100);
		  recv_pc = HAL_UART_Receive(PC_UART,pc_recv_data,PC_RECV_LEN,200);
 800168e:	23c8      	movs	r3, #200	; 0xc8
 8001690:	2205      	movs	r2, #5
 8001692:	4920      	ldr	r1, [pc, #128]	; (8001714 <main+0x574>)
 8001694:	4820      	ldr	r0, [pc, #128]	; (8001718 <main+0x578>)
 8001696:	f004 fb19 	bl	8005ccc <HAL_UART_Receive>
 800169a:	4603      	mov	r3, r0
 800169c:	b29a      	uxth	r2, r3
 800169e:	4b1f      	ldr	r3, [pc, #124]	; (800171c <main+0x57c>)
 80016a0:	801a      	strh	r2, [r3, #0]

		  //Przetwarzanie warunkow dla OFF ON oraz MA
		  if(mcu_data[0] == 1){OFF_ON = 1;}
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <main+0x568>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d103      	bne.n	80016b2 <main+0x512>
 80016aa:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <main+0x580>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	701a      	strb	r2, [r3, #0]
 80016b0:	e002      	b.n	80016b8 <main+0x518>
		  else{OFF_ON = 0;}
 80016b2:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <main+0x580>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]

		  if(mcu_data[1] == 1){MA = 1;}
 80016b8:	4b13      	ldr	r3, [pc, #76]	; (8001708 <main+0x568>)
 80016ba:	785b      	ldrb	r3, [r3, #1]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d103      	bne.n	80016c8 <main+0x528>
 80016c0:	4b18      	ldr	r3, [pc, #96]	; (8001724 <main+0x584>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	701a      	strb	r2, [r3, #0]
 80016c6:	e035      	b.n	8001734 <main+0x594>
		  else if(mcu_data[1] == 0){MA = 0;}
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <main+0x568>)
 80016ca:	785b      	ldrb	r3, [r3, #1]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d12b      	bne.n	8001728 <main+0x588>
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <main+0x584>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]
 80016d6:	e02d      	b.n	8001734 <main+0x594>
 80016d8:	20000046 	.word	0x20000046
 80016dc:	20000056 	.word	0x20000056
 80016e0:	20000048 	.word	0x20000048
 80016e4:	2000003a 	.word	0x2000003a
 80016e8:	20000244 	.word	0x20000244
 80016ec:	20000368 	.word	0x20000368
 80016f0:	200000a8 	.word	0x200000a8
 80016f4:	2000003c 	.word	0x2000003c
 80016f8:	20000124 	.word	0x20000124
 80016fc:	2000005c 	.word	0x2000005c
 8001700:	20000034 	.word	0x20000034
 8001704:	20000035 	.word	0x20000035
 8001708:	20000098 	.word	0x20000098
 800170c:	2000044c 	.word	0x2000044c
 8001710:	20000038 	.word	0x20000038
 8001714:	200001a0 	.word	0x200001a0
 8001718:	200004d0 	.word	0x200004d0
 800171c:	20000036 	.word	0x20000036
 8001720:	20000000 	.word	0x20000000
 8001724:	20000030 	.word	0x20000030
		  else
		  {
			  MA = 0;
 8001728:	4b88      	ldr	r3, [pc, #544]	; (800194c <main+0x7ac>)
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
			  OFF_ON = 0;
 800172e:	4b88      	ldr	r3, [pc, #544]	; (8001950 <main+0x7b0>)
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
		  }

		  //Odczyt pomiarow z enkoderow na masterze
		  pomiar_przod_lewy = (int16_t)((mcu_data[3] << 8) | mcu_data[2]);
 8001734:	4b87      	ldr	r3, [pc, #540]	; (8001954 <main+0x7b4>)
 8001736:	78db      	ldrb	r3, [r3, #3]
 8001738:	021b      	lsls	r3, r3, #8
 800173a:	b21a      	sxth	r2, r3
 800173c:	4b85      	ldr	r3, [pc, #532]	; (8001954 <main+0x7b4>)
 800173e:	789b      	ldrb	r3, [r3, #2]
 8001740:	b21b      	sxth	r3, r3
 8001742:	4313      	orrs	r3, r2
 8001744:	b21a      	sxth	r2, r3
 8001746:	4b84      	ldr	r3, [pc, #528]	; (8001958 <main+0x7b8>)
 8001748:	801a      	strh	r2, [r3, #0]
		  if(mot_przod_lewy.DIRECTION == DIR_CCW)
 800174a:	4b84      	ldr	r3, [pc, #528]	; (800195c <main+0x7bc>)
 800174c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d108      	bne.n	8001766 <main+0x5c6>
		  {
			  pomiar_przod_lewy = -pomiar_przod_lewy;
 8001754:	4b80      	ldr	r3, [pc, #512]	; (8001958 <main+0x7b8>)
 8001756:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175a:	b29b      	uxth	r3, r3
 800175c:	425b      	negs	r3, r3
 800175e:	b29b      	uxth	r3, r3
 8001760:	b21a      	sxth	r2, r3
 8001762:	4b7d      	ldr	r3, [pc, #500]	; (8001958 <main+0x7b8>)
 8001764:	801a      	strh	r2, [r3, #0]
		  }
		  pomiar_przod_prawy = (int16_t)((mcu_data[5] << 8) | mcu_data[4]);
 8001766:	4b7b      	ldr	r3, [pc, #492]	; (8001954 <main+0x7b4>)
 8001768:	795b      	ldrb	r3, [r3, #5]
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	b21a      	sxth	r2, r3
 800176e:	4b79      	ldr	r3, [pc, #484]	; (8001954 <main+0x7b4>)
 8001770:	791b      	ldrb	r3, [r3, #4]
 8001772:	b21b      	sxth	r3, r3
 8001774:	4313      	orrs	r3, r2
 8001776:	b21a      	sxth	r2, r3
 8001778:	4b79      	ldr	r3, [pc, #484]	; (8001960 <main+0x7c0>)
 800177a:	801a      	strh	r2, [r3, #0]
		  if(mot_przod_prawy.DIRECTION == DIR_CCW)
 800177c:	4b79      	ldr	r3, [pc, #484]	; (8001964 <main+0x7c4>)
 800177e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d108      	bne.n	8001798 <main+0x5f8>
		  {
			  pomiar_przod_prawy = -pomiar_przod_prawy;
 8001786:	4b76      	ldr	r3, [pc, #472]	; (8001960 <main+0x7c0>)
 8001788:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178c:	b29b      	uxth	r3, r3
 800178e:	425b      	negs	r3, r3
 8001790:	b29b      	uxth	r3, r3
 8001792:	b21a      	sxth	r2, r3
 8001794:	4b72      	ldr	r3, [pc, #456]	; (8001960 <main+0x7c0>)
 8001796:	801a      	strh	r2, [r3, #0]
		  }

		  //Zwrotka z serwo i maksymalna predkosc
		  pomiar_serwo_kat = (int16_t)((mcu_data[7] << 8) | mcu_data[6]);
 8001798:	4b6e      	ldr	r3, [pc, #440]	; (8001954 <main+0x7b4>)
 800179a:	79db      	ldrb	r3, [r3, #7]
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	b21a      	sxth	r2, r3
 80017a0:	4b6c      	ldr	r3, [pc, #432]	; (8001954 <main+0x7b4>)
 80017a2:	799b      	ldrb	r3, [r3, #6]
 80017a4:	b21b      	sxth	r3, r3
 80017a6:	4313      	orrs	r3, r2
 80017a8:	b21a      	sxth	r2, r3
 80017aa:	4b6f      	ldr	r3, [pc, #444]	; (8001968 <main+0x7c8>)
 80017ac:	801a      	strh	r2, [r3, #0]
		  I4_Vmax = (int16_t)((mcu_data[13] << 8) | mcu_data[12]);
 80017ae:	4b69      	ldr	r3, [pc, #420]	; (8001954 <main+0x7b4>)
 80017b0:	7b5b      	ldrb	r3, [r3, #13]
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	b21a      	sxth	r2, r3
 80017b6:	4b67      	ldr	r3, [pc, #412]	; (8001954 <main+0x7b4>)
 80017b8:	7b1b      	ldrb	r3, [r3, #12]
 80017ba:	b21b      	sxth	r3, r3
 80017bc:	4313      	orrs	r3, r2
 80017be:	b21a      	sxth	r2, r3
 80017c0:	4b6a      	ldr	r3, [pc, #424]	; (800196c <main+0x7cc>)
 80017c2:	801a      	strh	r2, [r3, #0]

		  //Jeśli MA == 0 to odczyt z PILOTA z mastera
		  if(MA == 0){
 80017c4:	4b61      	ldr	r3, [pc, #388]	; (800194c <main+0x7ac>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	f083 0301 	eor.w	r3, r3, #1
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d015      	beq.n	80017fe <main+0x65e>
			  I1_V = (int16_t)((mcu_data[9] << 8) | mcu_data[8]);
 80017d2:	4b60      	ldr	r3, [pc, #384]	; (8001954 <main+0x7b4>)
 80017d4:	7a5b      	ldrb	r3, [r3, #9]
 80017d6:	021b      	lsls	r3, r3, #8
 80017d8:	b21a      	sxth	r2, r3
 80017da:	4b5e      	ldr	r3, [pc, #376]	; (8001954 <main+0x7b4>)
 80017dc:	7a1b      	ldrb	r3, [r3, #8]
 80017de:	b21b      	sxth	r3, r3
 80017e0:	4313      	orrs	r3, r2
 80017e2:	b21a      	sxth	r2, r3
 80017e4:	4b62      	ldr	r3, [pc, #392]	; (8001970 <main+0x7d0>)
 80017e6:	801a      	strh	r2, [r3, #0]
			  I2_OMEGA = (int16_t)((mcu_data[11] << 8) | mcu_data[10]);
 80017e8:	4b5a      	ldr	r3, [pc, #360]	; (8001954 <main+0x7b4>)
 80017ea:	7adb      	ldrb	r3, [r3, #11]
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	b21a      	sxth	r2, r3
 80017f0:	4b58      	ldr	r3, [pc, #352]	; (8001954 <main+0x7b4>)
 80017f2:	7a9b      	ldrb	r3, [r3, #10]
 80017f4:	b21b      	sxth	r3, r3
 80017f6:	4313      	orrs	r3, r2
 80017f8:	b21a      	sxth	r2, r3
 80017fa:	4b5e      	ldr	r3, [pc, #376]	; (8001974 <main+0x7d4>)
 80017fc:	801a      	strh	r2, [r3, #0]
		  }

		  //Jeśli MA == 1 to odczyt z PC
		  if(MA == 1){
 80017fe:	4b53      	ldr	r3, [pc, #332]	; (800194c <main+0x7ac>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d020      	beq.n	8001848 <main+0x6a8>

			  I1_V = (int16_t)((pc_recv_data[2] << 8) | pc_recv_data[1]);
 8001806:	4b5c      	ldr	r3, [pc, #368]	; (8001978 <main+0x7d8>)
 8001808:	789b      	ldrb	r3, [r3, #2]
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	b21a      	sxth	r2, r3
 800180e:	4b5a      	ldr	r3, [pc, #360]	; (8001978 <main+0x7d8>)
 8001810:	785b      	ldrb	r3, [r3, #1]
 8001812:	b21b      	sxth	r3, r3
 8001814:	4313      	orrs	r3, r2
 8001816:	b21a      	sxth	r2, r3
 8001818:	4b55      	ldr	r3, [pc, #340]	; (8001970 <main+0x7d0>)
 800181a:	801a      	strh	r2, [r3, #0]
			  I2_OMEGA = (int16_t)((pc_recv_data[4] << 8) | pc_recv_data[3]);
 800181c:	4b56      	ldr	r3, [pc, #344]	; (8001978 <main+0x7d8>)
 800181e:	791b      	ldrb	r3, [r3, #4]
 8001820:	021b      	lsls	r3, r3, #8
 8001822:	b21a      	sxth	r2, r3
 8001824:	4b54      	ldr	r3, [pc, #336]	; (8001978 <main+0x7d8>)
 8001826:	78db      	ldrb	r3, [r3, #3]
 8001828:	b21b      	sxth	r3, r3
 800182a:	4313      	orrs	r3, r2
 800182c:	b21a      	sxth	r2, r3
 800182e:	4b51      	ldr	r3, [pc, #324]	; (8001974 <main+0x7d4>)
 8001830:	801a      	strh	r2, [r3, #0]

			  if(pc_recv_data[0] == 1){OFF_ON = 1;}
 8001832:	4b51      	ldr	r3, [pc, #324]	; (8001978 <main+0x7d8>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d103      	bne.n	8001842 <main+0x6a2>
 800183a:	4b45      	ldr	r3, [pc, #276]	; (8001950 <main+0x7b0>)
 800183c:	2201      	movs	r2, #1
 800183e:	701a      	strb	r2, [r3, #0]
 8001840:	e002      	b.n	8001848 <main+0x6a8>
			  else{OFF_ON = 0;}
 8001842:	4b43      	ldr	r3, [pc, #268]	; (8001950 <main+0x7b0>)
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
		  }

		  if(STOP_AW == 1){
 8001848:	4b4c      	ldr	r3, [pc, #304]	; (800197c <main+0x7dc>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <main+0x6bc>
			  OFF_ON = 0;
 8001850:	4b3f      	ldr	r3, [pc, #252]	; (8001950 <main+0x7b0>)
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
			  MA = 0;
 8001856:	4b3d      	ldr	r3, [pc, #244]	; (800194c <main+0x7ac>)
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
		  }

		  if(OFF_ON == 0){
 800185c:	4b3c      	ldr	r3, [pc, #240]	; (8001950 <main+0x7b0>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	f083 0301 	eor.w	r3, r3, #1
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d010      	beq.n	800188c <main+0x6ec>
			  I1_V = 0;
 800186a:	4b41      	ldr	r3, [pc, #260]	; (8001970 <main+0x7d0>)
 800186c:	2200      	movs	r2, #0
 800186e:	801a      	strh	r2, [r3, #0]
			  I2_OMEGA = 0;
 8001870:	4b40      	ldr	r3, [pc, #256]	; (8001974 <main+0x7d4>)
 8001872:	2200      	movs	r2, #0
 8001874:	801a      	strh	r2, [r3, #0]
			  sterowanie_serwo_kat = 0;
 8001876:	4b42      	ldr	r3, [pc, #264]	; (8001980 <main+0x7e0>)
 8001878:	2200      	movs	r2, #0
 800187a:	801a      	strh	r2, [r3, #0]

			  HAL_GPIO_WritePin(WYLACZNIK_GPIO_Port, WYLACZNIK_Pin, 1);
 800187c:	2201      	movs	r2, #1
 800187e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001886:	f001 fcd9 	bl	800323c <HAL_GPIO_WritePin>
 800188a:	e00a      	b.n	80018a2 <main+0x702>
		  }
		  else if(OFF_ON == 1){
 800188c:	4b30      	ldr	r3, [pc, #192]	; (8001950 <main+0x7b0>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d006      	beq.n	80018a2 <main+0x702>
			  HAL_GPIO_WritePin(WYLACZNIK_GPIO_Port, WYLACZNIK_Pin, 0);
 8001894:	2200      	movs	r2, #0
 8001896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800189a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189e:	f001 fccd 	bl	800323c <HAL_GPIO_WritePin>
		  }

		  //Sterowanie serwonapędem oraz sprawdzenie ograniczeń
		  if (OFF_ON == 1){
 80018a2:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <main+0x7b0>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d042      	beq.n	8001930 <main+0x790>
			  if (krancowka == 1){
 80018aa:	4b36      	ldr	r3, [pc, #216]	; (8001984 <main+0x7e4>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d018      	beq.n	80018e4 <main+0x744>
				  if (sterowanie_serwo_kat > 0){
 80018b2:	4b33      	ldr	r3, [pc, #204]	; (8001980 <main+0x7e0>)
 80018b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	dd09      	ble.n	80018d0 <main+0x730>
					  I2_OMEGA = sterowanie_serwo_kat - 2;
 80018bc:	4b30      	ldr	r3, [pc, #192]	; (8001980 <main+0x7e0>)
 80018be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	3b02      	subs	r3, #2
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	b21a      	sxth	r2, r3
 80018ca:	4b2a      	ldr	r3, [pc, #168]	; (8001974 <main+0x7d4>)
 80018cc:	801a      	strh	r2, [r3, #0]
 80018ce:	e00e      	b.n	80018ee <main+0x74e>

				  }
				  else{
					  I2_OMEGA = sterowanie_serwo_kat + 2;
 80018d0:	4b2b      	ldr	r3, [pc, #172]	; (8001980 <main+0x7e0>)
 80018d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	3302      	adds	r3, #2
 80018da:	b29b      	uxth	r3, r3
 80018dc:	b21a      	sxth	r2, r3
 80018de:	4b25      	ldr	r3, [pc, #148]	; (8001974 <main+0x7d4>)
 80018e0:	801a      	strh	r2, [r3, #0]
 80018e2:	e004      	b.n	80018ee <main+0x74e>
				  }
			  }
			  else{sterowanie_serwo_kat = I2_OMEGA;}
 80018e4:	4b23      	ldr	r3, [pc, #140]	; (8001974 <main+0x7d4>)
 80018e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80018ea:	4b25      	ldr	r3, [pc, #148]	; (8001980 <main+0x7e0>)
 80018ec:	801a      	strh	r2, [r3, #0]

			  //Sprawdzenie ograniczeń predkosci

			  if(I1_V > I4_Vmax){
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <main+0x7d0>)
 80018f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80018f4:	4b1d      	ldr	r3, [pc, #116]	; (800196c <main+0x7cc>)
 80018f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	dd05      	ble.n	800190a <main+0x76a>
				  I1_V = I4_Vmax;
 80018fe:	4b1b      	ldr	r3, [pc, #108]	; (800196c <main+0x7cc>)
 8001900:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001904:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <main+0x7d0>)
 8001906:	801a      	strh	r2, [r3, #0]
 8001908:	e012      	b.n	8001930 <main+0x790>

			  }
			  else if(I1_V < -I4_Vmax){
 800190a:	4b19      	ldr	r3, [pc, #100]	; (8001970 <main+0x7d0>)
 800190c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001910:	461a      	mov	r2, r3
 8001912:	4b16      	ldr	r3, [pc, #88]	; (800196c <main+0x7cc>)
 8001914:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001918:	425b      	negs	r3, r3
 800191a:	429a      	cmp	r2, r3
 800191c:	da08      	bge.n	8001930 <main+0x790>
				  I1_V = -I4_Vmax;
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <main+0x7cc>)
 8001920:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001924:	b29b      	uxth	r3, r3
 8001926:	425b      	negs	r3, r3
 8001928:	b29b      	uxth	r3, r3
 800192a:	b21a      	sxth	r2, r3
 800192c:	4b10      	ldr	r3, [pc, #64]	; (8001970 <main+0x7d0>)
 800192e:	801a      	strh	r2, [r3, #0]
			  }
		  }

		  if(I2_OMEGA >= 0){HAL_GPIO_WritePin(DIR_SERWO_GPIO_Port, DIR_SERWO_Pin, 0);}
 8001930:	4b10      	ldr	r3, [pc, #64]	; (8001974 <main+0x7d4>)
 8001932:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001936:	2b00      	cmp	r3, #0
 8001938:	db26      	blt.n	8001988 <main+0x7e8>
 800193a:	2200      	movs	r2, #0
 800193c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001944:	f001 fc7a 	bl	800323c <HAL_GPIO_WritePin>
 8001948:	e025      	b.n	8001996 <main+0x7f6>
 800194a:	bf00      	nop
 800194c:	20000030 	.word	0x20000030
 8001950:	20000000 	.word	0x20000000
 8001954:	20000098 	.word	0x20000098
 8001958:	2000004a 	.word	0x2000004a
 800195c:	200000a8 	.word	0x200000a8
 8001960:	2000004c 	.word	0x2000004c
 8001964:	2000005c 	.word	0x2000005c
 8001968:	20000058 	.word	0x20000058
 800196c:	20000056 	.word	0x20000056
 8001970:	20000052 	.word	0x20000052
 8001974:	20000054 	.word	0x20000054
 8001978:	200001a0 	.word	0x200001a0
 800197c:	20000032 	.word	0x20000032
 8001980:	2000005a 	.word	0x2000005a
 8001984:	20000031 	.word	0x20000031
		  else{HAL_GPIO_WritePin(DIR_SERWO_GPIO_Port, DIR_SERWO_Pin, 1);}
 8001988:	2201      	movs	r2, #1
 800198a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800198e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001992:	f001 fc53 	bl	800323c <HAL_GPIO_WritePin>
		  __HAL_TIM_SetCompare(PWM_TIMER_SERWO, CH_SERWO,abs(I2_OMEGA));
 8001996:	4b6f      	ldr	r3, [pc, #444]	; (8001b54 <main+0x9b4>)
 8001998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199c:	2b00      	cmp	r3, #0
 800199e:	bfb8      	it	lt
 80019a0:	425b      	neglt	r3, r3
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	4b6c      	ldr	r3, [pc, #432]	; (8001b58 <main+0x9b8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	635a      	str	r2, [r3, #52]	; 0x34

		  setpoint_przod_lewy = przelicz_kat(I1_V,0);
 80019aa:	4b6c      	ldr	r3, [pc, #432]	; (8001b5c <main+0x9bc>)
 80019ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b0:	2100      	movs	r1, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f9bc 	bl	8001d30 <przelicz_kat>
 80019b8:	4603      	mov	r3, r0
 80019ba:	461a      	mov	r2, r3
 80019bc:	4b68      	ldr	r3, [pc, #416]	; (8001b60 <main+0x9c0>)
 80019be:	801a      	strh	r2, [r3, #0]
		  setpoint_przod_prawy = przelicz_kat(I1_V,1);
 80019c0:	4b66      	ldr	r3, [pc, #408]	; (8001b5c <main+0x9bc>)
 80019c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c6:	2101      	movs	r1, #1
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 f9b1 	bl	8001d30 <przelicz_kat>
 80019ce:	4603      	mov	r3, r0
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b64      	ldr	r3, [pc, #400]	; (8001b64 <main+0x9c4>)
 80019d4:	801a      	strh	r2, [r3, #0]
		  setpoint_tyl_lewy = I1_V;
 80019d6:	4b61      	ldr	r3, [pc, #388]	; (8001b5c <main+0x9bc>)
 80019d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80019dc:	4b62      	ldr	r3, [pc, #392]	; (8001b68 <main+0x9c8>)
 80019de:	801a      	strh	r2, [r3, #0]
		  setpoint_tyl_prawy = I1_V;
 80019e0:	4b5e      	ldr	r3, [pc, #376]	; (8001b5c <main+0x9bc>)
 80019e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80019e6:	4b61      	ldr	r3, [pc, #388]	; (8001b6c <main+0x9cc>)
 80019e8:	801a      	strh	r2, [r3, #0]



		  //Transmisja danych UARTEM do PC
		  if(OFF_ON == 1){pc_send_data[0] = 1;}
 80019ea:	4b61      	ldr	r3, [pc, #388]	; (8001b70 <main+0x9d0>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <main+0x85a>
 80019f2:	4b60      	ldr	r3, [pc, #384]	; (8001b74 <main+0x9d4>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	701a      	strb	r2, [r3, #0]
 80019f8:	e002      	b.n	8001a00 <main+0x860>
		  else{pc_send_data[0] = 0;}
 80019fa:	4b5e      	ldr	r3, [pc, #376]	; (8001b74 <main+0x9d4>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]
		  pc_send_data[1] = (uint8_t)pomiar_tyl_lewy;
 8001a00:	4b5d      	ldr	r3, [pc, #372]	; (8001b78 <main+0x9d8>)
 8001a02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	4b5a      	ldr	r3, [pc, #360]	; (8001b74 <main+0x9d4>)
 8001a0a:	705a      	strb	r2, [r3, #1]
		  pc_send_data[2] = (uint8_t)(pomiar_tyl_lewy >> 8);
 8001a0c:	4b5a      	ldr	r3, [pc, #360]	; (8001b78 <main+0x9d8>)
 8001a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a12:	121b      	asrs	r3, r3, #8
 8001a14:	b21b      	sxth	r3, r3
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	4b56      	ldr	r3, [pc, #344]	; (8001b74 <main+0x9d4>)
 8001a1a:	709a      	strb	r2, [r3, #2]
		  pc_send_data[3] = (uint8_t)pomiar_tyl_prawy;
 8001a1c:	4b57      	ldr	r3, [pc, #348]	; (8001b7c <main+0x9dc>)
 8001a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	4b53      	ldr	r3, [pc, #332]	; (8001b74 <main+0x9d4>)
 8001a26:	70da      	strb	r2, [r3, #3]
		  pc_send_data[4] = (uint8_t)(pomiar_tyl_prawy >> 8);
 8001a28:	4b54      	ldr	r3, [pc, #336]	; (8001b7c <main+0x9dc>)
 8001a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a2e:	121b      	asrs	r3, r3, #8
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	4b4f      	ldr	r3, [pc, #316]	; (8001b74 <main+0x9d4>)
 8001a36:	711a      	strb	r2, [r3, #4]
		  pc_send_data[5] = (uint8_t)pomiar_przod_lewy;
 8001a38:	4b51      	ldr	r3, [pc, #324]	; (8001b80 <main+0x9e0>)
 8001a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	4b4c      	ldr	r3, [pc, #304]	; (8001b74 <main+0x9d4>)
 8001a42:	715a      	strb	r2, [r3, #5]
		  pc_send_data[6] = (uint8_t)(pomiar_przod_lewy >> 8);
 8001a44:	4b4e      	ldr	r3, [pc, #312]	; (8001b80 <main+0x9e0>)
 8001a46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a4a:	121b      	asrs	r3, r3, #8
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	4b48      	ldr	r3, [pc, #288]	; (8001b74 <main+0x9d4>)
 8001a52:	719a      	strb	r2, [r3, #6]
		  pc_send_data[7] = (uint8_t)pomiar_przod_prawy;
 8001a54:	4b4b      	ldr	r3, [pc, #300]	; (8001b84 <main+0x9e4>)
 8001a56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	4b45      	ldr	r3, [pc, #276]	; (8001b74 <main+0x9d4>)
 8001a5e:	71da      	strb	r2, [r3, #7]
		  pc_send_data[8] = (uint8_t)(pomiar_przod_prawy >> 8);
 8001a60:	4b48      	ldr	r3, [pc, #288]	; (8001b84 <main+0x9e4>)
 8001a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a66:	121b      	asrs	r3, r3, #8
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <main+0x9d4>)
 8001a6e:	721a      	strb	r2, [r3, #8]
		  pc_send_data[9] = (uint8_t)pomiar_serwo_kat;
 8001a70:	4b45      	ldr	r3, [pc, #276]	; (8001b88 <main+0x9e8>)
 8001a72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	4b3e      	ldr	r3, [pc, #248]	; (8001b74 <main+0x9d4>)
 8001a7a:	725a      	strb	r2, [r3, #9]
		  pc_send_data[10] = (uint8_t)(pomiar_serwo_kat >> 8);
 8001a7c:	4b42      	ldr	r3, [pc, #264]	; (8001b88 <main+0x9e8>)
 8001a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a82:	121b      	asrs	r3, r3, #8
 8001a84:	b21b      	sxth	r3, r3
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	4b3a      	ldr	r3, [pc, #232]	; (8001b74 <main+0x9d4>)
 8001a8a:	729a      	strb	r2, [r3, #10]
		  pc_send_data[11] = (uint8_t)sterowanie_tyl_lewy;
 8001a8c:	4b3f      	ldr	r3, [pc, #252]	; (8001b8c <main+0x9ec>)
 8001a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	4b37      	ldr	r3, [pc, #220]	; (8001b74 <main+0x9d4>)
 8001a96:	72da      	strb	r2, [r3, #11]
		  pc_send_data[12] = (uint8_t)(sterowanie_tyl_lewy >> 8);
 8001a98:	4b3c      	ldr	r3, [pc, #240]	; (8001b8c <main+0x9ec>)
 8001a9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a9e:	121b      	asrs	r3, r3, #8
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	4b33      	ldr	r3, [pc, #204]	; (8001b74 <main+0x9d4>)
 8001aa6:	731a      	strb	r2, [r3, #12]
		  pc_send_data[13] = (uint8_t)sterowanie_tyl_prawy;
 8001aa8:	4b39      	ldr	r3, [pc, #228]	; (8001b90 <main+0x9f0>)
 8001aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	4b30      	ldr	r3, [pc, #192]	; (8001b74 <main+0x9d4>)
 8001ab2:	735a      	strb	r2, [r3, #13]
		  pc_send_data[14] = (uint8_t)(sterowanie_tyl_prawy >> 8);
 8001ab4:	4b36      	ldr	r3, [pc, #216]	; (8001b90 <main+0x9f0>)
 8001ab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aba:	121b      	asrs	r3, r3, #8
 8001abc:	b21b      	sxth	r3, r3
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	4b2c      	ldr	r3, [pc, #176]	; (8001b74 <main+0x9d4>)
 8001ac2:	739a      	strb	r2, [r3, #14]
		  pc_send_data[15] = (uint8_t)sterowanie_przod_lewy;
 8001ac4:	4b33      	ldr	r3, [pc, #204]	; (8001b94 <main+0x9f4>)
 8001ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	4b29      	ldr	r3, [pc, #164]	; (8001b74 <main+0x9d4>)
 8001ace:	73da      	strb	r2, [r3, #15]
		  pc_send_data[16] = (uint8_t)(sterowanie_przod_lewy >> 8);
 8001ad0:	4b30      	ldr	r3, [pc, #192]	; (8001b94 <main+0x9f4>)
 8001ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad6:	121b      	asrs	r3, r3, #8
 8001ad8:	b21b      	sxth	r3, r3
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <main+0x9d4>)
 8001ade:	741a      	strb	r2, [r3, #16]
		  pc_send_data[17] = (uint8_t)sterowanie_przod_prawy;
 8001ae0:	4b2d      	ldr	r3, [pc, #180]	; (8001b98 <main+0x9f8>)
 8001ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <main+0x9d4>)
 8001aea:	745a      	strb	r2, [r3, #17]
		  pc_send_data[18] = (uint8_t)(sterowanie_przod_prawy >> 8);
 8001aec:	4b2a      	ldr	r3, [pc, #168]	; (8001b98 <main+0x9f8>)
 8001aee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af2:	121b      	asrs	r3, r3, #8
 8001af4:	b21b      	sxth	r3, r3
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <main+0x9d4>)
 8001afa:	749a      	strb	r2, [r3, #18]
		  pc_send_data[19] = (uint8_t)sterowanie_serwo_kat;
 8001afc:	4b27      	ldr	r3, [pc, #156]	; (8001b9c <main+0x9fc>)
 8001afe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <main+0x9d4>)
 8001b06:	74da      	strb	r2, [r3, #19]
		  pc_send_data[20] = (uint8_t)(sterowanie_serwo_kat >> 8);
 8001b08:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <main+0x9fc>)
 8001b0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b0e:	121b      	asrs	r3, r3, #8
 8001b10:	b21b      	sxth	r3, r3
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <main+0x9d4>)
 8001b16:	751a      	strb	r2, [r3, #20]
		  if(MA == 1){pc_send_data[21] = 1;}
 8001b18:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <main+0xa00>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <main+0x988>
 8001b20:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <main+0x9d4>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	755a      	strb	r2, [r3, #21]
 8001b26:	e00d      	b.n	8001b44 <main+0x9a4>
		  else if(MA == 0){
 8001b28:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <main+0xa00>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	f083 0301 	eor.w	r3, r3, #1
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <main+0x99e>
			  pc_send_data[21] = 0;
 8001b36:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <main+0x9d4>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	755a      	strb	r2, [r3, #21]
 8001b3c:	e002      	b.n	8001b44 <main+0x9a4>
		  }
		  else{pc_send_data[21] = 3;}
 8001b3e:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <main+0x9d4>)
 8001b40:	2203      	movs	r2, #3
 8001b42:	755a      	strb	r2, [r3, #21]
		  HAL_UART_Transmit(PC_UART, pc_send_data, PC_SEND_LEN, 200);
 8001b44:	23c8      	movs	r3, #200	; 0xc8
 8001b46:	2215      	movs	r2, #21
 8001b48:	490a      	ldr	r1, [pc, #40]	; (8001b74 <main+0x9d4>)
 8001b4a:	4816      	ldr	r0, [pc, #88]	; (8001ba4 <main+0xa04>)
 8001b4c:	f004 f82a 	bl	8005ba4 <HAL_UART_Transmit>
	  if(PID_flaga == 1){
 8001b50:	f7ff bbf1 	b.w	8001336 <main+0x196>
 8001b54:	20000054 	.word	0x20000054
 8001b58:	20000284 	.word	0x20000284
 8001b5c:	20000052 	.word	0x20000052
 8001b60:	2000004e 	.word	0x2000004e
 8001b64:	20000050 	.word	0x20000050
 8001b68:	20000042 	.word	0x20000042
 8001b6c:	20000044 	.word	0x20000044
 8001b70:	20000000 	.word	0x20000000
 8001b74:	200001a8 	.word	0x200001a8
 8001b78:	2000003e 	.word	0x2000003e
 8001b7c:	20000040 	.word	0x20000040
 8001b80:	2000004a 	.word	0x2000004a
 8001b84:	2000004c 	.word	0x2000004c
 8001b88:	20000058 	.word	0x20000058
 8001b8c:	2000003a 	.word	0x2000003a
 8001b90:	2000003c 	.word	0x2000003c
 8001b94:	20000046 	.word	0x20000046
 8001b98:	20000048 	.word	0x20000048
 8001b9c:	2000005a 	.word	0x2000005a
 8001ba0:	20000030 	.word	0x20000030
 8001ba4:	200004d0 	.word	0x200004d0

08001ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b096      	sub	sp, #88	; 0x58
 8001bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bb2:	2228      	movs	r2, #40	; 0x28
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f005 fa66 	bl	8007088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bbc:	f107 031c 	add.w	r3, r7, #28
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]
 8001bd8:	611a      	str	r2, [r3, #16]
 8001bda:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001be0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001be4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001be6:	2301      	movs	r3, #1
 8001be8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bea:	2301      	movs	r3, #1
 8001bec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bf6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001bf8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001bfc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c02:	4618      	mov	r0, r3
 8001c04:	f001 fb4a 	bl	800329c <HAL_RCC_OscConfig>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001c0e:	f000 fa49 	bl	80020a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c12:	230f      	movs	r3, #15
 8001c14:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c16:	2302      	movs	r3, #2
 8001c18:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c24:	2300      	movs	r3, #0
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c28:	f107 031c 	add.w	r3, r7, #28
 8001c2c:	2102      	movs	r1, #2
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f002 fa3c 	bl	80040ac <HAL_RCC_ClockConfig>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001c3a:	f000 fa33 	bl	80020a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 8001c3e:	f241 0301 	movw	r3, #4097	; 0x1001
 8001c42:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8001c44:	2301      	movs	r3, #1
 8001c46:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f002 fc64 	bl	800451c <HAL_RCCEx_PeriphCLKConfig>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001c5a:	f000 fa23 	bl	80020a4 <Error_Handler>
  }
}
 8001c5e:	bf00      	nop
 8001c60:	3758      	adds	r7, #88	; 0x58
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
	//if(huart == IBUS_UART) { ibus_reset_failsafe();}
	/*if(huart == MCU_UART) {
		UART_flaga = 1;
		recv_mcu = HAL_UART_Receive_IT(MCU_UART,mcu_data,sizeof(mcu_data));}
*/
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef* htim)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
	if(htim == PID_TIMER){
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d102      	bne.n	8001c92 <HAL_TIM_PeriodElapsedCallback+0x16>
		PID_flaga = 1;
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	701a      	strb	r2, [r3, #0]
	}

	if(htim == COMM_TIMER){
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a07      	ldr	r2, [pc, #28]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d102      	bne.n	8001ca0 <HAL_TIM_PeriodElapsedCallback+0x24>
		COMM_flaga = 1;
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	701a      	strb	r2, [r3, #0]
	}
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	2000031c 	.word	0x2000031c
 8001cb0:	20000033 	.word	0x20000033
 8001cb4:	20000400 	.word	0x20000400
 8001cb8:	20000034 	.word	0x20000034

08001cbc <to_process_range>:

int16_t to_process_range(int16_t input)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	80fb      	strh	r3, [r7, #6]
	int16_t out = (int16_t)(((float)(input * Counter_20kHz_360))/1000.0);
 8001cc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cca:	f240 1267 	movw	r2, #359	; 0x167
 8001cce:	fb02 f303 	mul.w	r3, r2, r3
 8001cd2:	ee07 3a90 	vmov	s15, r3
 8001cd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cda:	ee17 0a90 	vmov	r0, s15
 8001cde:	f7fe fbd7 	bl	8000490 <__aeabi_f2d>
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <to_process_range+0x70>)
 8001ce8:	f7fe fd54 	bl	8000794 <__aeabi_ddiv>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f7fe febe 	bl	8000a74 <__aeabi_d2iz>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	81fb      	strh	r3, [r7, #14]

	if (out > Counter_20kHz_360) { out = Counter_20kHz_360; }
 8001cfc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d00:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001d04:	db03      	blt.n	8001d0e <to_process_range+0x52>
 8001d06:	f240 1367 	movw	r3, #359	; 0x167
 8001d0a:	81fb      	strh	r3, [r7, #14]
 8001d0c:	e007      	b.n	8001d1e <to_process_range+0x62>
	else if (out < -Counter_20kHz_360) { out = -Counter_20kHz_360; }
 8001d0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d12:	f513 7fb4 	cmn.w	r3, #360	; 0x168
 8001d16:	dc02      	bgt.n	8001d1e <to_process_range+0x62>
 8001d18:	f64f 6399 	movw	r3, #65177	; 0xfe99
 8001d1c:	81fb      	strh	r3, [r7, #14]

	return out;
 8001d1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	408f4000 	.word	0x408f4000

08001d30 <przelicz_kat>:
int16_t przelicz_kat(int16_t setpoint, bool L_P){
 8001d30:	b5b0      	push	{r4, r5, r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	460a      	mov	r2, r1
 8001d3a:	80fb      	strh	r3, [r7, #6]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	717b      	strb	r3, [r7, #5]
	bool dir;
	float stosunek;
	float predkosc;

	int16_t tmp = (setpoint * SERWO_SCALE_MAX) / Counter_20kHz_360;
 8001d40:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	009a      	lsls	r2, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	4a96      	ldr	r2, [pc, #600]	; (8001fa8 <przelicz_kat+0x278>)
 8001d50:	fb82 1203 	smull	r1, r2, r2, r3
 8001d54:	441a      	add	r2, r3
 8001d56:	1212      	asrs	r2, r2, #8
 8001d58:	17db      	asrs	r3, r3, #31
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	82bb      	strh	r3, [r7, #20]
	if(setpoint >= 0){
 8001d5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	db02      	blt.n	8001d6c <przelicz_kat+0x3c>
		dir = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	75fb      	strb	r3, [r7, #23]
 8001d6a:	e001      	b.n	8001d70 <przelicz_kat+0x40>
	}
	else{dir = 1;}
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	75fb      	strb	r3, [r7, #23]

	r1 = (L1*cos(tmp) + L2)/sin(tmp);
 8001d70:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fb79 	bl	800046c <__aeabi_i2d>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	ec43 2b10 	vmov	d0, r2, r3
 8001d82:	f005 f989 	bl	8007098 <cos>
 8001d86:	ec51 0b10 	vmov	r0, r1, d0
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	4b87      	ldr	r3, [pc, #540]	; (8001fac <przelicz_kat+0x27c>)
 8001d90:	f7fe fbd6 	bl	8000540 <__aeabi_dmul>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4610      	mov	r0, r2
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	4b83      	ldr	r3, [pc, #524]	; (8001fb0 <przelicz_kat+0x280>)
 8001da2:	f7fe fa17 	bl	80001d4 <__adddf3>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4614      	mov	r4, r2
 8001dac:	461d      	mov	r5, r3
 8001dae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fb5a 	bl	800046c <__aeabi_i2d>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	ec43 2b10 	vmov	d0, r2, r3
 8001dc0:	f005 f9ba 	bl	8007138 <sin>
 8001dc4:	ec53 2b10 	vmov	r2, r3, d0
 8001dc8:	4620      	mov	r0, r4
 8001dca:	4629      	mov	r1, r5
 8001dcc:	f7fe fce2 	bl	8000794 <__aeabi_ddiv>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f7fe fe74 	bl	8000ac4 <__aeabi_d2f>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	4a75      	ldr	r2, [pc, #468]	; (8001fb4 <przelicz_kat+0x284>)
 8001de0:	6013      	str	r3, [r2, #0]
	r2 = (L2*cos(tmp) + L1)/sin(tmp);
 8001de2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fb40 	bl	800046c <__aeabi_i2d>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	ec43 2b10 	vmov	d0, r2, r3
 8001df4:	f005 f950 	bl	8007098 <cos>
 8001df8:	ec51 0b10 	vmov	r0, r1, d0
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	4b6b      	ldr	r3, [pc, #428]	; (8001fb0 <przelicz_kat+0x280>)
 8001e02:	f7fe fb9d 	bl	8000540 <__aeabi_dmul>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	4b66      	ldr	r3, [pc, #408]	; (8001fac <przelicz_kat+0x27c>)
 8001e14:	f7fe f9de 	bl	80001d4 <__adddf3>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4614      	mov	r4, r2
 8001e1e:	461d      	mov	r5, r3
 8001e20:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fb21 	bl	800046c <__aeabi_i2d>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	ec43 2b10 	vmov	d0, r2, r3
 8001e32:	f005 f981 	bl	8007138 <sin>
 8001e36:	ec53 2b10 	vmov	r2, r3, d0
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	4629      	mov	r1, r5
 8001e3e:	f7fe fca9 	bl	8000794 <__aeabi_ddiv>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4610      	mov	r0, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f7fe fe3b 	bl	8000ac4 <__aeabi_d2f>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	4a59      	ldr	r2, [pc, #356]	; (8001fb8 <przelicz_kat+0x288>)
 8001e52:	6013      	str	r3, [r2, #0]

	predkosc = (float)( (((float)tmp) * (r1 - ( ((float)L_ADD) /2.0) )) / r2);
 8001e54:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e58:	ee07 3a90 	vmov	s15, r3
 8001e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e60:	ee17 0a90 	vmov	r0, s15
 8001e64:	f7fe fb14 	bl	8000490 <__aeabi_f2d>
 8001e68:	4604      	mov	r4, r0
 8001e6a:	460d      	mov	r5, r1
 8001e6c:	4b51      	ldr	r3, [pc, #324]	; (8001fb4 <przelicz_kat+0x284>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe fb0d 	bl	8000490 <__aeabi_f2d>
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	4b50      	ldr	r3, [pc, #320]	; (8001fbc <przelicz_kat+0x28c>)
 8001e7c:	f7fe f9a8 	bl	80001d0 <__aeabi_dsub>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4620      	mov	r0, r4
 8001e86:	4629      	mov	r1, r5
 8001e88:	f7fe fb5a 	bl	8000540 <__aeabi_dmul>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4614      	mov	r4, r2
 8001e92:	461d      	mov	r5, r3
 8001e94:	4b48      	ldr	r3, [pc, #288]	; (8001fb8 <przelicz_kat+0x288>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe faf9 	bl	8000490 <__aeabi_f2d>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	4629      	mov	r1, r5
 8001ea6:	f7fe fc75 	bl	8000794 <__aeabi_ddiv>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f7fe fe07 	bl	8000ac4 <__aeabi_d2f>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	613b      	str	r3, [r7, #16]
	stosunek = (r1 + ( ((float)L_ADD) /2.0))/(r1 - ( ((float)L_ADD) /2.0) );
 8001eba:	4b3e      	ldr	r3, [pc, #248]	; (8001fb4 <przelicz_kat+0x284>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fae6 	bl	8000490 <__aeabi_f2d>
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	4b3c      	ldr	r3, [pc, #240]	; (8001fbc <przelicz_kat+0x28c>)
 8001eca:	f7fe f983 	bl	80001d4 <__adddf3>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4614      	mov	r4, r2
 8001ed4:	461d      	mov	r5, r3
 8001ed6:	4b37      	ldr	r3, [pc, #220]	; (8001fb4 <przelicz_kat+0x284>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fad8 	bl	8000490 <__aeabi_f2d>
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	4b35      	ldr	r3, [pc, #212]	; (8001fbc <przelicz_kat+0x28c>)
 8001ee6:	f7fe f973 	bl	80001d0 <__aeabi_dsub>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4620      	mov	r0, r4
 8001ef0:	4629      	mov	r1, r5
 8001ef2:	f7fe fc4f 	bl	8000794 <__aeabi_ddiv>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	4610      	mov	r0, r2
 8001efc:	4619      	mov	r1, r3
 8001efe:	f7fe fde1 	bl	8000ac4 <__aeabi_d2f>
 8001f02:	4603      	mov	r3, r0
 8001f04:	60fb      	str	r3, [r7, #12]

	if( (L_P == 0) && (dir == 0) ){
 8001f06:	797b      	ldrb	r3, [r7, #5]
 8001f08:	f083 0301 	eor.w	r3, r3, #1
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d011      	beq.n	8001f36 <przelicz_kat+0x206>
 8001f12:	7dfb      	ldrb	r3, [r7, #23]
 8001f14:	f083 0301 	eor.w	r3, r3, #1
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00b      	beq.n	8001f36 <przelicz_kat+0x206>
		return (int16_t)(stosunek*predkosc);
 8001f1e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f22:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f2e:	ee17 3a90 	vmov	r3, s15
 8001f32:	b21b      	sxth	r3, r3
 8001f34:	e034      	b.n	8001fa0 <przelicz_kat+0x270>
	}
	else if( (L_P == 0) && (dir == 1) ){
 8001f36:	797b      	ldrb	r3, [r7, #5]
 8001f38:	f083 0301 	eor.w	r3, r3, #1
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00a      	beq.n	8001f58 <przelicz_kat+0x228>
 8001f42:	7dfb      	ldrb	r3, [r7, #23]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d007      	beq.n	8001f58 <przelicz_kat+0x228>
			return (int16_t)(predkosc);
 8001f48:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f50:	ee17 3a90 	vmov	r3, s15
 8001f54:	b21b      	sxth	r3, r3
 8001f56:	e023      	b.n	8001fa0 <przelicz_kat+0x270>
	}
	else if( (L_P == 1) && (dir == 1) ){
 8001f58:	797b      	ldrb	r3, [r7, #5]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00e      	beq.n	8001f7c <przelicz_kat+0x24c>
 8001f5e:	7dfb      	ldrb	r3, [r7, #23]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00b      	beq.n	8001f7c <przelicz_kat+0x24c>
			return (int16_t)(stosunek*predkosc);
 8001f64:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f68:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f74:	ee17 3a90 	vmov	r3, s15
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	e011      	b.n	8001fa0 <przelicz_kat+0x270>
	}
	else if( (L_P == 1) && (dir == 0) ){
 8001f7c:	797b      	ldrb	r3, [r7, #5]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00d      	beq.n	8001f9e <przelicz_kat+0x26e>
 8001f82:	7dfb      	ldrb	r3, [r7, #23]
 8001f84:	f083 0301 	eor.w	r3, r3, #1
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d007      	beq.n	8001f9e <przelicz_kat+0x26e>
			return (int16_t)(predkosc);
 8001f8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f96:	ee17 3a90 	vmov	r3, s15
 8001f9a:	b21b      	sxth	r3, r3
 8001f9c:	e000      	b.n	8001fa0 <przelicz_kat+0x270>
	}
	else{return 0;}
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8001fa8:	b68d3135 	.word	0xb68d3135
 8001fac:	40458000 	.word	0x40458000
 8001fb0:	40240000 	.word	0x40240000
 8001fb4:	20000280 	.word	0x20000280
 8001fb8:	20000240 	.word	0x20000240
 8001fbc:	40390000 	.word	0x40390000

08001fc0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == STOP_AW_Pin)
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d113      	bne.n	8001ff8 <HAL_GPIO_EXTI_Callback+0x38>
    {
    	if(HAL_GPIO_ReadPin(STOP_AW_GPIO_Port, STOP_AW_Pin) == GPIO_PIN_SET){
 8001fd0:	2102      	movs	r1, #2
 8001fd2:	4830      	ldr	r0, [pc, #192]	; (8002094 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001fd4:	f001 f91a 	bl	800320c <HAL_GPIO_ReadPin>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d102      	bne.n	8001fe4 <HAL_GPIO_EXTI_Callback+0x24>
    		STOP_AW = 1;
 8001fde:	4b2e      	ldr	r3, [pc, #184]	; (8002098 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	701a      	strb	r2, [r3, #0]
    	}
    	if(HAL_GPIO_ReadPin(STOP_AW_GPIO_Port, STOP_AW_Pin) == GPIO_PIN_RESET){
 8001fe4:	2102      	movs	r1, #2
 8001fe6:	482b      	ldr	r0, [pc, #172]	; (8002094 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001fe8:	f001 f910 	bl	800320c <HAL_GPIO_ReadPin>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d102      	bne.n	8001ff8 <HAL_GPIO_EXTI_Callback+0x38>
    	    STOP_AW = 0;
 8001ff2:	4b29      	ldr	r3, [pc, #164]	; (8002098 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
    	}

    }

    if(GPIO_Pin == KRANCOWKA_1_Pin)
 8001ff8:	88fb      	ldrh	r3, [r7, #6]
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d121      	bne.n	8002042 <HAL_GPIO_EXTI_Callback+0x82>
    {
    	if((HAL_GPIO_ReadPin(KRANCOWKA_1_GPIO_Port, KRANCOWKA_1_Pin) == GPIO_PIN_SET) || (HAL_GPIO_ReadPin(KRANCOWKA_2_GPIO_Port, KRANCOWKA_2_Pin) == GPIO_PIN_SET)){
 8001ffe:	2108      	movs	r1, #8
 8002000:	4826      	ldr	r0, [pc, #152]	; (800209c <HAL_GPIO_EXTI_Callback+0xdc>)
 8002002:	f001 f903 	bl	800320c <HAL_GPIO_ReadPin>
 8002006:	4603      	mov	r3, r0
 8002008:	2b01      	cmp	r3, #1
 800200a:	d006      	beq.n	800201a <HAL_GPIO_EXTI_Callback+0x5a>
 800200c:	2110      	movs	r1, #16
 800200e:	4823      	ldr	r0, [pc, #140]	; (800209c <HAL_GPIO_EXTI_Callback+0xdc>)
 8002010:	f001 f8fc 	bl	800320c <HAL_GPIO_ReadPin>
 8002014:	4603      	mov	r3, r0
 8002016:	2b01      	cmp	r3, #1
 8002018:	d102      	bne.n	8002020 <HAL_GPIO_EXTI_Callback+0x60>
    		krancowka = 1;
 800201a:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <HAL_GPIO_EXTI_Callback+0xe0>)
 800201c:	2201      	movs	r2, #1
 800201e:	701a      	strb	r2, [r3, #0]
    	}
    	if((HAL_GPIO_ReadPin(KRANCOWKA_1_GPIO_Port, KRANCOWKA_1_Pin) == GPIO_PIN_RESET) && (HAL_GPIO_ReadPin(KRANCOWKA_2_GPIO_Port, KRANCOWKA_2_Pin) == GPIO_PIN_RESET)){
 8002020:	2108      	movs	r1, #8
 8002022:	481e      	ldr	r0, [pc, #120]	; (800209c <HAL_GPIO_EXTI_Callback+0xdc>)
 8002024:	f001 f8f2 	bl	800320c <HAL_GPIO_ReadPin>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d109      	bne.n	8002042 <HAL_GPIO_EXTI_Callback+0x82>
 800202e:	2110      	movs	r1, #16
 8002030:	481a      	ldr	r0, [pc, #104]	; (800209c <HAL_GPIO_EXTI_Callback+0xdc>)
 8002032:	f001 f8eb 	bl	800320c <HAL_GPIO_ReadPin>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d102      	bne.n	8002042 <HAL_GPIO_EXTI_Callback+0x82>
    		krancowka = 0;
 800203c:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <HAL_GPIO_EXTI_Callback+0xe0>)
 800203e:	2200      	movs	r2, #0
 8002040:	701a      	strb	r2, [r3, #0]
    	}
    }

    if(GPIO_Pin == KRANCOWKA_2_Pin)
 8002042:	88fb      	ldrh	r3, [r7, #6]
 8002044:	2b10      	cmp	r3, #16
 8002046:	d121      	bne.n	800208c <HAL_GPIO_EXTI_Callback+0xcc>
    {
    	if((HAL_GPIO_ReadPin(KRANCOWKA_1_GPIO_Port, KRANCOWKA_1_Pin) == GPIO_PIN_SET) || (HAL_GPIO_ReadPin(KRANCOWKA_2_GPIO_Port, KRANCOWKA_2_Pin) == GPIO_PIN_SET)){
 8002048:	2108      	movs	r1, #8
 800204a:	4814      	ldr	r0, [pc, #80]	; (800209c <HAL_GPIO_EXTI_Callback+0xdc>)
 800204c:	f001 f8de 	bl	800320c <HAL_GPIO_ReadPin>
 8002050:	4603      	mov	r3, r0
 8002052:	2b01      	cmp	r3, #1
 8002054:	d006      	beq.n	8002064 <HAL_GPIO_EXTI_Callback+0xa4>
 8002056:	2110      	movs	r1, #16
 8002058:	4810      	ldr	r0, [pc, #64]	; (800209c <HAL_GPIO_EXTI_Callback+0xdc>)
 800205a:	f001 f8d7 	bl	800320c <HAL_GPIO_ReadPin>
 800205e:	4603      	mov	r3, r0
 8002060:	2b01      	cmp	r3, #1
 8002062:	d102      	bne.n	800206a <HAL_GPIO_EXTI_Callback+0xaa>
    		krancowka = 1;
 8002064:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002066:	2201      	movs	r2, #1
 8002068:	701a      	strb	r2, [r3, #0]
    	}
    	if((HAL_GPIO_ReadPin(KRANCOWKA_1_GPIO_Port, KRANCOWKA_1_Pin) == GPIO_PIN_RESET) && (HAL_GPIO_ReadPin(KRANCOWKA_2_GPIO_Port, KRANCOWKA_2_Pin) == GPIO_PIN_RESET)){
 800206a:	2108      	movs	r1, #8
 800206c:	480b      	ldr	r0, [pc, #44]	; (800209c <HAL_GPIO_EXTI_Callback+0xdc>)
 800206e:	f001 f8cd 	bl	800320c <HAL_GPIO_ReadPin>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d109      	bne.n	800208c <HAL_GPIO_EXTI_Callback+0xcc>
 8002078:	2110      	movs	r1, #16
 800207a:	4808      	ldr	r0, [pc, #32]	; (800209c <HAL_GPIO_EXTI_Callback+0xdc>)
 800207c:	f001 f8c6 	bl	800320c <HAL_GPIO_ReadPin>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d102      	bne.n	800208c <HAL_GPIO_EXTI_Callback+0xcc>
    		krancowka = 0;
 8002086:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
    	}
    }

}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	48001400 	.word	0x48001400
 8002098:	20000032 	.word	0x20000032
 800209c:	48000400 	.word	0x48000400
 80020a0:	20000031 	.word	0x20000031

080020a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
	...

080020b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ba:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <HAL_MspInit+0x44>)
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	4a0e      	ldr	r2, [pc, #56]	; (80020f8 <HAL_MspInit+0x44>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6193      	str	r3, [r2, #24]
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <HAL_MspInit+0x44>)
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_MspInit+0x44>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	4a08      	ldr	r2, [pc, #32]	; (80020f8 <HAL_MspInit+0x44>)
 80020d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020dc:	61d3      	str	r3, [r2, #28]
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_MspInit+0x44>)
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e6:	603b      	str	r3, [r7, #0]
 80020e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40021000 	.word	0x40021000

080020fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002100:	e7fe      	b.n	8002100 <NMI_Handler+0x4>

08002102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002106:	e7fe      	b.n	8002106 <HardFault_Handler+0x4>

08002108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800210c:	e7fe      	b.n	800210c <MemManage_Handler+0x4>

0800210e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002112:	e7fe      	b.n	8002112 <BusFault_Handler+0x4>

08002114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002118:	e7fe      	b.n	8002118 <UsageFault_Handler+0x4>

0800211a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800211a:	b480      	push	{r7}
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002148:	f000 fd46 	bl	8002bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}

08002150 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STOP_AW_Pin);
 8002154:	2002      	movs	r0, #2
 8002156:	f001 f889 	bl	800326c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}

0800215e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PC_UART_RX_Pin);
 8002162:	2008      	movs	r0, #8
 8002164:	f001 f882 	bl	800326c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002168:	bf00      	nop
 800216a:	bd80      	pop	{r7, pc}

0800216c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIR_PT_Pin);
 8002170:	2010      	movs	r0, #16
 8002172:	f001 f87b 	bl	800326c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002180:	4802      	ldr	r0, [pc, #8]	; (800218c <USART1_IRQHandler+0x10>)
 8002182:	f003 fec3 	bl	8005f0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	2000044c 	.word	0x2000044c

08002190 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <USART2_IRQHandler+0x10>)
 8002196:	f003 feb9 	bl	8005f0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	200004d0 	.word	0x200004d0

080021a4 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <TIM6_DAC1_IRQHandler+0x10>)
 80021aa:	f002 fe09 	bl	8004dc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	2000031c 	.word	0x2000031c

080021b8 <TIM7_DAC2_IRQHandler>:

/**
  * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
  */
void TIM7_DAC2_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80021bc:	4802      	ldr	r0, [pc, #8]	; (80021c8 <TIM7_DAC2_IRQHandler+0x10>)
 80021be:	f002 fdff 	bl	8004dc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC2_IRQn 1 */

  /* USER CODE END TIM7_DAC2_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000400 	.word	0x20000400

080021cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <SystemInit+0x20>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d6:	4a05      	ldr	r2, [pc, #20]	; (80021ec <SystemInit+0x20>)
 80021d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b096      	sub	sp, #88	; 0x58
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002202:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	60da      	str	r2, [r3, #12]
 8002210:	611a      	str	r2, [r3, #16]
 8002212:	615a      	str	r2, [r3, #20]
 8002214:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002216:	1d3b      	adds	r3, r7, #4
 8002218:	222c      	movs	r2, #44	; 0x2c
 800221a:	2100      	movs	r1, #0
 800221c:	4618      	mov	r0, r3
 800221e:	f004 ff33 	bl	8007088 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002222:	4b4b      	ldr	r3, [pc, #300]	; (8002350 <MX_TIM1_Init+0x160>)
 8002224:	4a4b      	ldr	r2, [pc, #300]	; (8002354 <MX_TIM1_Init+0x164>)
 8002226:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = Pre_20k_360;
 8002228:	4b49      	ldr	r3, [pc, #292]	; (8002350 <MX_TIM1_Init+0x160>)
 800222a:	2213      	movs	r2, #19
 800222c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800222e:	4b48      	ldr	r3, [pc, #288]	; (8002350 <MX_TIM1_Init+0x160>)
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = Counter_20kHz_360;
 8002234:	4b46      	ldr	r3, [pc, #280]	; (8002350 <MX_TIM1_Init+0x160>)
 8002236:	f240 1267 	movw	r2, #359	; 0x167
 800223a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800223c:	4b44      	ldr	r3, [pc, #272]	; (8002350 <MX_TIM1_Init+0x160>)
 800223e:	2200      	movs	r2, #0
 8002240:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002242:	4b43      	ldr	r3, [pc, #268]	; (8002350 <MX_TIM1_Init+0x160>)
 8002244:	2200      	movs	r2, #0
 8002246:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002248:	4b41      	ldr	r3, [pc, #260]	; (8002350 <MX_TIM1_Init+0x160>)
 800224a:	2200      	movs	r2, #0
 800224c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800224e:	4840      	ldr	r0, [pc, #256]	; (8002350 <MX_TIM1_Init+0x160>)
 8002250:	f002 fb3e 	bl	80048d0 <HAL_TIM_PWM_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800225a:	f7ff ff23 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800225e:	2300      	movs	r3, #0
 8002260:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002262:	2300      	movs	r3, #0
 8002264:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002266:	2300      	movs	r3, #0
 8002268:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800226a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800226e:	4619      	mov	r1, r3
 8002270:	4837      	ldr	r0, [pc, #220]	; (8002350 <MX_TIM1_Init+0x160>)
 8002272:	f003 fb45 	bl	8005900 <HAL_TIMEx_MasterConfigSynchronization>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800227c:	f7ff ff12 	bl	80020a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002280:	2360      	movs	r3, #96	; 0x60
 8002282:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002288:	2300      	movs	r3, #0
 800228a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800228c:	2300      	movs	r3, #0
 800228e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002290:	2300      	movs	r3, #0
 8002292:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002294:	2300      	movs	r3, #0
 8002296:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002298:	2300      	movs	r3, #0
 800229a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800229c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022a0:	2200      	movs	r2, #0
 80022a2:	4619      	mov	r1, r3
 80022a4:	482a      	ldr	r0, [pc, #168]	; (8002350 <MX_TIM1_Init+0x160>)
 80022a6:	f002 feab 	bl	8005000 <HAL_TIM_PWM_ConfigChannel>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80022b0:	f7ff fef8 	bl	80020a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022b8:	2204      	movs	r2, #4
 80022ba:	4619      	mov	r1, r3
 80022bc:	4824      	ldr	r0, [pc, #144]	; (8002350 <MX_TIM1_Init+0x160>)
 80022be:	f002 fe9f 	bl	8005000 <HAL_TIM_PWM_ConfigChannel>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80022c8:	f7ff feec 	bl	80020a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022d0:	2208      	movs	r2, #8
 80022d2:	4619      	mov	r1, r3
 80022d4:	481e      	ldr	r0, [pc, #120]	; (8002350 <MX_TIM1_Init+0x160>)
 80022d6:	f002 fe93 	bl	8005000 <HAL_TIM_PWM_ConfigChannel>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80022e0:	f7ff fee0 	bl	80020a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022e8:	220c      	movs	r2, #12
 80022ea:	4619      	mov	r1, r3
 80022ec:	4818      	ldr	r0, [pc, #96]	; (8002350 <MX_TIM1_Init+0x160>)
 80022ee:	f002 fe87 	bl	8005000 <HAL_TIM_PWM_ConfigChannel>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80022f8:	f7ff fed4 	bl	80020a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002300:	2300      	movs	r3, #0
 8002302:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002304:	2300      	movs	r3, #0
 8002306:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002310:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002314:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800231a:	2300      	movs	r3, #0
 800231c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800231e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002324:	2300      	movs	r3, #0
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002328:	2300      	movs	r3, #0
 800232a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800232c:	1d3b      	adds	r3, r7, #4
 800232e:	4619      	mov	r1, r3
 8002330:	4807      	ldr	r0, [pc, #28]	; (8002350 <MX_TIM1_Init+0x160>)
 8002332:	f003 fb53 	bl	80059dc <HAL_TIMEx_ConfigBreakDeadTime>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 800233c:	f7ff feb2 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002340:	4803      	ldr	r0, [pc, #12]	; (8002350 <MX_TIM1_Init+0x160>)
 8002342:	f000 fa85 	bl	8002850 <HAL_TIM_MspPostInit>

}
 8002346:	bf00      	nop
 8002348:	3758      	adds	r7, #88	; 0x58
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000368 	.word	0x20000368
 8002354:	40012c00 	.word	0x40012c00

08002358 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08c      	sub	sp, #48	; 0x30
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800235e:	f107 030c 	add.w	r3, r7, #12
 8002362:	2224      	movs	r2, #36	; 0x24
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f004 fe8e 	bl	8007088 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800236c:	463b      	mov	r3, r7
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002376:	4b21      	ldr	r3, [pc, #132]	; (80023fc <MX_TIM2_Init+0xa4>)
 8002378:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800237c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800237e:	4b1f      	ldr	r3, [pc, #124]	; (80023fc <MX_TIM2_Init+0xa4>)
 8002380:	2200      	movs	r2, #0
 8002382:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002384:	4b1d      	ldr	r3, [pc, #116]	; (80023fc <MX_TIM2_Init+0xa4>)
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800238a:	4b1c      	ldr	r3, [pc, #112]	; (80023fc <MX_TIM2_Init+0xa4>)
 800238c:	f04f 32ff 	mov.w	r2, #4294967295
 8002390:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002392:	4b1a      	ldr	r3, [pc, #104]	; (80023fc <MX_TIM2_Init+0xa4>)
 8002394:	2200      	movs	r2, #0
 8002396:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002398:	4b18      	ldr	r3, [pc, #96]	; (80023fc <MX_TIM2_Init+0xa4>)
 800239a:	2200      	movs	r2, #0
 800239c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800239e:	2303      	movs	r3, #3
 80023a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023a6:	2301      	movs	r3, #1
 80023a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80023ae:	230f      	movs	r3, #15
 80023b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023b2:	2300      	movs	r3, #0
 80023b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023b6:	2301      	movs	r3, #1
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023ba:	2300      	movs	r3, #0
 80023bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80023be:	230f      	movs	r3, #15
 80023c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80023c2:	f107 030c 	add.w	r3, r7, #12
 80023c6:	4619      	mov	r1, r3
 80023c8:	480c      	ldr	r0, [pc, #48]	; (80023fc <MX_TIM2_Init+0xa4>)
 80023ca:	f002 fbc5 	bl	8004b58 <HAL_TIM_Encoder_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80023d4:	f7ff fe66 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023d8:	2300      	movs	r3, #0
 80023da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023dc:	2300      	movs	r3, #0
 80023de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023e0:	463b      	mov	r3, r7
 80023e2:	4619      	mov	r1, r3
 80023e4:	4805      	ldr	r0, [pc, #20]	; (80023fc <MX_TIM2_Init+0xa4>)
 80023e6:	f003 fa8b 	bl	8005900 <HAL_TIMEx_MasterConfigSynchronization>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80023f0:	f7ff fe58 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80023f4:	bf00      	nop
 80023f6:	3730      	adds	r7, #48	; 0x30
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	200003b4 	.word	0x200003b4

08002400 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08c      	sub	sp, #48	; 0x30
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002406:	f107 030c 	add.w	r3, r7, #12
 800240a:	2224      	movs	r2, #36	; 0x24
 800240c:	2100      	movs	r1, #0
 800240e:	4618      	mov	r0, r3
 8002410:	f004 fe3a 	bl	8007088 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002414:	463b      	mov	r3, r7
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]
 800241c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800241e:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <MX_TIM3_Init+0xa4>)
 8002420:	4a21      	ldr	r2, [pc, #132]	; (80024a8 <MX_TIM3_Init+0xa8>)
 8002422:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002424:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <MX_TIM3_Init+0xa4>)
 8002426:	2200      	movs	r2, #0
 8002428:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242a:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <MX_TIM3_Init+0xa4>)
 800242c:	2200      	movs	r2, #0
 800242e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002430:	4b1c      	ldr	r3, [pc, #112]	; (80024a4 <MX_TIM3_Init+0xa4>)
 8002432:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002436:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002438:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <MX_TIM3_Init+0xa4>)
 800243a:	2200      	movs	r2, #0
 800243c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800243e:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <MX_TIM3_Init+0xa4>)
 8002440:	2200      	movs	r2, #0
 8002442:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002444:	2303      	movs	r3, #3
 8002446:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800244c:	2301      	movs	r3, #1
 800244e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002450:	2300      	movs	r3, #0
 8002452:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002454:	230f      	movs	r3, #15
 8002456:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002458:	2300      	movs	r3, #0
 800245a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800245c:	2301      	movs	r3, #1
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002460:	2300      	movs	r3, #0
 8002462:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002464:	230f      	movs	r3, #15
 8002466:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002468:	f107 030c 	add.w	r3, r7, #12
 800246c:	4619      	mov	r1, r3
 800246e:	480d      	ldr	r0, [pc, #52]	; (80024a4 <MX_TIM3_Init+0xa4>)
 8002470:	f002 fb72 	bl	8004b58 <HAL_TIM_Encoder_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800247a:	f7ff fe13 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800247e:	2300      	movs	r3, #0
 8002480:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002482:	2300      	movs	r3, #0
 8002484:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002486:	463b      	mov	r3, r7
 8002488:	4619      	mov	r1, r3
 800248a:	4806      	ldr	r0, [pc, #24]	; (80024a4 <MX_TIM3_Init+0xa4>)
 800248c:	f003 fa38 	bl	8005900 <HAL_TIMEx_MasterConfigSynchronization>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002496:	f7ff fe05 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800249a:	bf00      	nop
 800249c:	3730      	adds	r7, #48	; 0x30
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	200002d0 	.word	0x200002d0
 80024a8:	40000400 	.word	0x40000400

080024ac <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b2:	1d3b      	adds	r3, r7, #4
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80024bc:	4b15      	ldr	r3, [pc, #84]	; (8002514 <MX_TIM6_Init+0x68>)
 80024be:	4a16      	ldr	r2, [pc, #88]	; (8002518 <MX_TIM6_Init+0x6c>)
 80024c0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = Pre_10kHz;
 80024c2:	4b14      	ldr	r3, [pc, #80]	; (8002514 <MX_TIM6_Init+0x68>)
 80024c4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80024c8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ca:	4b12      	ldr	r3, [pc, #72]	; (8002514 <MX_TIM6_Init+0x68>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = Hz10;
 80024d0:	4b10      	ldr	r3, [pc, #64]	; (8002514 <MX_TIM6_Init+0x68>)
 80024d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024d6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024d8:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <MX_TIM6_Init+0x68>)
 80024da:	2200      	movs	r2, #0
 80024dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80024de:	480d      	ldr	r0, [pc, #52]	; (8002514 <MX_TIM6_Init+0x68>)
 80024e0:	f002 f942 	bl	8004768 <HAL_TIM_Base_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80024ea:	f7ff fddb 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ee:	2300      	movs	r3, #0
 80024f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80024f6:	1d3b      	adds	r3, r7, #4
 80024f8:	4619      	mov	r1, r3
 80024fa:	4806      	ldr	r0, [pc, #24]	; (8002514 <MX_TIM6_Init+0x68>)
 80024fc:	f003 fa00 	bl	8005900 <HAL_TIMEx_MasterConfigSynchronization>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002506:	f7ff fdcd 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800250a:	bf00      	nop
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	2000031c 	.word	0x2000031c
 8002518:	40001000 	.word	0x40001000

0800251c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002522:	1d3b      	adds	r3, r7, #4
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800252c:	4b15      	ldr	r3, [pc, #84]	; (8002584 <MX_TIM7_Init+0x68>)
 800252e:	4a16      	ldr	r2, [pc, #88]	; (8002588 <MX_TIM7_Init+0x6c>)
 8002530:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = Pre_10kHz;
 8002532:	4b14      	ldr	r3, [pc, #80]	; (8002584 <MX_TIM7_Init+0x68>)
 8002534:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002538:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800253a:	4b12      	ldr	r3, [pc, #72]	; (8002584 <MX_TIM7_Init+0x68>)
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = Hz10;
 8002540:	4b10      	ldr	r3, [pc, #64]	; (8002584 <MX_TIM7_Init+0x68>)
 8002542:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002546:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002548:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <MX_TIM7_Init+0x68>)
 800254a:	2200      	movs	r2, #0
 800254c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800254e:	480d      	ldr	r0, [pc, #52]	; (8002584 <MX_TIM7_Init+0x68>)
 8002550:	f002 f90a 	bl	8004768 <HAL_TIM_Base_Init>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800255a:	f7ff fda3 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800255e:	2300      	movs	r3, #0
 8002560:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002566:	1d3b      	adds	r3, r7, #4
 8002568:	4619      	mov	r1, r3
 800256a:	4806      	ldr	r0, [pc, #24]	; (8002584 <MX_TIM7_Init+0x68>)
 800256c:	f003 f9c8 	bl	8005900 <HAL_TIMEx_MasterConfigSynchronization>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002576:	f7ff fd95 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20000400 	.word	0x20000400
 8002588:	40001400 	.word	0x40001400

0800258c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b092      	sub	sp, #72	; 0x48
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002592:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	605a      	str	r2, [r3, #4]
 800259c:	609a      	str	r2, [r3, #8]
 800259e:	60da      	str	r2, [r3, #12]
 80025a0:	611a      	str	r2, [r3, #16]
 80025a2:	615a      	str	r2, [r3, #20]
 80025a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025a6:	463b      	mov	r3, r7
 80025a8:	222c      	movs	r2, #44	; 0x2c
 80025aa:	2100      	movs	r1, #0
 80025ac:	4618      	mov	r0, r3
 80025ae:	f004 fd6b 	bl	8007088 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80025b2:	4b31      	ldr	r3, [pc, #196]	; (8002678 <MX_TIM17_Init+0xec>)
 80025b4:	4a31      	ldr	r2, [pc, #196]	; (800267c <MX_TIM17_Init+0xf0>)
 80025b6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = Pre_20k_360;
 80025b8:	4b2f      	ldr	r3, [pc, #188]	; (8002678 <MX_TIM17_Init+0xec>)
 80025ba:	2213      	movs	r2, #19
 80025bc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025be:	4b2e      	ldr	r3, [pc, #184]	; (8002678 <MX_TIM17_Init+0xec>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = Counter_20kHz_360;
 80025c4:	4b2c      	ldr	r3, [pc, #176]	; (8002678 <MX_TIM17_Init+0xec>)
 80025c6:	f240 1267 	movw	r2, #359	; 0x167
 80025ca:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025cc:	4b2a      	ldr	r3, [pc, #168]	; (8002678 <MX_TIM17_Init+0xec>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80025d2:	4b29      	ldr	r3, [pc, #164]	; (8002678 <MX_TIM17_Init+0xec>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025d8:	4b27      	ldr	r3, [pc, #156]	; (8002678 <MX_TIM17_Init+0xec>)
 80025da:	2200      	movs	r2, #0
 80025dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80025de:	4826      	ldr	r0, [pc, #152]	; (8002678 <MX_TIM17_Init+0xec>)
 80025e0:	f002 f8c2 	bl	8004768 <HAL_TIM_Base_Init>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80025ea:	f7ff fd5b 	bl	80020a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80025ee:	4822      	ldr	r0, [pc, #136]	; (8002678 <MX_TIM17_Init+0xec>)
 80025f0:	f002 f96e 	bl	80048d0 <HAL_TIM_PWM_Init>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80025fa:	f7ff fd53 	bl	80020a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025fe:	2360      	movs	r3, #96	; 0x60
 8002600:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002606:	2300      	movs	r3, #0
 8002608:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800260a:	2300      	movs	r3, #0
 800260c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800260e:	2300      	movs	r3, #0
 8002610:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002612:	2300      	movs	r3, #0
 8002614:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002616:	2300      	movs	r3, #0
 8002618:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800261a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800261e:	2200      	movs	r2, #0
 8002620:	4619      	mov	r1, r3
 8002622:	4815      	ldr	r0, [pc, #84]	; (8002678 <MX_TIM17_Init+0xec>)
 8002624:	f002 fcec 	bl	8005000 <HAL_TIM_PWM_ConfigChannel>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 800262e:	f7ff fd39 	bl	80020a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002632:	2300      	movs	r3, #0
 8002634:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002636:	2300      	movs	r3, #0
 8002638:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800263a:	2300      	movs	r3, #0
 800263c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002642:	2300      	movs	r3, #0
 8002644:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002646:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800264a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002650:	2300      	movs	r3, #0
 8002652:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002654:	463b      	mov	r3, r7
 8002656:	4619      	mov	r1, r3
 8002658:	4807      	ldr	r0, [pc, #28]	; (8002678 <MX_TIM17_Init+0xec>)
 800265a:	f003 f9bf 	bl	80059dc <HAL_TIMEx_ConfigBreakDeadTime>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8002664:	f7ff fd1e 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002668:	4803      	ldr	r0, [pc, #12]	; (8002678 <MX_TIM17_Init+0xec>)
 800266a:	f000 f8f1 	bl	8002850 <HAL_TIM_MspPostInit>

}
 800266e:	bf00      	nop
 8002670:	3748      	adds	r7, #72	; 0x48
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000284 	.word	0x20000284
 800267c:	40014800 	.word	0x40014800

08002680 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a0a      	ldr	r2, [pc, #40]	; (80026b8 <HAL_TIM_PWM_MspInit+0x38>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d10b      	bne.n	80026aa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002692:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <HAL_TIM_PWM_MspInit+0x3c>)
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	4a09      	ldr	r2, [pc, #36]	; (80026bc <HAL_TIM_PWM_MspInit+0x3c>)
 8002698:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800269c:	6193      	str	r3, [r2, #24]
 800269e:	4b07      	ldr	r3, [pc, #28]	; (80026bc <HAL_TIM_PWM_MspInit+0x3c>)
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80026aa:	bf00      	nop
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40012c00 	.word	0x40012c00
 80026bc:	40021000 	.word	0x40021000

080026c0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08c      	sub	sp, #48	; 0x30
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c8:	f107 031c 	add.w	r3, r7, #28
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
 80026d6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e0:	d129      	bne.n	8002736 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026e2:	4b2e      	ldr	r3, [pc, #184]	; (800279c <HAL_TIM_Encoder_MspInit+0xdc>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	4a2d      	ldr	r2, [pc, #180]	; (800279c <HAL_TIM_Encoder_MspInit+0xdc>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	61d3      	str	r3, [r2, #28]
 80026ee:	4b2b      	ldr	r3, [pc, #172]	; (800279c <HAL_TIM_Encoder_MspInit+0xdc>)
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	61bb      	str	r3, [r7, #24]
 80026f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fa:	4b28      	ldr	r3, [pc, #160]	; (800279c <HAL_TIM_Encoder_MspInit+0xdc>)
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	4a27      	ldr	r2, [pc, #156]	; (800279c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002704:	6153      	str	r3, [r2, #20]
 8002706:	4b25      	ldr	r3, [pc, #148]	; (800279c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_LT_Pin|ENCODER_B_LT_Pin;
 8002712:	2303      	movs	r3, #3
 8002714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002716:	2302      	movs	r3, #2
 8002718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271e:	2300      	movs	r3, #0
 8002720:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002722:	2301      	movs	r3, #1
 8002724:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002726:	f107 031c 	add.w	r3, r7, #28
 800272a:	4619      	mov	r1, r3
 800272c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002730:	f000 fbfa 	bl	8002f28 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002734:	e02d      	b.n	8002792 <HAL_TIM_Encoder_MspInit+0xd2>
  else if(tim_encoderHandle->Instance==TIM3)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a19      	ldr	r2, [pc, #100]	; (80027a0 <HAL_TIM_Encoder_MspInit+0xe0>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d128      	bne.n	8002792 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002740:	4b16      	ldr	r3, [pc, #88]	; (800279c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	4a15      	ldr	r2, [pc, #84]	; (800279c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002746:	f043 0302 	orr.w	r3, r3, #2
 800274a:	61d3      	str	r3, [r2, #28]
 800274c:	4b13      	ldr	r3, [pc, #76]	; (800279c <HAL_TIM_Encoder_MspInit+0xdc>)
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002758:	4b10      	ldr	r3, [pc, #64]	; (800279c <HAL_TIM_Encoder_MspInit+0xdc>)
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	4a0f      	ldr	r2, [pc, #60]	; (800279c <HAL_TIM_Encoder_MspInit+0xdc>)
 800275e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002762:	6153      	str	r3, [r2, #20]
 8002764:	4b0d      	ldr	r3, [pc, #52]	; (800279c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_A_PT_Pin|ENCODER_B_PT_Pin;
 8002770:	23c0      	movs	r3, #192	; 0xc0
 8002772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002774:	2302      	movs	r3, #2
 8002776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277c:	2300      	movs	r3, #0
 800277e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002780:	2302      	movs	r3, #2
 8002782:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002784:	f107 031c 	add.w	r3, r7, #28
 8002788:	4619      	mov	r1, r3
 800278a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800278e:	f000 fbcb 	bl	8002f28 <HAL_GPIO_Init>
}
 8002792:	bf00      	nop
 8002794:	3730      	adds	r7, #48	; 0x30
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000
 80027a0:	40000400 	.word	0x40000400

080027a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a23      	ldr	r2, [pc, #140]	; (8002840 <HAL_TIM_Base_MspInit+0x9c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d114      	bne.n	80027e0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80027b6:	4b23      	ldr	r3, [pc, #140]	; (8002844 <HAL_TIM_Base_MspInit+0xa0>)
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	4a22      	ldr	r2, [pc, #136]	; (8002844 <HAL_TIM_Base_MspInit+0xa0>)
 80027bc:	f043 0310 	orr.w	r3, r3, #16
 80027c0:	61d3      	str	r3, [r2, #28]
 80027c2:	4b20      	ldr	r3, [pc, #128]	; (8002844 <HAL_TIM_Base_MspInit+0xa0>)
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f003 0310 	and.w	r3, r3, #16
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2100      	movs	r1, #0
 80027d2:	2036      	movs	r0, #54	; 0x36
 80027d4:	f000 fafb 	bl	8002dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80027d8:	2036      	movs	r0, #54	; 0x36
 80027da:	f000 fb14 	bl	8002e06 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80027de:	e02a      	b.n	8002836 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM7)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a18      	ldr	r2, [pc, #96]	; (8002848 <HAL_TIM_Base_MspInit+0xa4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d114      	bne.n	8002814 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80027ea:	4b16      	ldr	r3, [pc, #88]	; (8002844 <HAL_TIM_Base_MspInit+0xa0>)
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	4a15      	ldr	r2, [pc, #84]	; (8002844 <HAL_TIM_Base_MspInit+0xa0>)
 80027f0:	f043 0320 	orr.w	r3, r3, #32
 80027f4:	61d3      	str	r3, [r2, #28]
 80027f6:	4b13      	ldr	r3, [pc, #76]	; (8002844 <HAL_TIM_Base_MspInit+0xa0>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	f003 0320 	and.w	r3, r3, #32
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 0, 0);
 8002802:	2200      	movs	r2, #0
 8002804:	2100      	movs	r1, #0
 8002806:	2037      	movs	r0, #55	; 0x37
 8002808:	f000 fae1 	bl	8002dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 800280c:	2037      	movs	r0, #55	; 0x37
 800280e:	f000 fafa 	bl	8002e06 <HAL_NVIC_EnableIRQ>
}
 8002812:	e010      	b.n	8002836 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM17)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a0c      	ldr	r2, [pc, #48]	; (800284c <HAL_TIM_Base_MspInit+0xa8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d10b      	bne.n	8002836 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <HAL_TIM_Base_MspInit+0xa0>)
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	4a08      	ldr	r2, [pc, #32]	; (8002844 <HAL_TIM_Base_MspInit+0xa0>)
 8002824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002828:	6193      	str	r3, [r2, #24]
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <HAL_TIM_Base_MspInit+0xa0>)
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
}
 8002836:	bf00      	nop
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40001000 	.word	0x40001000
 8002844:	40021000 	.word	0x40021000
 8002848:	40001400 	.word	0x40001400
 800284c:	40014800 	.word	0x40014800

08002850 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08a      	sub	sp, #40	; 0x28
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002858:	f107 0314 	add.w	r3, r7, #20
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a2c      	ldr	r2, [pc, #176]	; (8002920 <HAL_TIM_MspPostInit+0xd0>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d130      	bne.n	80028d4 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002872:	4b2c      	ldr	r3, [pc, #176]	; (8002924 <HAL_TIM_MspPostInit+0xd4>)
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	4a2b      	ldr	r2, [pc, #172]	; (8002924 <HAL_TIM_MspPostInit+0xd4>)
 8002878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800287c:	6153      	str	r3, [r2, #20]
 800287e:	4b29      	ldr	r3, [pc, #164]	; (8002924 <HAL_TIM_MspPostInit+0xd4>)
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM1_LT_Pin|PWM2_PT_Pin|PWM3_LP_Pin;
 800288a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800288e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002890:	2302      	movs	r3, #2
 8002892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	2300      	movs	r3, #0
 8002896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002898:	2300      	movs	r3, #0
 800289a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800289c:	2306      	movs	r3, #6
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a0:	f107 0314 	add.w	r3, r7, #20
 80028a4:	4619      	mov	r1, r3
 80028a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028aa:	f000 fb3d 	bl	8002f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM4_PP_Pin;
 80028ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b4:	2302      	movs	r3, #2
 80028b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028bc:	2300      	movs	r3, #0
 80028be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 80028c0:	230b      	movs	r3, #11
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM4_PP_GPIO_Port, &GPIO_InitStruct);
 80028c4:	f107 0314 	add.w	r3, r7, #20
 80028c8:	4619      	mov	r1, r3
 80028ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ce:	f000 fb2b 	bl	8002f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80028d2:	e020      	b.n	8002916 <HAL_TIM_MspPostInit+0xc6>
  else if(timHandle->Instance==TIM17)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a13      	ldr	r2, [pc, #76]	; (8002928 <HAL_TIM_MspPostInit+0xd8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d11b      	bne.n	8002916 <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028de:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_TIM_MspPostInit+0xd4>)
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	4a10      	ldr	r2, [pc, #64]	; (8002924 <HAL_TIM_MspPostInit+0xd4>)
 80028e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e8:	6153      	str	r3, [r2, #20]
 80028ea:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <HAL_TIM_MspPostInit+0xd4>)
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM5_SERWO_Pin;
 80028f6:	2320      	movs	r3, #32
 80028f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fa:	2302      	movs	r3, #2
 80028fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002902:	2300      	movs	r3, #0
 8002904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8002906:	230a      	movs	r3, #10
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM5_SERWO_GPIO_Port, &GPIO_InitStruct);
 800290a:	f107 0314 	add.w	r3, r7, #20
 800290e:	4619      	mov	r1, r3
 8002910:	4806      	ldr	r0, [pc, #24]	; (800292c <HAL_TIM_MspPostInit+0xdc>)
 8002912:	f000 fb09 	bl	8002f28 <HAL_GPIO_Init>
}
 8002916:	bf00      	nop
 8002918:	3728      	adds	r7, #40	; 0x28
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40012c00 	.word	0x40012c00
 8002924:	40021000 	.word	0x40021000
 8002928:	40014800 	.word	0x40014800
 800292c:	48000400 	.word	0x48000400

08002930 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002934:	4b14      	ldr	r3, [pc, #80]	; (8002988 <MX_USART1_UART_Init+0x58>)
 8002936:	4a15      	ldr	r2, [pc, #84]	; (800298c <MX_USART1_UART_Init+0x5c>)
 8002938:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = UART_115;
 800293a:	4b13      	ldr	r3, [pc, #76]	; (8002988 <MX_USART1_UART_Init+0x58>)
 800293c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002940:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002942:	4b11      	ldr	r3, [pc, #68]	; (8002988 <MX_USART1_UART_Init+0x58>)
 8002944:	2200      	movs	r2, #0
 8002946:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002948:	4b0f      	ldr	r3, [pc, #60]	; (8002988 <MX_USART1_UART_Init+0x58>)
 800294a:	2200      	movs	r2, #0
 800294c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800294e:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <MX_USART1_UART_Init+0x58>)
 8002950:	2200      	movs	r2, #0
 8002952:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <MX_USART1_UART_Init+0x58>)
 8002956:	220c      	movs	r2, #12
 8002958:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800295a:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <MX_USART1_UART_Init+0x58>)
 800295c:	2200      	movs	r2, #0
 800295e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002960:	4b09      	ldr	r3, [pc, #36]	; (8002988 <MX_USART1_UART_Init+0x58>)
 8002962:	2200      	movs	r2, #0
 8002964:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002966:	4b08      	ldr	r3, [pc, #32]	; (8002988 <MX_USART1_UART_Init+0x58>)
 8002968:	2200      	movs	r2, #0
 800296a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800296c:	4b06      	ldr	r3, [pc, #24]	; (8002988 <MX_USART1_UART_Init+0x58>)
 800296e:	2200      	movs	r2, #0
 8002970:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002972:	4805      	ldr	r0, [pc, #20]	; (8002988 <MX_USART1_UART_Init+0x58>)
 8002974:	f003 f8c8 	bl	8005b08 <HAL_UART_Init>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800297e:	f7ff fb91 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	2000044c 	.word	0x2000044c
 800298c:	40013800 	.word	0x40013800

08002990 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002994:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <MX_USART2_UART_Init+0x58>)
 8002996:	4a15      	ldr	r2, [pc, #84]	; (80029ec <MX_USART2_UART_Init+0x5c>)
 8002998:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = UART_230;
 800299a:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <MX_USART2_UART_Init+0x58>)
 800299c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80029a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029a2:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <MX_USART2_UART_Init+0x58>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029a8:	4b0f      	ldr	r3, [pc, #60]	; (80029e8 <MX_USART2_UART_Init+0x58>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029ae:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <MX_USART2_UART_Init+0x58>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029b4:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <MX_USART2_UART_Init+0x58>)
 80029b6:	220c      	movs	r2, #12
 80029b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ba:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <MX_USART2_UART_Init+0x58>)
 80029bc:	2200      	movs	r2, #0
 80029be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029c0:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <MX_USART2_UART_Init+0x58>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029c6:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <MX_USART2_UART_Init+0x58>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029cc:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <MX_USART2_UART_Init+0x58>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029d2:	4805      	ldr	r0, [pc, #20]	; (80029e8 <MX_USART2_UART_Init+0x58>)
 80029d4:	f003 f898 	bl	8005b08 <HAL_UART_Init>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80029de:	f7ff fb61 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	200004d0 	.word	0x200004d0
 80029ec:	40004400 	.word	0x40004400

080029f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08c      	sub	sp, #48	; 0x30
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f8:	f107 031c 	add.w	r3, r7, #28
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	609a      	str	r2, [r3, #8]
 8002a04:	60da      	str	r2, [r3, #12]
 8002a06:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a36      	ldr	r2, [pc, #216]	; (8002ae8 <HAL_UART_MspInit+0xf8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d130      	bne.n	8002a74 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a12:	4b36      	ldr	r3, [pc, #216]	; (8002aec <HAL_UART_MspInit+0xfc>)
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	4a35      	ldr	r2, [pc, #212]	; (8002aec <HAL_UART_MspInit+0xfc>)
 8002a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a1c:	6193      	str	r3, [r2, #24]
 8002a1e:	4b33      	ldr	r3, [pc, #204]	; (8002aec <HAL_UART_MspInit+0xfc>)
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a26:	61bb      	str	r3, [r7, #24]
 8002a28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a2a:	4b30      	ldr	r3, [pc, #192]	; (8002aec <HAL_UART_MspInit+0xfc>)
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	4a2f      	ldr	r2, [pc, #188]	; (8002aec <HAL_UART_MspInit+0xfc>)
 8002a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a34:	6153      	str	r3, [r2, #20]
 8002a36:	4b2d      	ldr	r3, [pc, #180]	; (8002aec <HAL_UART_MspInit+0xfc>)
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = COMM_TO_MASTER_UART_TX_Pin|COMM_TO_MASTER_UART_RX_Pin;
 8002a42:	23c0      	movs	r3, #192	; 0xc0
 8002a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a46:	2302      	movs	r3, #2
 8002a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a52:	2307      	movs	r3, #7
 8002a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a56:	f107 031c 	add.w	r3, r7, #28
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4824      	ldr	r0, [pc, #144]	; (8002af0 <HAL_UART_MspInit+0x100>)
 8002a5e:	f000 fa63 	bl	8002f28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a62:	2200      	movs	r2, #0
 8002a64:	2100      	movs	r1, #0
 8002a66:	2025      	movs	r0, #37	; 0x25
 8002a68:	f000 f9b1 	bl	8002dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a6c:	2025      	movs	r0, #37	; 0x25
 8002a6e:	f000 f9ca 	bl	8002e06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a72:	e035      	b.n	8002ae0 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a1e      	ldr	r2, [pc, #120]	; (8002af4 <HAL_UART_MspInit+0x104>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d130      	bne.n	8002ae0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a7e:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <HAL_UART_MspInit+0xfc>)
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	4a1a      	ldr	r2, [pc, #104]	; (8002aec <HAL_UART_MspInit+0xfc>)
 8002a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a88:	61d3      	str	r3, [r2, #28]
 8002a8a:	4b18      	ldr	r3, [pc, #96]	; (8002aec <HAL_UART_MspInit+0xfc>)
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a96:	4b15      	ldr	r3, [pc, #84]	; (8002aec <HAL_UART_MspInit+0xfc>)
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	4a14      	ldr	r2, [pc, #80]	; (8002aec <HAL_UART_MspInit+0xfc>)
 8002a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa0:	6153      	str	r3, [r2, #20]
 8002aa2:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_UART_MspInit+0xfc>)
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PC_UART_TX_Pin|PC_UART_RX_Pin;
 8002aae:	230c      	movs	r3, #12
 8002ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aba:	2303      	movs	r3, #3
 8002abc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002abe:	2307      	movs	r3, #7
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac2:	f107 031c 	add.w	r3, r7, #28
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002acc:	f000 fa2c 	bl	8002f28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	2026      	movs	r0, #38	; 0x26
 8002ad6:	f000 f97a 	bl	8002dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ada:	2026      	movs	r0, #38	; 0x26
 8002adc:	f000 f993 	bl	8002e06 <HAL_NVIC_EnableIRQ>
}
 8002ae0:	bf00      	nop
 8002ae2:	3730      	adds	r7, #48	; 0x30
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40013800 	.word	0x40013800
 8002aec:	40021000 	.word	0x40021000
 8002af0:	48000400 	.word	0x48000400
 8002af4:	40004400 	.word	0x40004400

08002af8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b30 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002afc:	480d      	ldr	r0, [pc, #52]	; (8002b34 <LoopForever+0x6>)
  ldr r1, =_edata
 8002afe:	490e      	ldr	r1, [pc, #56]	; (8002b38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b00:	4a0e      	ldr	r2, [pc, #56]	; (8002b3c <LoopForever+0xe>)
  movs r3, #0
 8002b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b04:	e002      	b.n	8002b0c <LoopCopyDataInit>

08002b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b0a:	3304      	adds	r3, #4

08002b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b10:	d3f9      	bcc.n	8002b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b12:	4a0b      	ldr	r2, [pc, #44]	; (8002b40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b14:	4c0b      	ldr	r4, [pc, #44]	; (8002b44 <LoopForever+0x16>)
  movs r3, #0
 8002b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b18:	e001      	b.n	8002b1e <LoopFillZerobss>

08002b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b1c:	3204      	adds	r2, #4

08002b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b20:	d3fb      	bcc.n	8002b1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b22:	f7ff fb53 	bl	80021cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b26:	f004 fa8b 	bl	8007040 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b2a:	f7fe fb39 	bl	80011a0 <main>

08002b2e <LoopForever>:

LoopForever:
    b LoopForever
 8002b2e:	e7fe      	b.n	8002b2e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002b30:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b38:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002b3c:	080083d8 	.word	0x080083d8
  ldr r2, =_sbss
 8002b40:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002b44:	20000558 	.word	0x20000558

08002b48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b48:	e7fe      	b.n	8002b48 <ADC1_2_IRQHandler>
	...

08002b4c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b50:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <HAL_Init+0x28>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a07      	ldr	r2, [pc, #28]	; (8002b74 <HAL_Init+0x28>)
 8002b56:	f043 0310 	orr.w	r3, r3, #16
 8002b5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b5c:	2003      	movs	r0, #3
 8002b5e:	f000 f92b 	bl	8002db8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b62:	2000      	movs	r0, #0
 8002b64:	f000 f808 	bl	8002b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b68:	f7ff faa4 	bl	80020b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40022000 	.word	0x40022000

08002b78 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b80:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <HAL_InitTick+0x54>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <HAL_InitTick+0x58>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 f943 	bl	8002e22 <HAL_SYSTICK_Config>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e00e      	b.n	8002bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b0f      	cmp	r3, #15
 8002baa:	d80a      	bhi.n	8002bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bac:	2200      	movs	r2, #0
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb4:	f000 f90b 	bl	8002dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bb8:	4a06      	ldr	r2, [pc, #24]	; (8002bd4 <HAL_InitTick+0x5c>)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	e000      	b.n	8002bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20000008 	.word	0x20000008
 8002bd0:	20000010 	.word	0x20000010
 8002bd4:	2000000c 	.word	0x2000000c

08002bd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bdc:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <HAL_IncTick+0x20>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	461a      	mov	r2, r3
 8002be2:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <HAL_IncTick+0x24>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4413      	add	r3, r2
 8002be8:	4a04      	ldr	r2, [pc, #16]	; (8002bfc <HAL_IncTick+0x24>)
 8002bea:	6013      	str	r3, [r2, #0]
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000010 	.word	0x20000010
 8002bfc:	20000554 	.word	0x20000554

08002c00 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return uwTick;  
 8002c04:	4b03      	ldr	r3, [pc, #12]	; (8002c14 <HAL_GetTick+0x14>)
 8002c06:	681b      	ldr	r3, [r3, #0]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	20000554 	.word	0x20000554

08002c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <__NVIC_SetPriorityGrouping+0x44>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c34:	4013      	ands	r3, r2
 8002c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c4a:	4a04      	ldr	r2, [pc, #16]	; (8002c5c <__NVIC_SetPriorityGrouping+0x44>)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	60d3      	str	r3, [r2, #12]
}
 8002c50:	bf00      	nop
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	e000ed00 	.word	0xe000ed00

08002c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c64:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <__NVIC_GetPriorityGrouping+0x18>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	0a1b      	lsrs	r3, r3, #8
 8002c6a:	f003 0307 	and.w	r3, r3, #7
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	db0b      	blt.n	8002ca6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	f003 021f 	and.w	r2, r3, #31
 8002c94:	4907      	ldr	r1, [pc, #28]	; (8002cb4 <__NVIC_EnableIRQ+0x38>)
 8002c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	e000e100 	.word	0xe000e100

08002cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	6039      	str	r1, [r7, #0]
 8002cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	db0a      	blt.n	8002ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	490c      	ldr	r1, [pc, #48]	; (8002d04 <__NVIC_SetPriority+0x4c>)
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	0112      	lsls	r2, r2, #4
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	440b      	add	r3, r1
 8002cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ce0:	e00a      	b.n	8002cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	4908      	ldr	r1, [pc, #32]	; (8002d08 <__NVIC_SetPriority+0x50>)
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	3b04      	subs	r3, #4
 8002cf0:	0112      	lsls	r2, r2, #4
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	761a      	strb	r2, [r3, #24]
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	e000e100 	.word	0xe000e100
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b089      	sub	sp, #36	; 0x24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f1c3 0307 	rsb	r3, r3, #7
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	bf28      	it	cs
 8002d2a:	2304      	movcs	r3, #4
 8002d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	3304      	adds	r3, #4
 8002d32:	2b06      	cmp	r3, #6
 8002d34:	d902      	bls.n	8002d3c <NVIC_EncodePriority+0x30>
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	3b03      	subs	r3, #3
 8002d3a:	e000      	b.n	8002d3e <NVIC_EncodePriority+0x32>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d40:	f04f 32ff 	mov.w	r2, #4294967295
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43da      	mvns	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	401a      	ands	r2, r3
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d54:	f04f 31ff 	mov.w	r1, #4294967295
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5e:	43d9      	mvns	r1, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d64:	4313      	orrs	r3, r2
         );
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3724      	adds	r7, #36	; 0x24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
	...

08002d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d84:	d301      	bcc.n	8002d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d86:	2301      	movs	r3, #1
 8002d88:	e00f      	b.n	8002daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d8a:	4a0a      	ldr	r2, [pc, #40]	; (8002db4 <SysTick_Config+0x40>)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d92:	210f      	movs	r1, #15
 8002d94:	f04f 30ff 	mov.w	r0, #4294967295
 8002d98:	f7ff ff8e 	bl	8002cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d9c:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <SysTick_Config+0x40>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002da2:	4b04      	ldr	r3, [pc, #16]	; (8002db4 <SysTick_Config+0x40>)
 8002da4:	2207      	movs	r2, #7
 8002da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	e000e010 	.word	0xe000e010

08002db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7ff ff29 	bl	8002c18 <__NVIC_SetPriorityGrouping>
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b086      	sub	sp, #24
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
 8002dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002de0:	f7ff ff3e 	bl	8002c60 <__NVIC_GetPriorityGrouping>
 8002de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	68b9      	ldr	r1, [r7, #8]
 8002dea:	6978      	ldr	r0, [r7, #20]
 8002dec:	f7ff ff8e 	bl	8002d0c <NVIC_EncodePriority>
 8002df0:	4602      	mov	r2, r0
 8002df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002df6:	4611      	mov	r1, r2
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff ff5d 	bl	8002cb8 <__NVIC_SetPriority>
}
 8002dfe:	bf00      	nop
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff ff31 	bl	8002c7c <__NVIC_EnableIRQ>
}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7ff ffa2 	bl	8002d74 <SysTick_Config>
 8002e30:	4603      	mov	r3, r0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d008      	beq.n	8002e5e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2204      	movs	r2, #4
 8002e50:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e020      	b.n	8002ea0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 020e 	bic.w	r2, r2, #14
 8002e6c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0201 	bic.w	r2, r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e86:	2101      	movs	r1, #1
 8002e88:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d005      	beq.n	8002ece <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2204      	movs	r2, #4
 8002ec6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	73fb      	strb	r3, [r7, #15]
 8002ecc:	e027      	b.n	8002f1e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 020e 	bic.w	r2, r2, #14
 8002edc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0201 	bic.w	r2, r2, #1
 8002eec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8002efc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	4798      	blx	r3
    } 
  }
  return status;
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f36:	e14e      	b.n	80031d6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	fa01 f303 	lsl.w	r3, r1, r3
 8002f44:	4013      	ands	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 8140 	beq.w	80031d0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d005      	beq.n	8002f68 <HAL_GPIO_Init+0x40>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d130      	bne.n	8002fca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	2203      	movs	r2, #3
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	68da      	ldr	r2, [r3, #12]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4013      	ands	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	091b      	lsrs	r3, r3, #4
 8002fb4:	f003 0201 	and.w	r2, r3, #1
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	2b03      	cmp	r3, #3
 8002fd4:	d017      	beq.n	8003006 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4013      	ands	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d123      	bne.n	800305a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	08da      	lsrs	r2, r3, #3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3208      	adds	r2, #8
 800301a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800301e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	220f      	movs	r2, #15
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	43db      	mvns	r3, r3
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	4013      	ands	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	691a      	ldr	r2, [r3, #16]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	08da      	lsrs	r2, r3, #3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3208      	adds	r2, #8
 8003054:	6939      	ldr	r1, [r7, #16]
 8003056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	2203      	movs	r2, #3
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43db      	mvns	r3, r3
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4013      	ands	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 0203 	and.w	r2, r3, #3
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 809a 	beq.w	80031d0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800309c:	4b55      	ldr	r3, [pc, #340]	; (80031f4 <HAL_GPIO_Init+0x2cc>)
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	4a54      	ldr	r2, [pc, #336]	; (80031f4 <HAL_GPIO_Init+0x2cc>)
 80030a2:	f043 0301 	orr.w	r3, r3, #1
 80030a6:	6193      	str	r3, [r2, #24]
 80030a8:	4b52      	ldr	r3, [pc, #328]	; (80031f4 <HAL_GPIO_Init+0x2cc>)
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030b4:	4a50      	ldr	r2, [pc, #320]	; (80031f8 <HAL_GPIO_Init+0x2d0>)
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	089b      	lsrs	r3, r3, #2
 80030ba:	3302      	adds	r3, #2
 80030bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	220f      	movs	r2, #15
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4013      	ands	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030de:	d013      	beq.n	8003108 <HAL_GPIO_Init+0x1e0>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a46      	ldr	r2, [pc, #280]	; (80031fc <HAL_GPIO_Init+0x2d4>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d00d      	beq.n	8003104 <HAL_GPIO_Init+0x1dc>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a45      	ldr	r2, [pc, #276]	; (8003200 <HAL_GPIO_Init+0x2d8>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d007      	beq.n	8003100 <HAL_GPIO_Init+0x1d8>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a44      	ldr	r2, [pc, #272]	; (8003204 <HAL_GPIO_Init+0x2dc>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d101      	bne.n	80030fc <HAL_GPIO_Init+0x1d4>
 80030f8:	2303      	movs	r3, #3
 80030fa:	e006      	b.n	800310a <HAL_GPIO_Init+0x1e2>
 80030fc:	2305      	movs	r3, #5
 80030fe:	e004      	b.n	800310a <HAL_GPIO_Init+0x1e2>
 8003100:	2302      	movs	r3, #2
 8003102:	e002      	b.n	800310a <HAL_GPIO_Init+0x1e2>
 8003104:	2301      	movs	r3, #1
 8003106:	e000      	b.n	800310a <HAL_GPIO_Init+0x1e2>
 8003108:	2300      	movs	r3, #0
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	f002 0203 	and.w	r2, r2, #3
 8003110:	0092      	lsls	r2, r2, #2
 8003112:	4093      	lsls	r3, r2
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4313      	orrs	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800311a:	4937      	ldr	r1, [pc, #220]	; (80031f8 <HAL_GPIO_Init+0x2d0>)
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	089b      	lsrs	r3, r3, #2
 8003120:	3302      	adds	r3, #2
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003128:	4b37      	ldr	r3, [pc, #220]	; (8003208 <HAL_GPIO_Init+0x2e0>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	43db      	mvns	r3, r3
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4013      	ands	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4313      	orrs	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800314c:	4a2e      	ldr	r2, [pc, #184]	; (8003208 <HAL_GPIO_Init+0x2e0>)
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003152:	4b2d      	ldr	r3, [pc, #180]	; (8003208 <HAL_GPIO_Init+0x2e0>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	43db      	mvns	r3, r3
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	4013      	ands	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003176:	4a24      	ldr	r2, [pc, #144]	; (8003208 <HAL_GPIO_Init+0x2e0>)
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800317c:	4b22      	ldr	r3, [pc, #136]	; (8003208 <HAL_GPIO_Init+0x2e0>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	43db      	mvns	r3, r3
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4013      	ands	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80031a0:	4a19      	ldr	r2, [pc, #100]	; (8003208 <HAL_GPIO_Init+0x2e0>)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031a6:	4b18      	ldr	r3, [pc, #96]	; (8003208 <HAL_GPIO_Init+0x2e0>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	43db      	mvns	r3, r3
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4013      	ands	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80031ca:	4a0f      	ldr	r2, [pc, #60]	; (8003208 <HAL_GPIO_Init+0x2e0>)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	3301      	adds	r3, #1
 80031d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	fa22 f303 	lsr.w	r3, r2, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f47f aea9 	bne.w	8002f38 <HAL_GPIO_Init+0x10>
  }
}
 80031e6:	bf00      	nop
 80031e8:	bf00      	nop
 80031ea:	371c      	adds	r7, #28
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	40021000 	.word	0x40021000
 80031f8:	40010000 	.word	0x40010000
 80031fc:	48000400 	.word	0x48000400
 8003200:	48000800 	.word	0x48000800
 8003204:	48000c00 	.word	0x48000c00
 8003208:	40010400 	.word	0x40010400

0800320c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	887b      	ldrh	r3, [r7, #2]
 800321e:	4013      	ands	r3, r2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003224:	2301      	movs	r3, #1
 8003226:	73fb      	strb	r3, [r7, #15]
 8003228:	e001      	b.n	800322e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800322a:	2300      	movs	r3, #0
 800322c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800322e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	807b      	strh	r3, [r7, #2]
 8003248:	4613      	mov	r3, r2
 800324a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800324c:	787b      	ldrb	r3, [r7, #1]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003252:	887a      	ldrh	r2, [r7, #2]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003258:	e002      	b.n	8003260 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800325a:	887a      	ldrh	r2, [r7, #2]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003276:	4b08      	ldr	r3, [pc, #32]	; (8003298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003278:	695a      	ldr	r2, [r3, #20]
 800327a:	88fb      	ldrh	r3, [r7, #6]
 800327c:	4013      	ands	r3, r2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d006      	beq.n	8003290 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003282:	4a05      	ldr	r2, [pc, #20]	; (8003298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003284:	88fb      	ldrh	r3, [r7, #6]
 8003286:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003288:	88fb      	ldrh	r3, [r7, #6]
 800328a:	4618      	mov	r0, r3
 800328c:	f7fe fe98 	bl	8001fc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003290:	bf00      	nop
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40010400 	.word	0x40010400

0800329c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	1d3b      	adds	r3, r7, #4
 80032a6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032a8:	1d3b      	adds	r3, r7, #4
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d102      	bne.n	80032b6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	f000 bef4 	b.w	800409e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032b6:	1d3b      	adds	r3, r7, #4
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 816a 	beq.w	800359a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80032c6:	4bb3      	ldr	r3, [pc, #716]	; (8003594 <HAL_RCC_OscConfig+0x2f8>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f003 030c 	and.w	r3, r3, #12
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d00c      	beq.n	80032ec <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032d2:	4bb0      	ldr	r3, [pc, #704]	; (8003594 <HAL_RCC_OscConfig+0x2f8>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b08      	cmp	r3, #8
 80032dc:	d159      	bne.n	8003392 <HAL_RCC_OscConfig+0xf6>
 80032de:	4bad      	ldr	r3, [pc, #692]	; (8003594 <HAL_RCC_OscConfig+0x2f8>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ea:	d152      	bne.n	8003392 <HAL_RCC_OscConfig+0xf6>
 80032ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032f0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80032f8:	fa93 f3a3 	rbit	r3, r3
 80032fc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003300:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003304:	fab3 f383 	clz	r3, r3
 8003308:	b2db      	uxtb	r3, r3
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	b2db      	uxtb	r3, r3
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b01      	cmp	r3, #1
 8003316:	d102      	bne.n	800331e <HAL_RCC_OscConfig+0x82>
 8003318:	4b9e      	ldr	r3, [pc, #632]	; (8003594 <HAL_RCC_OscConfig+0x2f8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	e015      	b.n	800334a <HAL_RCC_OscConfig+0xae>
 800331e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003322:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800332a:	fa93 f3a3 	rbit	r3, r3
 800332e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003332:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003336:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800333a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800333e:	fa93 f3a3 	rbit	r3, r3
 8003342:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003346:	4b93      	ldr	r3, [pc, #588]	; (8003594 <HAL_RCC_OscConfig+0x2f8>)
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800334e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003352:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003356:	fa92 f2a2 	rbit	r2, r2
 800335a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800335e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003362:	fab2 f282 	clz	r2, r2
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	f042 0220 	orr.w	r2, r2, #32
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	f002 021f 	and.w	r2, r2, #31
 8003372:	2101      	movs	r1, #1
 8003374:	fa01 f202 	lsl.w	r2, r1, r2
 8003378:	4013      	ands	r3, r2
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 810c 	beq.w	8003598 <HAL_RCC_OscConfig+0x2fc>
 8003380:	1d3b      	adds	r3, r7, #4
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	f040 8106 	bne.w	8003598 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	f000 be86 	b.w	800409e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003392:	1d3b      	adds	r3, r7, #4
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800339c:	d106      	bne.n	80033ac <HAL_RCC_OscConfig+0x110>
 800339e:	4b7d      	ldr	r3, [pc, #500]	; (8003594 <HAL_RCC_OscConfig+0x2f8>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a7c      	ldr	r2, [pc, #496]	; (8003594 <HAL_RCC_OscConfig+0x2f8>)
 80033a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	e030      	b.n	800340e <HAL_RCC_OscConfig+0x172>
 80033ac:	1d3b      	adds	r3, r7, #4
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10c      	bne.n	80033d0 <HAL_RCC_OscConfig+0x134>
 80033b6:	4b77      	ldr	r3, [pc, #476]	; (8003594 <HAL_RCC_OscConfig+0x2f8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a76      	ldr	r2, [pc, #472]	; (8003594 <HAL_RCC_OscConfig+0x2f8>)
 80033bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	4b74      	ldr	r3, [pc, #464]	; (8003594 <HAL_RCC_OscConfig+0x2f8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a73      	ldr	r2, [pc, #460]	; (8003594 <HAL_RCC_OscConfig+0x2f8>)
 80033c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	e01e      	b.n	800340e <HAL_RCC_OscConfig+0x172>
 80033d0:	1d3b      	adds	r3, r7, #4
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033da:	d10c      	bne.n	80033f6 <HAL_RCC_OscConfig+0x15a>
 80033dc:	4b6d      	ldr	r3, [pc, #436]	; (8003594 <HAL_RCC_OscConfig+0x2f8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a6c      	ldr	r2, [pc, #432]	; (8003594 <HAL_RCC_OscConfig+0x2f8>)
 80033e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	4b6a      	ldr	r3, [pc, #424]	; (8003594 <HAL_RCC_OscConfig+0x2f8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a69      	ldr	r2, [pc, #420]	; (8003594 <HAL_RCC_OscConfig+0x2f8>)
 80033ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	e00b      	b.n	800340e <HAL_RCC_OscConfig+0x172>
 80033f6:	4b67      	ldr	r3, [pc, #412]	; (8003594 <HAL_RCC_OscConfig+0x2f8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a66      	ldr	r2, [pc, #408]	; (8003594 <HAL_RCC_OscConfig+0x2f8>)
 80033fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	4b64      	ldr	r3, [pc, #400]	; (8003594 <HAL_RCC_OscConfig+0x2f8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a63      	ldr	r2, [pc, #396]	; (8003594 <HAL_RCC_OscConfig+0x2f8>)
 8003408:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800340c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800340e:	4b61      	ldr	r3, [pc, #388]	; (8003594 <HAL_RCC_OscConfig+0x2f8>)
 8003410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003412:	f023 020f 	bic.w	r2, r3, #15
 8003416:	1d3b      	adds	r3, r7, #4
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	495d      	ldr	r1, [pc, #372]	; (8003594 <HAL_RCC_OscConfig+0x2f8>)
 800341e:	4313      	orrs	r3, r2
 8003420:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003422:	1d3b      	adds	r3, r7, #4
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d059      	beq.n	80034e0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7ff fbe8 	bl	8002c00 <HAL_GetTick>
 8003430:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003434:	e00a      	b.n	800344c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003436:	f7ff fbe3 	bl	8002c00 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	; 0x64
 8003444:	d902      	bls.n	800344c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	f000 be29 	b.w	800409e <HAL_RCC_OscConfig+0xe02>
 800344c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003450:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003454:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003458:	fa93 f3a3 	rbit	r3, r3
 800345c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003460:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003464:	fab3 f383 	clz	r3, r3
 8003468:	b2db      	uxtb	r3, r3
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	b2db      	uxtb	r3, r3
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b01      	cmp	r3, #1
 8003476:	d102      	bne.n	800347e <HAL_RCC_OscConfig+0x1e2>
 8003478:	4b46      	ldr	r3, [pc, #280]	; (8003594 <HAL_RCC_OscConfig+0x2f8>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	e015      	b.n	80034aa <HAL_RCC_OscConfig+0x20e>
 800347e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003482:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800348a:	fa93 f3a3 	rbit	r3, r3
 800348e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003492:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003496:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800349a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800349e:	fa93 f3a3 	rbit	r3, r3
 80034a2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80034a6:	4b3b      	ldr	r3, [pc, #236]	; (8003594 <HAL_RCC_OscConfig+0x2f8>)
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034ae:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80034b2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80034b6:	fa92 f2a2 	rbit	r2, r2
 80034ba:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80034be:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80034c2:	fab2 f282 	clz	r2, r2
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	f042 0220 	orr.w	r2, r2, #32
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	f002 021f 	and.w	r2, r2, #31
 80034d2:	2101      	movs	r1, #1
 80034d4:	fa01 f202 	lsl.w	r2, r1, r2
 80034d8:	4013      	ands	r3, r2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0ab      	beq.n	8003436 <HAL_RCC_OscConfig+0x19a>
 80034de:	e05c      	b.n	800359a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e0:	f7ff fb8e 	bl	8002c00 <HAL_GetTick>
 80034e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034e8:	e00a      	b.n	8003500 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034ea:	f7ff fb89 	bl	8002c00 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b64      	cmp	r3, #100	; 0x64
 80034f8:	d902      	bls.n	8003500 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	f000 bdcf 	b.w	800409e <HAL_RCC_OscConfig+0xe02>
 8003500:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003504:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003508:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800350c:	fa93 f3a3 	rbit	r3, r3
 8003510:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003514:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003518:	fab3 f383 	clz	r3, r3
 800351c:	b2db      	uxtb	r3, r3
 800351e:	095b      	lsrs	r3, r3, #5
 8003520:	b2db      	uxtb	r3, r3
 8003522:	f043 0301 	orr.w	r3, r3, #1
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b01      	cmp	r3, #1
 800352a:	d102      	bne.n	8003532 <HAL_RCC_OscConfig+0x296>
 800352c:	4b19      	ldr	r3, [pc, #100]	; (8003594 <HAL_RCC_OscConfig+0x2f8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	e015      	b.n	800355e <HAL_RCC_OscConfig+0x2c2>
 8003532:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003536:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800353e:	fa93 f3a3 	rbit	r3, r3
 8003542:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003546:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800354a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800354e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003552:	fa93 f3a3 	rbit	r3, r3
 8003556:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800355a:	4b0e      	ldr	r3, [pc, #56]	; (8003594 <HAL_RCC_OscConfig+0x2f8>)
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003562:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003566:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800356a:	fa92 f2a2 	rbit	r2, r2
 800356e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003572:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003576:	fab2 f282 	clz	r2, r2
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	f042 0220 	orr.w	r2, r2, #32
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	f002 021f 	and.w	r2, r2, #31
 8003586:	2101      	movs	r1, #1
 8003588:	fa01 f202 	lsl.w	r2, r1, r2
 800358c:	4013      	ands	r3, r2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1ab      	bne.n	80034ea <HAL_RCC_OscConfig+0x24e>
 8003592:	e002      	b.n	800359a <HAL_RCC_OscConfig+0x2fe>
 8003594:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800359a:	1d3b      	adds	r3, r7, #4
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 816f 	beq.w	8003888 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80035aa:	4bd0      	ldr	r3, [pc, #832]	; (80038ec <HAL_RCC_OscConfig+0x650>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f003 030c 	and.w	r3, r3, #12
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00b      	beq.n	80035ce <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80035b6:	4bcd      	ldr	r3, [pc, #820]	; (80038ec <HAL_RCC_OscConfig+0x650>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f003 030c 	and.w	r3, r3, #12
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d16c      	bne.n	800369c <HAL_RCC_OscConfig+0x400>
 80035c2:	4bca      	ldr	r3, [pc, #808]	; (80038ec <HAL_RCC_OscConfig+0x650>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d166      	bne.n	800369c <HAL_RCC_OscConfig+0x400>
 80035ce:	2302      	movs	r3, #2
 80035d0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80035d8:	fa93 f3a3 	rbit	r3, r3
 80035dc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80035e0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035e4:	fab3 f383 	clz	r3, r3
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d102      	bne.n	80035fe <HAL_RCC_OscConfig+0x362>
 80035f8:	4bbc      	ldr	r3, [pc, #752]	; (80038ec <HAL_RCC_OscConfig+0x650>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	e013      	b.n	8003626 <HAL_RCC_OscConfig+0x38a>
 80035fe:	2302      	movs	r3, #2
 8003600:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003604:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003608:	fa93 f3a3 	rbit	r3, r3
 800360c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003610:	2302      	movs	r3, #2
 8003612:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003616:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800361a:	fa93 f3a3 	rbit	r3, r3
 800361e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003622:	4bb2      	ldr	r3, [pc, #712]	; (80038ec <HAL_RCC_OscConfig+0x650>)
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	2202      	movs	r2, #2
 8003628:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800362c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003630:	fa92 f2a2 	rbit	r2, r2
 8003634:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003638:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800363c:	fab2 f282 	clz	r2, r2
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	f042 0220 	orr.w	r2, r2, #32
 8003646:	b2d2      	uxtb	r2, r2
 8003648:	f002 021f 	and.w	r2, r2, #31
 800364c:	2101      	movs	r1, #1
 800364e:	fa01 f202 	lsl.w	r2, r1, r2
 8003652:	4013      	ands	r3, r2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d007      	beq.n	8003668 <HAL_RCC_OscConfig+0x3cc>
 8003658:	1d3b      	adds	r3, r7, #4
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d002      	beq.n	8003668 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f000 bd1b 	b.w	800409e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003668:	4ba0      	ldr	r3, [pc, #640]	; (80038ec <HAL_RCC_OscConfig+0x650>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003670:	1d3b      	adds	r3, r7, #4
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	21f8      	movs	r1, #248	; 0xf8
 8003678:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003680:	fa91 f1a1 	rbit	r1, r1
 8003684:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003688:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800368c:	fab1 f181 	clz	r1, r1
 8003690:	b2c9      	uxtb	r1, r1
 8003692:	408b      	lsls	r3, r1
 8003694:	4995      	ldr	r1, [pc, #596]	; (80038ec <HAL_RCC_OscConfig+0x650>)
 8003696:	4313      	orrs	r3, r2
 8003698:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800369a:	e0f5      	b.n	8003888 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800369c:	1d3b      	adds	r3, r7, #4
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 8085 	beq.w	80037b2 <HAL_RCC_OscConfig+0x516>
 80036a8:	2301      	movs	r3, #1
 80036aa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ae:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80036b2:	fa93 f3a3 	rbit	r3, r3
 80036b6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80036ba:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	461a      	mov	r2, r3
 80036d0:	2301      	movs	r3, #1
 80036d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d4:	f7ff fa94 	bl	8002c00 <HAL_GetTick>
 80036d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036dc:	e00a      	b.n	80036f4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036de:	f7ff fa8f 	bl	8002c00 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d902      	bls.n	80036f4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	f000 bcd5 	b.w	800409e <HAL_RCC_OscConfig+0xe02>
 80036f4:	2302      	movs	r3, #2
 80036f6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80036fe:	fa93 f3a3 	rbit	r3, r3
 8003702:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003706:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800370a:	fab3 f383 	clz	r3, r3
 800370e:	b2db      	uxtb	r3, r3
 8003710:	095b      	lsrs	r3, r3, #5
 8003712:	b2db      	uxtb	r3, r3
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b01      	cmp	r3, #1
 800371c:	d102      	bne.n	8003724 <HAL_RCC_OscConfig+0x488>
 800371e:	4b73      	ldr	r3, [pc, #460]	; (80038ec <HAL_RCC_OscConfig+0x650>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	e013      	b.n	800374c <HAL_RCC_OscConfig+0x4b0>
 8003724:	2302      	movs	r3, #2
 8003726:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800372e:	fa93 f3a3 	rbit	r3, r3
 8003732:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003736:	2302      	movs	r3, #2
 8003738:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800373c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003740:	fa93 f3a3 	rbit	r3, r3
 8003744:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003748:	4b68      	ldr	r3, [pc, #416]	; (80038ec <HAL_RCC_OscConfig+0x650>)
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	2202      	movs	r2, #2
 800374e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003752:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003756:	fa92 f2a2 	rbit	r2, r2
 800375a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800375e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003762:	fab2 f282 	clz	r2, r2
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	f042 0220 	orr.w	r2, r2, #32
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	f002 021f 	and.w	r2, r2, #31
 8003772:	2101      	movs	r1, #1
 8003774:	fa01 f202 	lsl.w	r2, r1, r2
 8003778:	4013      	ands	r3, r2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0af      	beq.n	80036de <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800377e:	4b5b      	ldr	r3, [pc, #364]	; (80038ec <HAL_RCC_OscConfig+0x650>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003786:	1d3b      	adds	r3, r7, #4
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	21f8      	movs	r1, #248	; 0xf8
 800378e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003792:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003796:	fa91 f1a1 	rbit	r1, r1
 800379a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800379e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80037a2:	fab1 f181 	clz	r1, r1
 80037a6:	b2c9      	uxtb	r1, r1
 80037a8:	408b      	lsls	r3, r1
 80037aa:	4950      	ldr	r1, [pc, #320]	; (80038ec <HAL_RCC_OscConfig+0x650>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	600b      	str	r3, [r1, #0]
 80037b0:	e06a      	b.n	8003888 <HAL_RCC_OscConfig+0x5ec>
 80037b2:	2301      	movs	r3, #1
 80037b4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80037bc:	fa93 f3a3 	rbit	r3, r3
 80037c0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80037c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037c8:	fab3 f383 	clz	r3, r3
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	461a      	mov	r2, r3
 80037da:	2300      	movs	r3, #0
 80037dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037de:	f7ff fa0f 	bl	8002c00 <HAL_GetTick>
 80037e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e6:	e00a      	b.n	80037fe <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037e8:	f7ff fa0a 	bl	8002c00 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d902      	bls.n	80037fe <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	f000 bc50 	b.w	800409e <HAL_RCC_OscConfig+0xe02>
 80037fe:	2302      	movs	r3, #2
 8003800:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003804:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003808:	fa93 f3a3 	rbit	r3, r3
 800380c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003810:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003814:	fab3 f383 	clz	r3, r3
 8003818:	b2db      	uxtb	r3, r3
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f043 0301 	orr.w	r3, r3, #1
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	d102      	bne.n	800382e <HAL_RCC_OscConfig+0x592>
 8003828:	4b30      	ldr	r3, [pc, #192]	; (80038ec <HAL_RCC_OscConfig+0x650>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	e013      	b.n	8003856 <HAL_RCC_OscConfig+0x5ba>
 800382e:	2302      	movs	r3, #2
 8003830:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003834:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003838:	fa93 f3a3 	rbit	r3, r3
 800383c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003840:	2302      	movs	r3, #2
 8003842:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003846:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800384a:	fa93 f3a3 	rbit	r3, r3
 800384e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003852:	4b26      	ldr	r3, [pc, #152]	; (80038ec <HAL_RCC_OscConfig+0x650>)
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	2202      	movs	r2, #2
 8003858:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800385c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003860:	fa92 f2a2 	rbit	r2, r2
 8003864:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003868:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800386c:	fab2 f282 	clz	r2, r2
 8003870:	b2d2      	uxtb	r2, r2
 8003872:	f042 0220 	orr.w	r2, r2, #32
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	f002 021f 	and.w	r2, r2, #31
 800387c:	2101      	movs	r1, #1
 800387e:	fa01 f202 	lsl.w	r2, r1, r2
 8003882:	4013      	ands	r3, r2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1af      	bne.n	80037e8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003888:	1d3b      	adds	r3, r7, #4
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 80da 	beq.w	8003a4c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003898:	1d3b      	adds	r3, r7, #4
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d069      	beq.n	8003976 <HAL_RCC_OscConfig+0x6da>
 80038a2:	2301      	movs	r3, #1
 80038a4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80038ac:	fa93 f3a3 	rbit	r3, r3
 80038b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80038b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038b8:	fab3 f383 	clz	r3, r3
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	461a      	mov	r2, r3
 80038c0:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <HAL_RCC_OscConfig+0x654>)
 80038c2:	4413      	add	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	461a      	mov	r2, r3
 80038c8:	2301      	movs	r3, #1
 80038ca:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038cc:	f7ff f998 	bl	8002c00 <HAL_GetTick>
 80038d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038d4:	e00e      	b.n	80038f4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038d6:	f7ff f993 	bl	8002c00 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d906      	bls.n	80038f4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e3d9      	b.n	800409e <HAL_RCC_OscConfig+0xe02>
 80038ea:	bf00      	nop
 80038ec:	40021000 	.word	0x40021000
 80038f0:	10908120 	.word	0x10908120
 80038f4:	2302      	movs	r3, #2
 80038f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80038fe:	fa93 f3a3 	rbit	r3, r3
 8003902:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003906:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800390a:	2202      	movs	r2, #2
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	fa93 f2a3 	rbit	r2, r3
 8003918:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003922:	2202      	movs	r2, #2
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	fa93 f2a3 	rbit	r2, r3
 8003930:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003934:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003936:	4ba5      	ldr	r3, [pc, #660]	; (8003bcc <HAL_RCC_OscConfig+0x930>)
 8003938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800393a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800393e:	2102      	movs	r1, #2
 8003940:	6019      	str	r1, [r3, #0]
 8003942:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	fa93 f1a3 	rbit	r1, r3
 800394c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003950:	6019      	str	r1, [r3, #0]
  return result;
 8003952:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	fab3 f383 	clz	r3, r3
 800395c:	b2db      	uxtb	r3, r3
 800395e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003962:	b2db      	uxtb	r3, r3
 8003964:	f003 031f 	and.w	r3, r3, #31
 8003968:	2101      	movs	r1, #1
 800396a:	fa01 f303 	lsl.w	r3, r1, r3
 800396e:	4013      	ands	r3, r2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0b0      	beq.n	80038d6 <HAL_RCC_OscConfig+0x63a>
 8003974:	e06a      	b.n	8003a4c <HAL_RCC_OscConfig+0x7b0>
 8003976:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800397a:	2201      	movs	r2, #1
 800397c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	fa93 f2a3 	rbit	r2, r3
 8003988:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800398c:	601a      	str	r2, [r3, #0]
  return result;
 800398e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003992:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003994:	fab3 f383 	clz	r3, r3
 8003998:	b2db      	uxtb	r3, r3
 800399a:	461a      	mov	r2, r3
 800399c:	4b8c      	ldr	r3, [pc, #560]	; (8003bd0 <HAL_RCC_OscConfig+0x934>)
 800399e:	4413      	add	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	461a      	mov	r2, r3
 80039a4:	2300      	movs	r3, #0
 80039a6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a8:	f7ff f92a 	bl	8002c00 <HAL_GetTick>
 80039ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b0:	e009      	b.n	80039c6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039b2:	f7ff f925 	bl	8002c00 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e36b      	b.n	800409e <HAL_RCC_OscConfig+0xe02>
 80039c6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80039ca:	2202      	movs	r2, #2
 80039cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ce:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	fa93 f2a3 	rbit	r2, r3
 80039d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80039e2:	2202      	movs	r2, #2
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	fa93 f2a3 	rbit	r2, r3
 80039f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80039fa:	2202      	movs	r2, #2
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	fa93 f2a3 	rbit	r2, r3
 8003a08:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003a0c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a0e:	4b6f      	ldr	r3, [pc, #444]	; (8003bcc <HAL_RCC_OscConfig+0x930>)
 8003a10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a12:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003a16:	2102      	movs	r1, #2
 8003a18:	6019      	str	r1, [r3, #0]
 8003a1a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	fa93 f1a3 	rbit	r1, r3
 8003a24:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003a28:	6019      	str	r1, [r3, #0]
  return result;
 8003a2a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	fab3 f383 	clz	r3, r3
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	f003 031f 	and.w	r3, r3, #31
 8003a40:	2101      	movs	r1, #1
 8003a42:	fa01 f303 	lsl.w	r3, r1, r3
 8003a46:	4013      	ands	r3, r2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1b2      	bne.n	80039b2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a4c:	1d3b      	adds	r3, r7, #4
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 8158 	beq.w	8003d0c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a62:	4b5a      	ldr	r3, [pc, #360]	; (8003bcc <HAL_RCC_OscConfig+0x930>)
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d112      	bne.n	8003a94 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a6e:	4b57      	ldr	r3, [pc, #348]	; (8003bcc <HAL_RCC_OscConfig+0x930>)
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	4a56      	ldr	r2, [pc, #344]	; (8003bcc <HAL_RCC_OscConfig+0x930>)
 8003a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a78:	61d3      	str	r3, [r2, #28]
 8003a7a:	4b54      	ldr	r3, [pc, #336]	; (8003bcc <HAL_RCC_OscConfig+0x930>)
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003a82:	f107 0308 	add.w	r3, r7, #8
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	f107 0308 	add.w	r3, r7, #8
 8003a8c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a94:	4b4f      	ldr	r3, [pc, #316]	; (8003bd4 <HAL_RCC_OscConfig+0x938>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d11a      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aa0:	4b4c      	ldr	r3, [pc, #304]	; (8003bd4 <HAL_RCC_OscConfig+0x938>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a4b      	ldr	r2, [pc, #300]	; (8003bd4 <HAL_RCC_OscConfig+0x938>)
 8003aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aaa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aac:	f7ff f8a8 	bl	8002c00 <HAL_GetTick>
 8003ab0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab4:	e009      	b.n	8003aca <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab6:	f7ff f8a3 	bl	8002c00 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b64      	cmp	r3, #100	; 0x64
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e2e9      	b.n	800409e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aca:	4b42      	ldr	r3, [pc, #264]	; (8003bd4 <HAL_RCC_OscConfig+0x938>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0ef      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad6:	1d3b      	adds	r3, r7, #4
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d106      	bne.n	8003aee <HAL_RCC_OscConfig+0x852>
 8003ae0:	4b3a      	ldr	r3, [pc, #232]	; (8003bcc <HAL_RCC_OscConfig+0x930>)
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	4a39      	ldr	r2, [pc, #228]	; (8003bcc <HAL_RCC_OscConfig+0x930>)
 8003ae6:	f043 0301 	orr.w	r3, r3, #1
 8003aea:	6213      	str	r3, [r2, #32]
 8003aec:	e02f      	b.n	8003b4e <HAL_RCC_OscConfig+0x8b2>
 8003aee:	1d3b      	adds	r3, r7, #4
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10c      	bne.n	8003b12 <HAL_RCC_OscConfig+0x876>
 8003af8:	4b34      	ldr	r3, [pc, #208]	; (8003bcc <HAL_RCC_OscConfig+0x930>)
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	4a33      	ldr	r2, [pc, #204]	; (8003bcc <HAL_RCC_OscConfig+0x930>)
 8003afe:	f023 0301 	bic.w	r3, r3, #1
 8003b02:	6213      	str	r3, [r2, #32]
 8003b04:	4b31      	ldr	r3, [pc, #196]	; (8003bcc <HAL_RCC_OscConfig+0x930>)
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	4a30      	ldr	r2, [pc, #192]	; (8003bcc <HAL_RCC_OscConfig+0x930>)
 8003b0a:	f023 0304 	bic.w	r3, r3, #4
 8003b0e:	6213      	str	r3, [r2, #32]
 8003b10:	e01d      	b.n	8003b4e <HAL_RCC_OscConfig+0x8b2>
 8003b12:	1d3b      	adds	r3, r7, #4
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	2b05      	cmp	r3, #5
 8003b1a:	d10c      	bne.n	8003b36 <HAL_RCC_OscConfig+0x89a>
 8003b1c:	4b2b      	ldr	r3, [pc, #172]	; (8003bcc <HAL_RCC_OscConfig+0x930>)
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	4a2a      	ldr	r2, [pc, #168]	; (8003bcc <HAL_RCC_OscConfig+0x930>)
 8003b22:	f043 0304 	orr.w	r3, r3, #4
 8003b26:	6213      	str	r3, [r2, #32]
 8003b28:	4b28      	ldr	r3, [pc, #160]	; (8003bcc <HAL_RCC_OscConfig+0x930>)
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	4a27      	ldr	r2, [pc, #156]	; (8003bcc <HAL_RCC_OscConfig+0x930>)
 8003b2e:	f043 0301 	orr.w	r3, r3, #1
 8003b32:	6213      	str	r3, [r2, #32]
 8003b34:	e00b      	b.n	8003b4e <HAL_RCC_OscConfig+0x8b2>
 8003b36:	4b25      	ldr	r3, [pc, #148]	; (8003bcc <HAL_RCC_OscConfig+0x930>)
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	4a24      	ldr	r2, [pc, #144]	; (8003bcc <HAL_RCC_OscConfig+0x930>)
 8003b3c:	f023 0301 	bic.w	r3, r3, #1
 8003b40:	6213      	str	r3, [r2, #32]
 8003b42:	4b22      	ldr	r3, [pc, #136]	; (8003bcc <HAL_RCC_OscConfig+0x930>)
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	4a21      	ldr	r2, [pc, #132]	; (8003bcc <HAL_RCC_OscConfig+0x930>)
 8003b48:	f023 0304 	bic.w	r3, r3, #4
 8003b4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b4e:	1d3b      	adds	r3, r7, #4
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d06b      	beq.n	8003c30 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b58:	f7ff f852 	bl	8002c00 <HAL_GetTick>
 8003b5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b60:	e00b      	b.n	8003b7a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b62:	f7ff f84d 	bl	8002c00 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e291      	b.n	800409e <HAL_RCC_OscConfig+0xe02>
 8003b7a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003b7e:	2202      	movs	r2, #2
 8003b80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b82:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	fa93 f2a3 	rbit	r2, r3
 8003b8c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003b96:	2202      	movs	r2, #2
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	fa93 f2a3 	rbit	r2, r3
 8003ba4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003ba8:	601a      	str	r2, [r3, #0]
  return result;
 8003baa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003bae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb0:	fab3 f383 	clz	r3, r3
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	f043 0302 	orr.w	r3, r3, #2
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d109      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x93c>
 8003bc4:	4b01      	ldr	r3, [pc, #4]	; (8003bcc <HAL_RCC_OscConfig+0x930>)
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	e014      	b.n	8003bf4 <HAL_RCC_OscConfig+0x958>
 8003bca:	bf00      	nop
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	10908120 	.word	0x10908120
 8003bd4:	40007000 	.word	0x40007000
 8003bd8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003bdc:	2202      	movs	r2, #2
 8003bde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	fa93 f2a3 	rbit	r2, r3
 8003bea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	4bbb      	ldr	r3, [pc, #748]	; (8003ee0 <HAL_RCC_OscConfig+0xc44>)
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003bf8:	2102      	movs	r1, #2
 8003bfa:	6011      	str	r1, [r2, #0]
 8003bfc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003c00:	6812      	ldr	r2, [r2, #0]
 8003c02:	fa92 f1a2 	rbit	r1, r2
 8003c06:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003c0a:	6011      	str	r1, [r2, #0]
  return result;
 8003c0c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003c10:	6812      	ldr	r2, [r2, #0]
 8003c12:	fab2 f282 	clz	r2, r2
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	f002 021f 	and.w	r2, r2, #31
 8003c22:	2101      	movs	r1, #1
 8003c24:	fa01 f202 	lsl.w	r2, r1, r2
 8003c28:	4013      	ands	r3, r2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d099      	beq.n	8003b62 <HAL_RCC_OscConfig+0x8c6>
 8003c2e:	e063      	b.n	8003cf8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c30:	f7fe ffe6 	bl	8002c00 <HAL_GetTick>
 8003c34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c38:	e00b      	b.n	8003c52 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c3a:	f7fe ffe1 	bl	8002c00 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e225      	b.n	800409e <HAL_RCC_OscConfig+0xe02>
 8003c52:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003c56:	2202      	movs	r2, #2
 8003c58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	fa93 f2a3 	rbit	r2, r3
 8003c64:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003c6e:	2202      	movs	r2, #2
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	fa93 f2a3 	rbit	r2, r3
 8003c7c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003c80:	601a      	str	r2, [r3, #0]
  return result;
 8003c82:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003c86:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c88:	fab3 f383 	clz	r3, r3
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	f043 0302 	orr.w	r3, r3, #2
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d102      	bne.n	8003ca2 <HAL_RCC_OscConfig+0xa06>
 8003c9c:	4b90      	ldr	r3, [pc, #576]	; (8003ee0 <HAL_RCC_OscConfig+0xc44>)
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	e00d      	b.n	8003cbe <HAL_RCC_OscConfig+0xa22>
 8003ca2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003caa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	fa93 f2a3 	rbit	r2, r3
 8003cb4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	4b89      	ldr	r3, [pc, #548]	; (8003ee0 <HAL_RCC_OscConfig+0xc44>)
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003cc2:	2102      	movs	r1, #2
 8003cc4:	6011      	str	r1, [r2, #0]
 8003cc6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003cca:	6812      	ldr	r2, [r2, #0]
 8003ccc:	fa92 f1a2 	rbit	r1, r2
 8003cd0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003cd4:	6011      	str	r1, [r2, #0]
  return result;
 8003cd6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003cda:	6812      	ldr	r2, [r2, #0]
 8003cdc:	fab2 f282 	clz	r2, r2
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	f002 021f 	and.w	r2, r2, #31
 8003cec:	2101      	movs	r1, #1
 8003cee:	fa01 f202 	lsl.w	r2, r1, r2
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1a0      	bne.n	8003c3a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cf8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d105      	bne.n	8003d0c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d00:	4b77      	ldr	r3, [pc, #476]	; (8003ee0 <HAL_RCC_OscConfig+0xc44>)
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	4a76      	ldr	r2, [pc, #472]	; (8003ee0 <HAL_RCC_OscConfig+0xc44>)
 8003d06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d0a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d0c:	1d3b      	adds	r3, r7, #4
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 81c2 	beq.w	800409c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d18:	4b71      	ldr	r3, [pc, #452]	; (8003ee0 <HAL_RCC_OscConfig+0xc44>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 030c 	and.w	r3, r3, #12
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	f000 819c 	beq.w	800405e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d26:	1d3b      	adds	r3, r7, #4
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	f040 8114 	bne.w	8003f5a <HAL_RCC_OscConfig+0xcbe>
 8003d32:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003d36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	fa93 f2a3 	rbit	r2, r3
 8003d46:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003d4a:	601a      	str	r2, [r3, #0]
  return result;
 8003d4c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003d50:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d52:	fab3 f383 	clz	r3, r3
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	461a      	mov	r2, r3
 8003d64:	2300      	movs	r3, #0
 8003d66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d68:	f7fe ff4a 	bl	8002c00 <HAL_GetTick>
 8003d6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d70:	e009      	b.n	8003d86 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d72:	f7fe ff45 	bl	8002c00 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e18b      	b.n	800409e <HAL_RCC_OscConfig+0xe02>
 8003d86:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003d8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d90:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	fa93 f2a3 	rbit	r2, r3
 8003d9a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003d9e:	601a      	str	r2, [r3, #0]
  return result;
 8003da0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003da4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003da6:	fab3 f383 	clz	r3, r3
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	f043 0301 	orr.w	r3, r3, #1
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d102      	bne.n	8003dc0 <HAL_RCC_OscConfig+0xb24>
 8003dba:	4b49      	ldr	r3, [pc, #292]	; (8003ee0 <HAL_RCC_OscConfig+0xc44>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	e01b      	b.n	8003df8 <HAL_RCC_OscConfig+0xb5c>
 8003dc0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003dc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	fa93 f2a3 	rbit	r2, r3
 8003dd4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003dde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	fa93 f2a3 	rbit	r2, r3
 8003dee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	4b3a      	ldr	r3, [pc, #232]	; (8003ee0 <HAL_RCC_OscConfig+0xc44>)
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003dfc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e00:	6011      	str	r1, [r2, #0]
 8003e02:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003e06:	6812      	ldr	r2, [r2, #0]
 8003e08:	fa92 f1a2 	rbit	r1, r2
 8003e0c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003e10:	6011      	str	r1, [r2, #0]
  return result;
 8003e12:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003e16:	6812      	ldr	r2, [r2, #0]
 8003e18:	fab2 f282 	clz	r2, r2
 8003e1c:	b2d2      	uxtb	r2, r2
 8003e1e:	f042 0220 	orr.w	r2, r2, #32
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	f002 021f 	and.w	r2, r2, #31
 8003e28:	2101      	movs	r1, #1
 8003e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e2e:	4013      	ands	r3, r2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d19e      	bne.n	8003d72 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e34:	4b2a      	ldr	r3, [pc, #168]	; (8003ee0 <HAL_RCC_OscConfig+0xc44>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e3c:	1d3b      	adds	r3, r7, #4
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e42:	1d3b      	adds	r3, r7, #4
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	4925      	ldr	r1, [pc, #148]	; (8003ee0 <HAL_RCC_OscConfig+0xc44>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	604b      	str	r3, [r1, #4]
 8003e50:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	fa93 f2a3 	rbit	r2, r3
 8003e64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e68:	601a      	str	r2, [r3, #0]
  return result;
 8003e6a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e6e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e70:	fab3 f383 	clz	r3, r3
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	461a      	mov	r2, r3
 8003e82:	2301      	movs	r3, #1
 8003e84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e86:	f7fe febb 	bl	8002c00 <HAL_GetTick>
 8003e8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e8e:	e009      	b.n	8003ea4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e90:	f7fe feb6 	bl	8002c00 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e0fc      	b.n	800409e <HAL_RCC_OscConfig+0xe02>
 8003ea4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ea8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003eac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	fa93 f2a3 	rbit	r2, r3
 8003eb8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ebc:	601a      	str	r2, [r3, #0]
  return result;
 8003ebe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ec2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ec4:	fab3 f383 	clz	r3, r3
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	095b      	lsrs	r3, r3, #5
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	f043 0301 	orr.w	r3, r3, #1
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d105      	bne.n	8003ee4 <HAL_RCC_OscConfig+0xc48>
 8003ed8:	4b01      	ldr	r3, [pc, #4]	; (8003ee0 <HAL_RCC_OscConfig+0xc44>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	e01e      	b.n	8003f1c <HAL_RCC_OscConfig+0xc80>
 8003ede:	bf00      	nop
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ee8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003eec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	fa93 f2a3 	rbit	r2, r3
 8003ef8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	fa93 f2a3 	rbit	r2, r3
 8003f12:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	4b63      	ldr	r3, [pc, #396]	; (80040a8 <HAL_RCC_OscConfig+0xe0c>)
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003f20:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f24:	6011      	str	r1, [r2, #0]
 8003f26:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003f2a:	6812      	ldr	r2, [r2, #0]
 8003f2c:	fa92 f1a2 	rbit	r1, r2
 8003f30:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003f34:	6011      	str	r1, [r2, #0]
  return result;
 8003f36:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	fab2 f282 	clz	r2, r2
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	f042 0220 	orr.w	r2, r2, #32
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	f002 021f 	and.w	r2, r2, #31
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f52:	4013      	ands	r3, r2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d09b      	beq.n	8003e90 <HAL_RCC_OscConfig+0xbf4>
 8003f58:	e0a0      	b.n	800409c <HAL_RCC_OscConfig+0xe00>
 8003f5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	fa93 f2a3 	rbit	r2, r3
 8003f6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f72:	601a      	str	r2, [r3, #0]
  return result;
 8003f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f78:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f7a:	fab3 f383 	clz	r3, r3
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f90:	f7fe fe36 	bl	8002c00 <HAL_GetTick>
 8003f94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f98:	e009      	b.n	8003fae <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f9a:	f7fe fe31 	bl	8002c00 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e077      	b.n	800409e <HAL_RCC_OscConfig+0xe02>
 8003fae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	fa93 f2a3 	rbit	r2, r3
 8003fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fc6:	601a      	str	r2, [r3, #0]
  return result;
 8003fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fcc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fce:	fab3 f383 	clz	r3, r3
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	095b      	lsrs	r3, r3, #5
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	f043 0301 	orr.w	r3, r3, #1
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d102      	bne.n	8003fe8 <HAL_RCC_OscConfig+0xd4c>
 8003fe2:	4b31      	ldr	r3, [pc, #196]	; (80040a8 <HAL_RCC_OscConfig+0xe0c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	e01b      	b.n	8004020 <HAL_RCC_OscConfig+0xd84>
 8003fe8:	f107 0320 	add.w	r3, r7, #32
 8003fec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ff0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff2:	f107 0320 	add.w	r3, r7, #32
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	fa93 f2a3 	rbit	r2, r3
 8003ffc:	f107 031c 	add.w	r3, r7, #28
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	f107 0318 	add.w	r3, r7, #24
 8004006:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	f107 0318 	add.w	r3, r7, #24
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	fa93 f2a3 	rbit	r2, r3
 8004016:	f107 0314 	add.w	r3, r7, #20
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	4b22      	ldr	r3, [pc, #136]	; (80040a8 <HAL_RCC_OscConfig+0xe0c>)
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	f107 0210 	add.w	r2, r7, #16
 8004024:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004028:	6011      	str	r1, [r2, #0]
 800402a:	f107 0210 	add.w	r2, r7, #16
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	fa92 f1a2 	rbit	r1, r2
 8004034:	f107 020c 	add.w	r2, r7, #12
 8004038:	6011      	str	r1, [r2, #0]
  return result;
 800403a:	f107 020c 	add.w	r2, r7, #12
 800403e:	6812      	ldr	r2, [r2, #0]
 8004040:	fab2 f282 	clz	r2, r2
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	f042 0220 	orr.w	r2, r2, #32
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	f002 021f 	and.w	r2, r2, #31
 8004050:	2101      	movs	r1, #1
 8004052:	fa01 f202 	lsl.w	r2, r1, r2
 8004056:	4013      	ands	r3, r2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d19e      	bne.n	8003f9a <HAL_RCC_OscConfig+0xcfe>
 800405c:	e01e      	b.n	800409c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800405e:	1d3b      	adds	r3, r7, #4
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e018      	b.n	800409e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800406c:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <HAL_RCC_OscConfig+0xe0c>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004074:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004078:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800407c:	1d3b      	adds	r3, r7, #4
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	429a      	cmp	r2, r3
 8004084:	d108      	bne.n	8004098 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004086:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800408a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800408e:	1d3b      	adds	r3, r7, #4
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004094:	429a      	cmp	r2, r3
 8004096:	d001      	beq.n	800409c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e000      	b.n	800409e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40021000 	.word	0x40021000

080040ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b09e      	sub	sp, #120	; 0x78
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e162      	b.n	800438a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040c4:	4b90      	ldr	r3, [pc, #576]	; (8004308 <HAL_RCC_ClockConfig+0x25c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d910      	bls.n	80040f4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d2:	4b8d      	ldr	r3, [pc, #564]	; (8004308 <HAL_RCC_ClockConfig+0x25c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 0207 	bic.w	r2, r3, #7
 80040da:	498b      	ldr	r1, [pc, #556]	; (8004308 <HAL_RCC_ClockConfig+0x25c>)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	4313      	orrs	r3, r2
 80040e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e2:	4b89      	ldr	r3, [pc, #548]	; (8004308 <HAL_RCC_ClockConfig+0x25c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d001      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e14a      	b.n	800438a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004100:	4b82      	ldr	r3, [pc, #520]	; (800430c <HAL_RCC_ClockConfig+0x260>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	497f      	ldr	r1, [pc, #508]	; (800430c <HAL_RCC_ClockConfig+0x260>)
 800410e:	4313      	orrs	r3, r2
 8004110:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 80dc 	beq.w	80042d8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d13c      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xf6>
 8004128:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800412c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004130:	fa93 f3a3 	rbit	r3, r3
 8004134:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004138:	fab3 f383 	clz	r3, r3
 800413c:	b2db      	uxtb	r3, r3
 800413e:	095b      	lsrs	r3, r3, #5
 8004140:	b2db      	uxtb	r3, r3
 8004142:	f043 0301 	orr.w	r3, r3, #1
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b01      	cmp	r3, #1
 800414a:	d102      	bne.n	8004152 <HAL_RCC_ClockConfig+0xa6>
 800414c:	4b6f      	ldr	r3, [pc, #444]	; (800430c <HAL_RCC_ClockConfig+0x260>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	e00f      	b.n	8004172 <HAL_RCC_ClockConfig+0xc6>
 8004152:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004156:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004158:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800415a:	fa93 f3a3 	rbit	r3, r3
 800415e:	667b      	str	r3, [r7, #100]	; 0x64
 8004160:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004164:	663b      	str	r3, [r7, #96]	; 0x60
 8004166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004168:	fa93 f3a3 	rbit	r3, r3
 800416c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800416e:	4b67      	ldr	r3, [pc, #412]	; (800430c <HAL_RCC_ClockConfig+0x260>)
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004176:	65ba      	str	r2, [r7, #88]	; 0x58
 8004178:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800417a:	fa92 f2a2 	rbit	r2, r2
 800417e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004180:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004182:	fab2 f282 	clz	r2, r2
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	f042 0220 	orr.w	r2, r2, #32
 800418c:	b2d2      	uxtb	r2, r2
 800418e:	f002 021f 	and.w	r2, r2, #31
 8004192:	2101      	movs	r1, #1
 8004194:	fa01 f202 	lsl.w	r2, r1, r2
 8004198:	4013      	ands	r3, r2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d17b      	bne.n	8004296 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e0f3      	b.n	800438a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d13c      	bne.n	8004224 <HAL_RCC_ClockConfig+0x178>
 80041aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041b2:	fa93 f3a3 	rbit	r3, r3
 80041b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80041b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ba:	fab3 f383 	clz	r3, r3
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	095b      	lsrs	r3, r3, #5
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	f043 0301 	orr.w	r3, r3, #1
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d102      	bne.n	80041d4 <HAL_RCC_ClockConfig+0x128>
 80041ce:	4b4f      	ldr	r3, [pc, #316]	; (800430c <HAL_RCC_ClockConfig+0x260>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	e00f      	b.n	80041f4 <HAL_RCC_ClockConfig+0x148>
 80041d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041dc:	fa93 f3a3 	rbit	r3, r3
 80041e0:	647b      	str	r3, [r7, #68]	; 0x44
 80041e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041e6:	643b      	str	r3, [r7, #64]	; 0x40
 80041e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ea:	fa93 f3a3 	rbit	r3, r3
 80041ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041f0:	4b46      	ldr	r3, [pc, #280]	; (800430c <HAL_RCC_ClockConfig+0x260>)
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041f8:	63ba      	str	r2, [r7, #56]	; 0x38
 80041fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041fc:	fa92 f2a2 	rbit	r2, r2
 8004200:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004204:	fab2 f282 	clz	r2, r2
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	f042 0220 	orr.w	r2, r2, #32
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	f002 021f 	and.w	r2, r2, #31
 8004214:	2101      	movs	r1, #1
 8004216:	fa01 f202 	lsl.w	r2, r1, r2
 800421a:	4013      	ands	r3, r2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d13a      	bne.n	8004296 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e0b2      	b.n	800438a <HAL_RCC_ClockConfig+0x2de>
 8004224:	2302      	movs	r3, #2
 8004226:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422a:	fa93 f3a3 	rbit	r3, r3
 800422e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004232:	fab3 f383 	clz	r3, r3
 8004236:	b2db      	uxtb	r3, r3
 8004238:	095b      	lsrs	r3, r3, #5
 800423a:	b2db      	uxtb	r3, r3
 800423c:	f043 0301 	orr.w	r3, r3, #1
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b01      	cmp	r3, #1
 8004244:	d102      	bne.n	800424c <HAL_RCC_ClockConfig+0x1a0>
 8004246:	4b31      	ldr	r3, [pc, #196]	; (800430c <HAL_RCC_ClockConfig+0x260>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	e00d      	b.n	8004268 <HAL_RCC_ClockConfig+0x1bc>
 800424c:	2302      	movs	r3, #2
 800424e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004252:	fa93 f3a3 	rbit	r3, r3
 8004256:	627b      	str	r3, [r7, #36]	; 0x24
 8004258:	2302      	movs	r3, #2
 800425a:	623b      	str	r3, [r7, #32]
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	fa93 f3a3 	rbit	r3, r3
 8004262:	61fb      	str	r3, [r7, #28]
 8004264:	4b29      	ldr	r3, [pc, #164]	; (800430c <HAL_RCC_ClockConfig+0x260>)
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	2202      	movs	r2, #2
 800426a:	61ba      	str	r2, [r7, #24]
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	fa92 f2a2 	rbit	r2, r2
 8004272:	617a      	str	r2, [r7, #20]
  return result;
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	fab2 f282 	clz	r2, r2
 800427a:	b2d2      	uxtb	r2, r2
 800427c:	f042 0220 	orr.w	r2, r2, #32
 8004280:	b2d2      	uxtb	r2, r2
 8004282:	f002 021f 	and.w	r2, r2, #31
 8004286:	2101      	movs	r1, #1
 8004288:	fa01 f202 	lsl.w	r2, r1, r2
 800428c:	4013      	ands	r3, r2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e079      	b.n	800438a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004296:	4b1d      	ldr	r3, [pc, #116]	; (800430c <HAL_RCC_ClockConfig+0x260>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f023 0203 	bic.w	r2, r3, #3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	491a      	ldr	r1, [pc, #104]	; (800430c <HAL_RCC_ClockConfig+0x260>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042a8:	f7fe fcaa 	bl	8002c00 <HAL_GetTick>
 80042ac:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ae:	e00a      	b.n	80042c6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b0:	f7fe fca6 	bl	8002c00 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80042be:	4293      	cmp	r3, r2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e061      	b.n	800438a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c6:	4b11      	ldr	r3, [pc, #68]	; (800430c <HAL_RCC_ClockConfig+0x260>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f003 020c 	and.w	r2, r3, #12
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d1eb      	bne.n	80042b0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <HAL_RCC_ClockConfig+0x25c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d214      	bcs.n	8004310 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e6:	4b08      	ldr	r3, [pc, #32]	; (8004308 <HAL_RCC_ClockConfig+0x25c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f023 0207 	bic.w	r2, r3, #7
 80042ee:	4906      	ldr	r1, [pc, #24]	; (8004308 <HAL_RCC_ClockConfig+0x25c>)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f6:	4b04      	ldr	r3, [pc, #16]	; (8004308 <HAL_RCC_ClockConfig+0x25c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	429a      	cmp	r2, r3
 8004302:	d005      	beq.n	8004310 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e040      	b.n	800438a <HAL_RCC_ClockConfig+0x2de>
 8004308:	40022000 	.word	0x40022000
 800430c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	d008      	beq.n	800432e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800431c:	4b1d      	ldr	r3, [pc, #116]	; (8004394 <HAL_RCC_ClockConfig+0x2e8>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	491a      	ldr	r1, [pc, #104]	; (8004394 <HAL_RCC_ClockConfig+0x2e8>)
 800432a:	4313      	orrs	r3, r2
 800432c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b00      	cmp	r3, #0
 8004338:	d009      	beq.n	800434e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800433a:	4b16      	ldr	r3, [pc, #88]	; (8004394 <HAL_RCC_ClockConfig+0x2e8>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	4912      	ldr	r1, [pc, #72]	; (8004394 <HAL_RCC_ClockConfig+0x2e8>)
 800434a:	4313      	orrs	r3, r2
 800434c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800434e:	f000 f829 	bl	80043a4 <HAL_RCC_GetSysClockFreq>
 8004352:	4601      	mov	r1, r0
 8004354:	4b0f      	ldr	r3, [pc, #60]	; (8004394 <HAL_RCC_ClockConfig+0x2e8>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800435c:	22f0      	movs	r2, #240	; 0xf0
 800435e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	fa92 f2a2 	rbit	r2, r2
 8004366:	60fa      	str	r2, [r7, #12]
  return result;
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	fab2 f282 	clz	r2, r2
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	40d3      	lsrs	r3, r2
 8004372:	4a09      	ldr	r2, [pc, #36]	; (8004398 <HAL_RCC_ClockConfig+0x2ec>)
 8004374:	5cd3      	ldrb	r3, [r2, r3]
 8004376:	fa21 f303 	lsr.w	r3, r1, r3
 800437a:	4a08      	ldr	r2, [pc, #32]	; (800439c <HAL_RCC_ClockConfig+0x2f0>)
 800437c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800437e:	4b08      	ldr	r3, [pc, #32]	; (80043a0 <HAL_RCC_ClockConfig+0x2f4>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f7fe fbf8 	bl	8002b78 <HAL_InitTick>
  
  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3778      	adds	r7, #120	; 0x78
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	40021000 	.word	0x40021000
 8004398:	080081c0 	.word	0x080081c0
 800439c:	20000008 	.word	0x20000008
 80043a0:	2000000c 	.word	0x2000000c

080043a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b08b      	sub	sp, #44	; 0x2c
 80043a8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	61fb      	str	r3, [r7, #28]
 80043ae:	2300      	movs	r3, #0
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	2300      	movs	r3, #0
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
 80043b6:	2300      	movs	r3, #0
 80043b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80043be:	4b29      	ldr	r3, [pc, #164]	; (8004464 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	f003 030c 	and.w	r3, r3, #12
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d002      	beq.n	80043d4 <HAL_RCC_GetSysClockFreq+0x30>
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d003      	beq.n	80043da <HAL_RCC_GetSysClockFreq+0x36>
 80043d2:	e03c      	b.n	800444e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043d4:	4b24      	ldr	r3, [pc, #144]	; (8004468 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043d6:	623b      	str	r3, [r7, #32]
      break;
 80043d8:	e03c      	b.n	8004454 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80043e0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80043e4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	fa92 f2a2 	rbit	r2, r2
 80043ec:	607a      	str	r2, [r7, #4]
  return result;
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	fab2 f282 	clz	r2, r2
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	40d3      	lsrs	r3, r2
 80043f8:	4a1c      	ldr	r2, [pc, #112]	; (800446c <HAL_RCC_GetSysClockFreq+0xc8>)
 80043fa:	5cd3      	ldrb	r3, [r2, r3]
 80043fc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80043fe:	4b19      	ldr	r3, [pc, #100]	; (8004464 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	220f      	movs	r2, #15
 8004408:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	fa92 f2a2 	rbit	r2, r2
 8004410:	60fa      	str	r2, [r7, #12]
  return result;
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	fab2 f282 	clz	r2, r2
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	40d3      	lsrs	r3, r2
 800441c:	4a14      	ldr	r2, [pc, #80]	; (8004470 <HAL_RCC_GetSysClockFreq+0xcc>)
 800441e:	5cd3      	ldrb	r3, [r2, r3]
 8004420:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d008      	beq.n	800443e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800442c:	4a0e      	ldr	r2, [pc, #56]	; (8004468 <HAL_RCC_GetSysClockFreq+0xc4>)
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	fbb2 f2f3 	udiv	r2, r2, r3
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	fb02 f303 	mul.w	r3, r2, r3
 800443a:	627b      	str	r3, [r7, #36]	; 0x24
 800443c:	e004      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	4a0c      	ldr	r2, [pc, #48]	; (8004474 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004442:	fb02 f303 	mul.w	r3, r2, r3
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	623b      	str	r3, [r7, #32]
      break;
 800444c:	e002      	b.n	8004454 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800444e:	4b0a      	ldr	r3, [pc, #40]	; (8004478 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004450:	623b      	str	r3, [r7, #32]
      break;
 8004452:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004454:	6a3b      	ldr	r3, [r7, #32]
}
 8004456:	4618      	mov	r0, r3
 8004458:	372c      	adds	r7, #44	; 0x2c
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40021000 	.word	0x40021000
 8004468:	00f42400 	.word	0x00f42400
 800446c:	080081d8 	.word	0x080081d8
 8004470:	080081e8 	.word	0x080081e8
 8004474:	003d0900 	.word	0x003d0900
 8004478:	007a1200 	.word	0x007a1200

0800447c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004480:	4b03      	ldr	r3, [pc, #12]	; (8004490 <HAL_RCC_GetHCLKFreq+0x14>)
 8004482:	681b      	ldr	r3, [r3, #0]
}
 8004484:	4618      	mov	r0, r3
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	20000008 	.word	0x20000008

08004494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800449a:	f7ff ffef 	bl	800447c <HAL_RCC_GetHCLKFreq>
 800449e:	4601      	mov	r1, r0
 80044a0:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044a8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80044ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	fa92 f2a2 	rbit	r2, r2
 80044b4:	603a      	str	r2, [r7, #0]
  return result;
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	fab2 f282 	clz	r2, r2
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	40d3      	lsrs	r3, r2
 80044c0:	4a04      	ldr	r2, [pc, #16]	; (80044d4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80044c2:	5cd3      	ldrb	r3, [r2, r3]
 80044c4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80044c8:	4618      	mov	r0, r3
 80044ca:	3708      	adds	r7, #8
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40021000 	.word	0x40021000
 80044d4:	080081d0 	.word	0x080081d0

080044d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80044de:	f7ff ffcd 	bl	800447c <HAL_RCC_GetHCLKFreq>
 80044e2:	4601      	mov	r1, r0
 80044e4:	4b0b      	ldr	r3, [pc, #44]	; (8004514 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80044ec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80044f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	fa92 f2a2 	rbit	r2, r2
 80044f8:	603a      	str	r2, [r7, #0]
  return result;
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	fab2 f282 	clz	r2, r2
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	40d3      	lsrs	r3, r2
 8004504:	4a04      	ldr	r2, [pc, #16]	; (8004518 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004506:	5cd3      	ldrb	r3, [r2, r3]
 8004508:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800450c:	4618      	mov	r0, r3
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40021000 	.word	0x40021000
 8004518:	080081d0 	.word	0x080081d0

0800451c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b092      	sub	sp, #72	; 0x48
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004524:	2300      	movs	r3, #0
 8004526:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800452c:	2300      	movs	r3, #0
 800452e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 80cd 	beq.w	80046da <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004540:	4b86      	ldr	r3, [pc, #536]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10e      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800454c:	4b83      	ldr	r3, [pc, #524]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	4a82      	ldr	r2, [pc, #520]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004556:	61d3      	str	r3, [r2, #28]
 8004558:	4b80      	ldr	r3, [pc, #512]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004560:	60bb      	str	r3, [r7, #8]
 8004562:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004564:	2301      	movs	r3, #1
 8004566:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800456a:	4b7d      	ldr	r3, [pc, #500]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004572:	2b00      	cmp	r3, #0
 8004574:	d118      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004576:	4b7a      	ldr	r3, [pc, #488]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a79      	ldr	r2, [pc, #484]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800457c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004580:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004582:	f7fe fb3d 	bl	8002c00 <HAL_GetTick>
 8004586:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004588:	e008      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800458a:	f7fe fb39 	bl	8002c00 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b64      	cmp	r3, #100	; 0x64
 8004596:	d901      	bls.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e0db      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800459c:	4b70      	ldr	r3, [pc, #448]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0f0      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045a8:	4b6c      	ldr	r3, [pc, #432]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d07d      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d076      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045c6:	4b65      	ldr	r3, [pc, #404]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045d4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d8:	fa93 f3a3 	rbit	r3, r3
 80045dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80045de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045e0:	fab3 f383 	clz	r3, r3
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	461a      	mov	r2, r3
 80045e8:	4b5e      	ldr	r3, [pc, #376]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045ea:	4413      	add	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	461a      	mov	r2, r3
 80045f0:	2301      	movs	r3, #1
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fc:	fa93 f3a3 	rbit	r3, r3
 8004600:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004604:	fab3 f383 	clz	r3, r3
 8004608:	b2db      	uxtb	r3, r3
 800460a:	461a      	mov	r2, r3
 800460c:	4b55      	ldr	r3, [pc, #340]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800460e:	4413      	add	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	461a      	mov	r2, r3
 8004614:	2300      	movs	r3, #0
 8004616:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004618:	4a50      	ldr	r2, [pc, #320]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800461a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800461c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800461e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	d045      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004628:	f7fe faea 	bl	8002c00 <HAL_GetTick>
 800462c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800462e:	e00a      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004630:	f7fe fae6 	bl	8002c00 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	f241 3288 	movw	r2, #5000	; 0x1388
 800463e:	4293      	cmp	r3, r2
 8004640:	d901      	bls.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e086      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004646:	2302      	movs	r3, #2
 8004648:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464c:	fa93 f3a3 	rbit	r3, r3
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
 8004652:	2302      	movs	r3, #2
 8004654:	623b      	str	r3, [r7, #32]
 8004656:	6a3b      	ldr	r3, [r7, #32]
 8004658:	fa93 f3a3 	rbit	r3, r3
 800465c:	61fb      	str	r3, [r7, #28]
  return result;
 800465e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004660:	fab3 f383 	clz	r3, r3
 8004664:	b2db      	uxtb	r3, r3
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	b2db      	uxtb	r3, r3
 800466a:	f043 0302 	orr.w	r3, r3, #2
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d102      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004674:	4b39      	ldr	r3, [pc, #228]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	e007      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800467a:	2302      	movs	r3, #2
 800467c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	fa93 f3a3 	rbit	r3, r3
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	4b35      	ldr	r3, [pc, #212]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	2202      	movs	r2, #2
 800468c:	613a      	str	r2, [r7, #16]
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	fa92 f2a2 	rbit	r2, r2
 8004694:	60fa      	str	r2, [r7, #12]
  return result;
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	fab2 f282 	clz	r2, r2
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	f002 021f 	and.w	r2, r2, #31
 80046a8:	2101      	movs	r1, #1
 80046aa:	fa01 f202 	lsl.w	r2, r1, r2
 80046ae:	4013      	ands	r3, r2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0bd      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80046b4:	4b29      	ldr	r3, [pc, #164]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	4926      	ldr	r1, [pc, #152]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80046c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d105      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ce:	4b23      	ldr	r3, [pc, #140]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	4a22      	ldr	r2, [pc, #136]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046d8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d008      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046e6:	4b1d      	ldr	r3, [pc, #116]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	f023 0203 	bic.w	r2, r3, #3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	491a      	ldr	r1, [pc, #104]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0320 	and.w	r3, r3, #32
 8004700:	2b00      	cmp	r3, #0
 8004702:	d008      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004704:	4b15      	ldr	r3, [pc, #84]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004708:	f023 0210 	bic.w	r2, r3, #16
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	4912      	ldr	r1, [pc, #72]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004712:	4313      	orrs	r3, r2
 8004714:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471e:	2b00      	cmp	r3, #0
 8004720:	d008      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004722:	4b0e      	ldr	r3, [pc, #56]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004726:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	490b      	ldr	r1, [pc, #44]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004730:	4313      	orrs	r3, r2
 8004732:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d008      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004740:	4b06      	ldr	r3, [pc, #24]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004744:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	4903      	ldr	r1, [pc, #12]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800474e:	4313      	orrs	r3, r2
 8004750:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3748      	adds	r7, #72	; 0x48
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40021000 	.word	0x40021000
 8004760:	40007000 	.word	0x40007000
 8004764:	10908100 	.word	0x10908100

08004768 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e049      	b.n	800480e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d106      	bne.n	8004794 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fe f808 	bl	80027a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3304      	adds	r3, #4
 80047a4:	4619      	mov	r1, r3
 80047a6:	4610      	mov	r0, r2
 80047a8:	f000 fd66 	bl	8005278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b01      	cmp	r3, #1
 800482a:	d001      	beq.n	8004830 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e040      	b.n	80048b2 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0201 	orr.w	r2, r2, #1
 8004846:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1c      	ldr	r2, [pc, #112]	; (80048c0 <HAL_TIM_Base_Start_IT+0xa8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00e      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x58>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800485a:	d009      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x58>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a18      	ldr	r2, [pc, #96]	; (80048c4 <HAL_TIM_Base_Start_IT+0xac>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d004      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x58>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a17      	ldr	r2, [pc, #92]	; (80048c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d115      	bne.n	800489c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689a      	ldr	r2, [r3, #8]
 8004876:	4b15      	ldr	r3, [pc, #84]	; (80048cc <HAL_TIM_Base_Start_IT+0xb4>)
 8004878:	4013      	ands	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b06      	cmp	r3, #6
 8004880:	d015      	beq.n	80048ae <HAL_TIM_Base_Start_IT+0x96>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004888:	d011      	beq.n	80048ae <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f042 0201 	orr.w	r2, r2, #1
 8004898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489a:	e008      	b.n	80048ae <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	e000      	b.n	80048b0 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40012c00 	.word	0x40012c00
 80048c4:	40000400 	.word	0x40000400
 80048c8:	40014000 	.word	0x40014000
 80048cc:	00010007 	.word	0x00010007

080048d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e049      	b.n	8004976 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d106      	bne.n	80048fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fd fec2 	bl	8002680 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3304      	adds	r3, #4
 800490c:	4619      	mov	r1, r3
 800490e:	4610      	mov	r0, r2
 8004910:	f000 fcb2 	bl	8005278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d109      	bne.n	80049a4 <HAL_TIM_PWM_Start+0x24>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b01      	cmp	r3, #1
 800499a:	bf14      	ite	ne
 800499c:	2301      	movne	r3, #1
 800499e:	2300      	moveq	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	e03c      	b.n	8004a1e <HAL_TIM_PWM_Start+0x9e>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d109      	bne.n	80049be <HAL_TIM_PWM_Start+0x3e>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	bf14      	ite	ne
 80049b6:	2301      	movne	r3, #1
 80049b8:	2300      	moveq	r3, #0
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	e02f      	b.n	8004a1e <HAL_TIM_PWM_Start+0x9e>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d109      	bne.n	80049d8 <HAL_TIM_PWM_Start+0x58>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	bf14      	ite	ne
 80049d0:	2301      	movne	r3, #1
 80049d2:	2300      	moveq	r3, #0
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	e022      	b.n	8004a1e <HAL_TIM_PWM_Start+0x9e>
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2b0c      	cmp	r3, #12
 80049dc:	d109      	bne.n	80049f2 <HAL_TIM_PWM_Start+0x72>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	bf14      	ite	ne
 80049ea:	2301      	movne	r3, #1
 80049ec:	2300      	moveq	r3, #0
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	e015      	b.n	8004a1e <HAL_TIM_PWM_Start+0x9e>
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b10      	cmp	r3, #16
 80049f6:	d109      	bne.n	8004a0c <HAL_TIM_PWM_Start+0x8c>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	bf14      	ite	ne
 8004a04:	2301      	movne	r3, #1
 8004a06:	2300      	moveq	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	e008      	b.n	8004a1e <HAL_TIM_PWM_Start+0x9e>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	bf14      	ite	ne
 8004a18:	2301      	movne	r3, #1
 8004a1a:	2300      	moveq	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e088      	b.n	8004b38 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d104      	bne.n	8004a36 <HAL_TIM_PWM_Start+0xb6>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a34:	e023      	b.n	8004a7e <HAL_TIM_PWM_Start+0xfe>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b04      	cmp	r3, #4
 8004a3a:	d104      	bne.n	8004a46 <HAL_TIM_PWM_Start+0xc6>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a44:	e01b      	b.n	8004a7e <HAL_TIM_PWM_Start+0xfe>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d104      	bne.n	8004a56 <HAL_TIM_PWM_Start+0xd6>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a54:	e013      	b.n	8004a7e <HAL_TIM_PWM_Start+0xfe>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b0c      	cmp	r3, #12
 8004a5a:	d104      	bne.n	8004a66 <HAL_TIM_PWM_Start+0xe6>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a64:	e00b      	b.n	8004a7e <HAL_TIM_PWM_Start+0xfe>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b10      	cmp	r3, #16
 8004a6a:	d104      	bne.n	8004a76 <HAL_TIM_PWM_Start+0xf6>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a74:	e003      	b.n	8004a7e <HAL_TIM_PWM_Start+0xfe>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2201      	movs	r2, #1
 8004a84:	6839      	ldr	r1, [r7, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 ff14 	bl	80058b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a2b      	ldr	r2, [pc, #172]	; (8004b40 <HAL_TIM_PWM_Start+0x1c0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d00e      	beq.n	8004ab4 <HAL_TIM_PWM_Start+0x134>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a2a      	ldr	r2, [pc, #168]	; (8004b44 <HAL_TIM_PWM_Start+0x1c4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d009      	beq.n	8004ab4 <HAL_TIM_PWM_Start+0x134>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a28      	ldr	r2, [pc, #160]	; (8004b48 <HAL_TIM_PWM_Start+0x1c8>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d004      	beq.n	8004ab4 <HAL_TIM_PWM_Start+0x134>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a27      	ldr	r2, [pc, #156]	; (8004b4c <HAL_TIM_PWM_Start+0x1cc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d101      	bne.n	8004ab8 <HAL_TIM_PWM_Start+0x138>
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e000      	b.n	8004aba <HAL_TIM_PWM_Start+0x13a>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d007      	beq.n	8004ace <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004acc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a1b      	ldr	r2, [pc, #108]	; (8004b40 <HAL_TIM_PWM_Start+0x1c0>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d00e      	beq.n	8004af6 <HAL_TIM_PWM_Start+0x176>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae0:	d009      	beq.n	8004af6 <HAL_TIM_PWM_Start+0x176>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a1a      	ldr	r2, [pc, #104]	; (8004b50 <HAL_TIM_PWM_Start+0x1d0>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d004      	beq.n	8004af6 <HAL_TIM_PWM_Start+0x176>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a14      	ldr	r2, [pc, #80]	; (8004b44 <HAL_TIM_PWM_Start+0x1c4>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d115      	bne.n	8004b22 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	4b15      	ldr	r3, [pc, #84]	; (8004b54 <HAL_TIM_PWM_Start+0x1d4>)
 8004afe:	4013      	ands	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2b06      	cmp	r3, #6
 8004b06:	d015      	beq.n	8004b34 <HAL_TIM_PWM_Start+0x1b4>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b0e:	d011      	beq.n	8004b34 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0201 	orr.w	r2, r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b20:	e008      	b.n	8004b34 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f042 0201 	orr.w	r2, r2, #1
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	e000      	b.n	8004b36 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40012c00 	.word	0x40012c00
 8004b44:	40014000 	.word	0x40014000
 8004b48:	40014400 	.word	0x40014400
 8004b4c:	40014800 	.word	0x40014800
 8004b50:	40000400 	.word	0x40000400
 8004b54:	00010007 	.word	0x00010007

08004b58 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e097      	b.n	8004c9c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d106      	bne.n	8004b86 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7fd fd9d 	bl	80026c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2202      	movs	r2, #2
 8004b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6812      	ldr	r2, [r2, #0]
 8004b98:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004b9c:	f023 0307 	bic.w	r3, r3, #7
 8004ba0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	3304      	adds	r3, #4
 8004baa:	4619      	mov	r1, r3
 8004bac:	4610      	mov	r0, r2
 8004bae:	f000 fb63 	bl	8005278 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bda:	f023 0303 	bic.w	r3, r3, #3
 8004bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	021b      	lsls	r3, r3, #8
 8004bea:	4313      	orrs	r3, r2
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004bf8:	f023 030c 	bic.w	r3, r3, #12
 8004bfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	021b      	lsls	r3, r3, #8
 8004c14:	4313      	orrs	r3, r2
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	011a      	lsls	r2, r3, #4
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	031b      	lsls	r3, r3, #12
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004c36:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004c3e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	011b      	lsls	r3, r3, #4
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cb4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cbc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cc4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ccc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d110      	bne.n	8004cf6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d102      	bne.n	8004ce0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cda:	7b7b      	ldrb	r3, [r7, #13]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d001      	beq.n	8004ce4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e069      	b.n	8004db8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cf4:	e031      	b.n	8004d5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	2b04      	cmp	r3, #4
 8004cfa:	d110      	bne.n	8004d1e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cfc:	7bbb      	ldrb	r3, [r7, #14]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d102      	bne.n	8004d08 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d02:	7b3b      	ldrb	r3, [r7, #12]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d001      	beq.n	8004d0c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e055      	b.n	8004db8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d1c:	e01d      	b.n	8004d5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d108      	bne.n	8004d36 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d24:	7bbb      	ldrb	r3, [r7, #14]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d105      	bne.n	8004d36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d2a:	7b7b      	ldrb	r3, [r7, #13]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d102      	bne.n	8004d36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d30:	7b3b      	ldrb	r3, [r7, #12]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d001      	beq.n	8004d3a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e03e      	b.n	8004db8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2202      	movs	r2, #2
 8004d46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2202      	movs	r2, #2
 8004d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <HAL_TIM_Encoder_Start+0xc4>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d008      	beq.n	8004d78 <HAL_TIM_Encoder_Start+0xd4>
 8004d66:	e00f      	b.n	8004d88 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	2100      	movs	r1, #0
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fd9f 	bl	80058b4 <TIM_CCxChannelCmd>
      break;
 8004d76:	e016      	b.n	8004da6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	2104      	movs	r1, #4
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 fd97 	bl	80058b4 <TIM_CCxChannelCmd>
      break;
 8004d86:	e00e      	b.n	8004da6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	2100      	movs	r1, #0
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 fd8f 	bl	80058b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	2104      	movs	r1, #4
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fd88 	bl	80058b4 <TIM_CCxChannelCmd>
      break;
 8004da4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f042 0201 	orr.w	r2, r2, #1
 8004db4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d122      	bne.n	8004e1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d11b      	bne.n	8004e1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f06f 0202 	mvn.w	r2, #2
 8004dec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 fa1a 	bl	800523c <HAL_TIM_IC_CaptureCallback>
 8004e08:	e005      	b.n	8004e16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fa0c 	bl	8005228 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 fa1d 	bl	8005250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	f003 0304 	and.w	r3, r3, #4
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d122      	bne.n	8004e70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	2b04      	cmp	r3, #4
 8004e36:	d11b      	bne.n	8004e70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f06f 0204 	mvn.w	r2, #4
 8004e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2202      	movs	r2, #2
 8004e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f9f0 	bl	800523c <HAL_TIM_IC_CaptureCallback>
 8004e5c:	e005      	b.n	8004e6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f9e2 	bl	8005228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f9f3 	bl	8005250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	f003 0308 	and.w	r3, r3, #8
 8004e7a:	2b08      	cmp	r3, #8
 8004e7c:	d122      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f003 0308 	and.w	r3, r3, #8
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	d11b      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f06f 0208 	mvn.w	r2, #8
 8004e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2204      	movs	r2, #4
 8004e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	f003 0303 	and.w	r3, r3, #3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f9c6 	bl	800523c <HAL_TIM_IC_CaptureCallback>
 8004eb0:	e005      	b.n	8004ebe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f9b8 	bl	8005228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f9c9 	bl	8005250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	f003 0310 	and.w	r3, r3, #16
 8004ece:	2b10      	cmp	r3, #16
 8004ed0:	d122      	bne.n	8004f18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f003 0310 	and.w	r3, r3, #16
 8004edc:	2b10      	cmp	r3, #16
 8004ede:	d11b      	bne.n	8004f18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f06f 0210 	mvn.w	r2, #16
 8004ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2208      	movs	r2, #8
 8004eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f99c 	bl	800523c <HAL_TIM_IC_CaptureCallback>
 8004f04:	e005      	b.n	8004f12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f98e 	bl	8005228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f99f 	bl	8005250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d10e      	bne.n	8004f44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d107      	bne.n	8004f44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f06f 0201 	mvn.w	r2, #1
 8004f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7fc fe9c 	bl	8001c7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f4e:	2b80      	cmp	r3, #128	; 0x80
 8004f50:	d10e      	bne.n	8004f70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5c:	2b80      	cmp	r3, #128	; 0x80
 8004f5e:	d107      	bne.n	8004f70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fdb8 	bl	8005ae0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f7e:	d10e      	bne.n	8004f9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f8a:	2b80      	cmp	r3, #128	; 0x80
 8004f8c:	d107      	bne.n	8004f9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 fdab 	bl	8005af4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa8:	2b40      	cmp	r3, #64	; 0x40
 8004faa:	d10e      	bne.n	8004fca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb6:	2b40      	cmp	r3, #64	; 0x40
 8004fb8:	d107      	bne.n	8004fca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f94d 	bl	8005264 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	f003 0320 	and.w	r3, r3, #32
 8004fd4:	2b20      	cmp	r3, #32
 8004fd6:	d10e      	bne.n	8004ff6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f003 0320 	and.w	r3, r3, #32
 8004fe2:	2b20      	cmp	r3, #32
 8004fe4:	d107      	bne.n	8004ff6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f06f 0220 	mvn.w	r2, #32
 8004fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 fd6b 	bl	8005acc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ff6:	bf00      	nop
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800500c:	2300      	movs	r3, #0
 800500e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005016:	2b01      	cmp	r3, #1
 8005018:	d101      	bne.n	800501e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800501a:	2302      	movs	r3, #2
 800501c:	e0ff      	b.n	800521e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b14      	cmp	r3, #20
 800502a:	f200 80f0 	bhi.w	800520e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800502e:	a201      	add	r2, pc, #4	; (adr r2, 8005034 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005034:	08005089 	.word	0x08005089
 8005038:	0800520f 	.word	0x0800520f
 800503c:	0800520f 	.word	0x0800520f
 8005040:	0800520f 	.word	0x0800520f
 8005044:	080050c9 	.word	0x080050c9
 8005048:	0800520f 	.word	0x0800520f
 800504c:	0800520f 	.word	0x0800520f
 8005050:	0800520f 	.word	0x0800520f
 8005054:	0800510b 	.word	0x0800510b
 8005058:	0800520f 	.word	0x0800520f
 800505c:	0800520f 	.word	0x0800520f
 8005060:	0800520f 	.word	0x0800520f
 8005064:	0800514b 	.word	0x0800514b
 8005068:	0800520f 	.word	0x0800520f
 800506c:	0800520f 	.word	0x0800520f
 8005070:	0800520f 	.word	0x0800520f
 8005074:	0800518d 	.word	0x0800518d
 8005078:	0800520f 	.word	0x0800520f
 800507c:	0800520f 	.word	0x0800520f
 8005080:	0800520f 	.word	0x0800520f
 8005084:	080051cd 	.word	0x080051cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68b9      	ldr	r1, [r7, #8]
 800508e:	4618      	mov	r0, r3
 8005090:	f000 f96a 	bl	8005368 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699a      	ldr	r2, [r3, #24]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0208 	orr.w	r2, r2, #8
 80050a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699a      	ldr	r2, [r3, #24]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 0204 	bic.w	r2, r2, #4
 80050b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6999      	ldr	r1, [r3, #24]
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	691a      	ldr	r2, [r3, #16]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	619a      	str	r2, [r3, #24]
      break;
 80050c6:	e0a5      	b.n	8005214 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68b9      	ldr	r1, [r7, #8]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 f9d0 	bl	8005474 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699a      	ldr	r2, [r3, #24]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699a      	ldr	r2, [r3, #24]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6999      	ldr	r1, [r3, #24]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	021a      	lsls	r2, r3, #8
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	619a      	str	r2, [r3, #24]
      break;
 8005108:	e084      	b.n	8005214 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68b9      	ldr	r1, [r7, #8]
 8005110:	4618      	mov	r0, r3
 8005112:	f000 fa2f 	bl	8005574 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	69da      	ldr	r2, [r3, #28]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f042 0208 	orr.w	r2, r2, #8
 8005124:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	69da      	ldr	r2, [r3, #28]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 0204 	bic.w	r2, r2, #4
 8005134:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	69d9      	ldr	r1, [r3, #28]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	691a      	ldr	r2, [r3, #16]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	61da      	str	r2, [r3, #28]
      break;
 8005148:	e064      	b.n	8005214 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68b9      	ldr	r1, [r7, #8]
 8005150:	4618      	mov	r0, r3
 8005152:	f000 fa8d 	bl	8005670 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	69da      	ldr	r2, [r3, #28]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005164:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69da      	ldr	r2, [r3, #28]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005174:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69d9      	ldr	r1, [r3, #28]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	021a      	lsls	r2, r3, #8
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	61da      	str	r2, [r3, #28]
      break;
 800518a:	e043      	b.n	8005214 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68b9      	ldr	r1, [r7, #8]
 8005192:	4618      	mov	r0, r3
 8005194:	f000 fad0 	bl	8005738 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0208 	orr.w	r2, r2, #8
 80051a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0204 	bic.w	r2, r2, #4
 80051b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	691a      	ldr	r2, [r3, #16]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051ca:	e023      	b.n	8005214 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68b9      	ldr	r1, [r7, #8]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fb0e 	bl	80057f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	021a      	lsls	r2, r3, #8
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800520c:	e002      	b.n	8005214 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	75fb      	strb	r3, [r7, #23]
      break;
 8005212:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800521c:	7dfb      	ldrb	r3, [r7, #23]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop

08005228 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a32      	ldr	r2, [pc, #200]	; (8005354 <TIM_Base_SetConfig+0xdc>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d007      	beq.n	80052a0 <TIM_Base_SetConfig+0x28>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005296:	d003      	beq.n	80052a0 <TIM_Base_SetConfig+0x28>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a2f      	ldr	r2, [pc, #188]	; (8005358 <TIM_Base_SetConfig+0xe0>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d108      	bne.n	80052b2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a27      	ldr	r2, [pc, #156]	; (8005354 <TIM_Base_SetConfig+0xdc>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d013      	beq.n	80052e2 <TIM_Base_SetConfig+0x6a>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c0:	d00f      	beq.n	80052e2 <TIM_Base_SetConfig+0x6a>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a24      	ldr	r2, [pc, #144]	; (8005358 <TIM_Base_SetConfig+0xe0>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d00b      	beq.n	80052e2 <TIM_Base_SetConfig+0x6a>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a23      	ldr	r2, [pc, #140]	; (800535c <TIM_Base_SetConfig+0xe4>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d007      	beq.n	80052e2 <TIM_Base_SetConfig+0x6a>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a22      	ldr	r2, [pc, #136]	; (8005360 <TIM_Base_SetConfig+0xe8>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d003      	beq.n	80052e2 <TIM_Base_SetConfig+0x6a>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a21      	ldr	r2, [pc, #132]	; (8005364 <TIM_Base_SetConfig+0xec>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d108      	bne.n	80052f4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a0e      	ldr	r2, [pc, #56]	; (8005354 <TIM_Base_SetConfig+0xdc>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d00b      	beq.n	8005338 <TIM_Base_SetConfig+0xc0>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a0e      	ldr	r2, [pc, #56]	; (800535c <TIM_Base_SetConfig+0xe4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d007      	beq.n	8005338 <TIM_Base_SetConfig+0xc0>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a0d      	ldr	r2, [pc, #52]	; (8005360 <TIM_Base_SetConfig+0xe8>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d003      	beq.n	8005338 <TIM_Base_SetConfig+0xc0>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a0c      	ldr	r2, [pc, #48]	; (8005364 <TIM_Base_SetConfig+0xec>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d103      	bne.n	8005340 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	691a      	ldr	r2, [r3, #16]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	615a      	str	r2, [r3, #20]
}
 8005346:	bf00      	nop
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	40012c00 	.word	0x40012c00
 8005358:	40000400 	.word	0x40000400
 800535c:	40014000 	.word	0x40014000
 8005360:	40014400 	.word	0x40014400
 8005364:	40014800 	.word	0x40014800

08005368 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	f023 0201 	bic.w	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0303 	bic.w	r3, r3, #3
 80053a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f023 0302 	bic.w	r3, r3, #2
 80053b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	4313      	orrs	r3, r2
 80053be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a28      	ldr	r2, [pc, #160]	; (8005464 <TIM_OC1_SetConfig+0xfc>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d00b      	beq.n	80053e0 <TIM_OC1_SetConfig+0x78>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a27      	ldr	r2, [pc, #156]	; (8005468 <TIM_OC1_SetConfig+0x100>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d007      	beq.n	80053e0 <TIM_OC1_SetConfig+0x78>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a26      	ldr	r2, [pc, #152]	; (800546c <TIM_OC1_SetConfig+0x104>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d003      	beq.n	80053e0 <TIM_OC1_SetConfig+0x78>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a25      	ldr	r2, [pc, #148]	; (8005470 <TIM_OC1_SetConfig+0x108>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d10c      	bne.n	80053fa <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f023 0308 	bic.w	r3, r3, #8
 80053e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f023 0304 	bic.w	r3, r3, #4
 80053f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a19      	ldr	r2, [pc, #100]	; (8005464 <TIM_OC1_SetConfig+0xfc>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d00b      	beq.n	800541a <TIM_OC1_SetConfig+0xb2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a18      	ldr	r2, [pc, #96]	; (8005468 <TIM_OC1_SetConfig+0x100>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d007      	beq.n	800541a <TIM_OC1_SetConfig+0xb2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a17      	ldr	r2, [pc, #92]	; (800546c <TIM_OC1_SetConfig+0x104>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d003      	beq.n	800541a <TIM_OC1_SetConfig+0xb2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a16      	ldr	r2, [pc, #88]	; (8005470 <TIM_OC1_SetConfig+0x108>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d111      	bne.n	800543e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	4313      	orrs	r3, r2
 8005432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	4313      	orrs	r3, r2
 800543c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	621a      	str	r2, [r3, #32]
}
 8005458:	bf00      	nop
 800545a:	371c      	adds	r7, #28
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	40012c00 	.word	0x40012c00
 8005468:	40014000 	.word	0x40014000
 800546c:	40014400 	.word	0x40014400
 8005470:	40014800 	.word	0x40014800

08005474 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	f023 0210 	bic.w	r2, r3, #16
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	021b      	lsls	r3, r3, #8
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f023 0320 	bic.w	r3, r3, #32
 80054c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a24      	ldr	r2, [pc, #144]	; (8005564 <TIM_OC2_SetConfig+0xf0>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d10d      	bne.n	80054f4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a1b      	ldr	r2, [pc, #108]	; (8005564 <TIM_OC2_SetConfig+0xf0>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d00b      	beq.n	8005514 <TIM_OC2_SetConfig+0xa0>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a1a      	ldr	r2, [pc, #104]	; (8005568 <TIM_OC2_SetConfig+0xf4>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d007      	beq.n	8005514 <TIM_OC2_SetConfig+0xa0>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a19      	ldr	r2, [pc, #100]	; (800556c <TIM_OC2_SetConfig+0xf8>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d003      	beq.n	8005514 <TIM_OC2_SetConfig+0xa0>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a18      	ldr	r2, [pc, #96]	; (8005570 <TIM_OC2_SetConfig+0xfc>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d113      	bne.n	800553c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800551a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005522:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	4313      	orrs	r3, r2
 800552e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	4313      	orrs	r3, r2
 800553a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	621a      	str	r2, [r3, #32]
}
 8005556:	bf00      	nop
 8005558:	371c      	adds	r7, #28
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	40012c00 	.word	0x40012c00
 8005568:	40014000 	.word	0x40014000
 800556c:	40014400 	.word	0x40014400
 8005570:	40014800 	.word	0x40014800

08005574 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005574:	b480      	push	{r7}
 8005576:	b087      	sub	sp, #28
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 0303 	bic.w	r3, r3, #3
 80055ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	021b      	lsls	r3, r3, #8
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a23      	ldr	r2, [pc, #140]	; (8005660 <TIM_OC3_SetConfig+0xec>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d10d      	bne.n	80055f2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	021b      	lsls	r3, r3, #8
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055f0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a1a      	ldr	r2, [pc, #104]	; (8005660 <TIM_OC3_SetConfig+0xec>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d00b      	beq.n	8005612 <TIM_OC3_SetConfig+0x9e>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a19      	ldr	r2, [pc, #100]	; (8005664 <TIM_OC3_SetConfig+0xf0>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d007      	beq.n	8005612 <TIM_OC3_SetConfig+0x9e>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a18      	ldr	r2, [pc, #96]	; (8005668 <TIM_OC3_SetConfig+0xf4>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d003      	beq.n	8005612 <TIM_OC3_SetConfig+0x9e>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a17      	ldr	r2, [pc, #92]	; (800566c <TIM_OC3_SetConfig+0xf8>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d113      	bne.n	800563a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	4313      	orrs	r3, r2
 800562c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	4313      	orrs	r3, r2
 8005638:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	621a      	str	r2, [r3, #32]
}
 8005654:	bf00      	nop
 8005656:	371c      	adds	r7, #28
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	40012c00 	.word	0x40012c00
 8005664:	40014000 	.word	0x40014000
 8005668:	40014400 	.word	0x40014400
 800566c:	40014800 	.word	0x40014800

08005670 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800569e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	021b      	lsls	r3, r3, #8
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	031b      	lsls	r3, r3, #12
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a16      	ldr	r2, [pc, #88]	; (8005728 <TIM_OC4_SetConfig+0xb8>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d00b      	beq.n	80056ec <TIM_OC4_SetConfig+0x7c>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a15      	ldr	r2, [pc, #84]	; (800572c <TIM_OC4_SetConfig+0xbc>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d007      	beq.n	80056ec <TIM_OC4_SetConfig+0x7c>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a14      	ldr	r2, [pc, #80]	; (8005730 <TIM_OC4_SetConfig+0xc0>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d003      	beq.n	80056ec <TIM_OC4_SetConfig+0x7c>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a13      	ldr	r2, [pc, #76]	; (8005734 <TIM_OC4_SetConfig+0xc4>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d109      	bne.n	8005700 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	019b      	lsls	r3, r3, #6
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	621a      	str	r2, [r3, #32]
}
 800571a:	bf00      	nop
 800571c:	371c      	adds	r7, #28
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	40012c00 	.word	0x40012c00
 800572c:	40014000 	.word	0x40014000
 8005730:	40014400 	.word	0x40014400
 8005734:	40014800 	.word	0x40014800

08005738 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	4313      	orrs	r3, r2
 8005774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800577c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	041b      	lsls	r3, r3, #16
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	4313      	orrs	r3, r2
 8005788:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a15      	ldr	r2, [pc, #84]	; (80057e4 <TIM_OC5_SetConfig+0xac>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d00b      	beq.n	80057aa <TIM_OC5_SetConfig+0x72>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a14      	ldr	r2, [pc, #80]	; (80057e8 <TIM_OC5_SetConfig+0xb0>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d007      	beq.n	80057aa <TIM_OC5_SetConfig+0x72>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a13      	ldr	r2, [pc, #76]	; (80057ec <TIM_OC5_SetConfig+0xb4>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d003      	beq.n	80057aa <TIM_OC5_SetConfig+0x72>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a12      	ldr	r2, [pc, #72]	; (80057f0 <TIM_OC5_SetConfig+0xb8>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d109      	bne.n	80057be <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	021b      	lsls	r3, r3, #8
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	621a      	str	r2, [r3, #32]
}
 80057d8:	bf00      	nop
 80057da:	371c      	adds	r7, #28
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	40012c00 	.word	0x40012c00
 80057e8:	40014000 	.word	0x40014000
 80057ec:	40014400 	.word	0x40014400
 80057f0:	40014800 	.word	0x40014800

080057f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	021b      	lsls	r3, r3, #8
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	4313      	orrs	r3, r2
 8005832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800583a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	051b      	lsls	r3, r3, #20
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	4313      	orrs	r3, r2
 8005846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a16      	ldr	r2, [pc, #88]	; (80058a4 <TIM_OC6_SetConfig+0xb0>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d00b      	beq.n	8005868 <TIM_OC6_SetConfig+0x74>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a15      	ldr	r2, [pc, #84]	; (80058a8 <TIM_OC6_SetConfig+0xb4>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d007      	beq.n	8005868 <TIM_OC6_SetConfig+0x74>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a14      	ldr	r2, [pc, #80]	; (80058ac <TIM_OC6_SetConfig+0xb8>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d003      	beq.n	8005868 <TIM_OC6_SetConfig+0x74>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a13      	ldr	r2, [pc, #76]	; (80058b0 <TIM_OC6_SetConfig+0xbc>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d109      	bne.n	800587c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800586e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	029b      	lsls	r3, r3, #10
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	4313      	orrs	r3, r2
 800587a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	621a      	str	r2, [r3, #32]
}
 8005896:	bf00      	nop
 8005898:	371c      	adds	r7, #28
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	40012c00 	.word	0x40012c00
 80058a8:	40014000 	.word	0x40014000
 80058ac:	40014400 	.word	0x40014400
 80058b0:	40014800 	.word	0x40014800

080058b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f003 031f 	and.w	r3, r3, #31
 80058c6:	2201      	movs	r2, #1
 80058c8:	fa02 f303 	lsl.w	r3, r2, r3
 80058cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a1a      	ldr	r2, [r3, #32]
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	43db      	mvns	r3, r3
 80058d6:	401a      	ands	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6a1a      	ldr	r2, [r3, #32]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f003 031f 	and.w	r3, r3, #31
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	fa01 f303 	lsl.w	r3, r1, r3
 80058ec:	431a      	orrs	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	621a      	str	r2, [r3, #32]
}
 80058f2:	bf00      	nop
 80058f4:	371c      	adds	r7, #28
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
	...

08005900 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005910:	2b01      	cmp	r3, #1
 8005912:	d101      	bne.n	8005918 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005914:	2302      	movs	r3, #2
 8005916:	e054      	b.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a24      	ldr	r2, [pc, #144]	; (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d108      	bne.n	8005954 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005948:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4313      	orrs	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a17      	ldr	r2, [pc, #92]	; (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00e      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005980:	d009      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a13      	ldr	r2, [pc, #76]	; (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d004      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a11      	ldr	r2, [pc, #68]	; (80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d10c      	bne.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800599c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	40012c00 	.word	0x40012c00
 80059d4:	40000400 	.word	0x40000400
 80059d8:	40014000 	.word	0x40014000

080059dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d101      	bne.n	80059f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059f4:	2302      	movs	r3, #2
 80059f6:	e060      	b.n	8005aba <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	041b      	lsls	r3, r3, #16
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a14      	ldr	r2, [pc, #80]	; (8005ac8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d115      	bne.n	8005aa8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a86:	051b      	lsls	r3, r3, #20
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	40012c00 	.word	0x40012c00

08005acc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e040      	b.n	8005b9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d106      	bne.n	8005b30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7fc ff60 	bl	80029f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2224      	movs	r2, #36	; 0x24
 8005b34:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 0201 	bic.w	r2, r2, #1
 8005b44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fcde 	bl	8006508 <UART_SetConfig>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d101      	bne.n	8005b56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e022      	b.n	8005b9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fe08 	bl	8006774 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689a      	ldr	r2, [r3, #8]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0201 	orr.w	r2, r2, #1
 8005b92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 fe8f 	bl	80068b8 <UART_CheckIdleState>
 8005b9a:	4603      	mov	r3, r0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b08a      	sub	sp, #40	; 0x28
 8005ba8:	af02      	add	r7, sp, #8
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	603b      	str	r3, [r7, #0]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bb8:	2b20      	cmp	r3, #32
 8005bba:	f040 8082 	bne.w	8005cc2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <HAL_UART_Transmit+0x26>
 8005bc4:	88fb      	ldrh	r3, [r7, #6]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e07a      	b.n	8005cc4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d101      	bne.n	8005bdc <HAL_UART_Transmit+0x38>
 8005bd8:	2302      	movs	r3, #2
 8005bda:	e073      	b.n	8005cc4 <HAL_UART_Transmit+0x120>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2221      	movs	r2, #33	; 0x21
 8005bf0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bf2:	f7fd f805 	bl	8002c00 <HAL_GetTick>
 8005bf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	88fa      	ldrh	r2, [r7, #6]
 8005bfc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	88fa      	ldrh	r2, [r7, #6]
 8005c04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c10:	d108      	bne.n	8005c24 <HAL_UART_Transmit+0x80>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d104      	bne.n	8005c24 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	61bb      	str	r3, [r7, #24]
 8005c22:	e003      	b.n	8005c2c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005c34:	e02d      	b.n	8005c92 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	2180      	movs	r1, #128	; 0x80
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 fe82 	bl	800694a <UART_WaitOnFlagUntilTimeout>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e039      	b.n	8005cc4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10b      	bne.n	8005c6e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	881a      	ldrh	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c62:	b292      	uxth	r2, r2
 8005c64:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	3302      	adds	r3, #2
 8005c6a:	61bb      	str	r3, [r7, #24]
 8005c6c:	e008      	b.n	8005c80 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	781a      	ldrb	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	b292      	uxth	r2, r2
 8005c78:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1cb      	bne.n	8005c36 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	2140      	movs	r1, #64	; 0x40
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 fe4e 	bl	800694a <UART_WaitOnFlagUntilTimeout>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d001      	beq.n	8005cb8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e005      	b.n	8005cc4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	e000      	b.n	8005cc4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005cc2:	2302      	movs	r3, #2
  }
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3720      	adds	r7, #32
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08a      	sub	sp, #40	; 0x28
 8005cd0:	af02      	add	r7, sp, #8
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ce0:	2b20      	cmp	r3, #32
 8005ce2:	f040 80bf 	bne.w	8005e64 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <HAL_UART_Receive+0x26>
 8005cec:	88fb      	ldrh	r3, [r7, #6]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e0b7      	b.n	8005e66 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d101      	bne.n	8005d04 <HAL_UART_Receive+0x38>
 8005d00:	2302      	movs	r3, #2
 8005d02:	e0b0      	b.n	8005e66 <HAL_UART_Receive+0x19a>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2222      	movs	r2, #34	; 0x22
 8005d18:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d20:	f7fc ff6e 	bl	8002c00 <HAL_GetTick>
 8005d24:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	88fa      	ldrh	r2, [r7, #6]
 8005d2a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	88fa      	ldrh	r2, [r7, #6]
 8005d32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d3e:	d10e      	bne.n	8005d5e <HAL_UART_Receive+0x92>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d105      	bne.n	8005d54 <HAL_UART_Receive+0x88>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005d4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d52:	e02d      	b.n	8005db0 <HAL_UART_Receive+0xe4>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	22ff      	movs	r2, #255	; 0xff
 8005d58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d5c:	e028      	b.n	8005db0 <HAL_UART_Receive+0xe4>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10d      	bne.n	8005d82 <HAL_UART_Receive+0xb6>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d104      	bne.n	8005d78 <HAL_UART_Receive+0xac>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	22ff      	movs	r2, #255	; 0xff
 8005d72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d76:	e01b      	b.n	8005db0 <HAL_UART_Receive+0xe4>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	227f      	movs	r2, #127	; 0x7f
 8005d7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d80:	e016      	b.n	8005db0 <HAL_UART_Receive+0xe4>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d8a:	d10d      	bne.n	8005da8 <HAL_UART_Receive+0xdc>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d104      	bne.n	8005d9e <HAL_UART_Receive+0xd2>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	227f      	movs	r2, #127	; 0x7f
 8005d98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d9c:	e008      	b.n	8005db0 <HAL_UART_Receive+0xe4>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	223f      	movs	r2, #63	; 0x3f
 8005da2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005da6:	e003      	b.n	8005db0 <HAL_UART_Receive+0xe4>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005db6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc0:	d108      	bne.n	8005dd4 <HAL_UART_Receive+0x108>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d104      	bne.n	8005dd4 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	61bb      	str	r3, [r7, #24]
 8005dd2:	e003      	b.n	8005ddc <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005de4:	e033      	b.n	8005e4e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2200      	movs	r2, #0
 8005dee:	2120      	movs	r1, #32
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 fdaa 	bl	800694a <UART_WaitOnFlagUntilTimeout>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e032      	b.n	8005e66 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10c      	bne.n	8005e20 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	8a7b      	ldrh	r3, [r7, #18]
 8005e10:	4013      	ands	r3, r2
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	3302      	adds	r3, #2
 8005e1c:	61bb      	str	r3, [r7, #24]
 8005e1e:	e00d      	b.n	8005e3c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	8a7b      	ldrh	r3, [r7, #18]
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	4013      	ands	r3, r2
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	3b01      	subs	r3, #1
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1c5      	bne.n	8005de6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	e000      	b.n	8005e66 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005e64:	2302      	movs	r3, #2
  }
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3720      	adds	r7, #32
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b08a      	sub	sp, #40	; 0x28
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	60f8      	str	r0, [r7, #12]
 8005e76:	60b9      	str	r1, [r7, #8]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e80:	2b20      	cmp	r3, #32
 8005e82:	d13d      	bne.n	8005f00 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d002      	beq.n	8005e90 <HAL_UART_Receive_IT+0x22>
 8005e8a:	88fb      	ldrh	r3, [r7, #6]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e036      	b.n	8005f02 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d101      	bne.n	8005ea2 <HAL_UART_Receive_IT+0x34>
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	e02f      	b.n	8005f02 <HAL_UART_Receive_IT+0x94>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d018      	beq.n	8005ef0 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	e853 3f00 	ldrex	r3, [r3]
 8005eca:	613b      	str	r3, [r7, #16]
   return(result);
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	623b      	str	r3, [r7, #32]
 8005ede:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee0:	69f9      	ldr	r1, [r7, #28]
 8005ee2:	6a3a      	ldr	r2, [r7, #32]
 8005ee4:	e841 2300 	strex	r3, r2, [r1]
 8005ee8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1e6      	bne.n	8005ebe <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ef0:	88fb      	ldrh	r3, [r7, #6]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	68b9      	ldr	r1, [r7, #8]
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 fdec 	bl	8006ad4 <UART_Start_Receive_IT>
 8005efc:	4603      	mov	r3, r0
 8005efe:	e000      	b.n	8005f02 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f00:	2302      	movs	r3, #2
  }
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3728      	adds	r7, #40	; 0x28
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
	...

08005f0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b0ba      	sub	sp, #232	; 0xe8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005f32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005f36:	f640 030f 	movw	r3, #2063	; 0x80f
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005f40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d115      	bne.n	8005f74 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f4c:	f003 0320 	and.w	r3, r3, #32
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00f      	beq.n	8005f74 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f58:	f003 0320 	and.w	r3, r3, #32
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d009      	beq.n	8005f74 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 82a3 	beq.w	80064b0 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	4798      	blx	r3
      }
      return;
 8005f72:	e29d      	b.n	80064b0 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005f74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 8117 	beq.w	80061ac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005f7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d106      	bne.n	8005f98 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005f8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005f8e:	4b85      	ldr	r3, [pc, #532]	; (80061a4 <HAL_UART_IRQHandler+0x298>)
 8005f90:	4013      	ands	r3, r2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 810a 	beq.w	80061ac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d011      	beq.n	8005fc8 <HAL_UART_IRQHandler+0xbc>
 8005fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00b      	beq.n	8005fc8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fbe:	f043 0201 	orr.w	r2, r3, #1
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fcc:	f003 0302 	and.w	r3, r3, #2
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d011      	beq.n	8005ff8 <HAL_UART_IRQHandler+0xec>
 8005fd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fd8:	f003 0301 	and.w	r3, r3, #1
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00b      	beq.n	8005ff8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fee:	f043 0204 	orr.w	r2, r3, #4
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ffc:	f003 0304 	and.w	r3, r3, #4
 8006000:	2b00      	cmp	r3, #0
 8006002:	d011      	beq.n	8006028 <HAL_UART_IRQHandler+0x11c>
 8006004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00b      	beq.n	8006028 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2204      	movs	r2, #4
 8006016:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800601e:	f043 0202 	orr.w	r2, r3, #2
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800602c:	f003 0308 	and.w	r3, r3, #8
 8006030:	2b00      	cmp	r3, #0
 8006032:	d017      	beq.n	8006064 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006038:	f003 0320 	and.w	r3, r3, #32
 800603c:	2b00      	cmp	r3, #0
 800603e:	d105      	bne.n	800604c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006044:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00b      	beq.n	8006064 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2208      	movs	r2, #8
 8006052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800605a:	f043 0208 	orr.w	r2, r3, #8
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800606c:	2b00      	cmp	r3, #0
 800606e:	d012      	beq.n	8006096 <HAL_UART_IRQHandler+0x18a>
 8006070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006074:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00c      	beq.n	8006096 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006084:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800608c:	f043 0220 	orr.w	r2, r3, #32
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 8209 	beq.w	80064b4 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80060a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a6:	f003 0320 	and.w	r3, r3, #32
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00d      	beq.n	80060ca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80060ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060b2:	f003 0320 	and.w	r3, r3, #32
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d007      	beq.n	80060ca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060de:	2b40      	cmp	r3, #64	; 0x40
 80060e0:	d005      	beq.n	80060ee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80060e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d04f      	beq.n	800618e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fd9c 	bl	8006c2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fe:	2b40      	cmp	r3, #64	; 0x40
 8006100:	d141      	bne.n	8006186 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	3308      	adds	r3, #8
 8006108:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006110:	e853 3f00 	ldrex	r3, [r3]
 8006114:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006118:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800611c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006120:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	3308      	adds	r3, #8
 800612a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800612e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006132:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006136:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800613a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800613e:	e841 2300 	strex	r3, r2, [r1]
 8006142:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1d9      	bne.n	8006102 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006152:	2b00      	cmp	r3, #0
 8006154:	d013      	beq.n	800617e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615a:	4a13      	ldr	r2, [pc, #76]	; (80061a8 <HAL_UART_IRQHandler+0x29c>)
 800615c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006162:	4618      	mov	r0, r3
 8006164:	f7fc fea2 	bl	8002eac <HAL_DMA_Abort_IT>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d017      	beq.n	800619e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006178:	4610      	mov	r0, r2
 800617a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800617c:	e00f      	b.n	800619e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f9ac 	bl	80064dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006184:	e00b      	b.n	800619e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 f9a8 	bl	80064dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800618c:	e007      	b.n	800619e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f9a4 	bl	80064dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800619c:	e18a      	b.n	80064b4 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800619e:	bf00      	nop
    return;
 80061a0:	e188      	b.n	80064b4 <HAL_UART_IRQHandler+0x5a8>
 80061a2:	bf00      	nop
 80061a4:	04000120 	.word	0x04000120
 80061a8:	08006cf3 	.word	0x08006cf3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	f040 8143 	bne.w	800643c <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80061b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ba:	f003 0310 	and.w	r3, r3, #16
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 813c 	beq.w	800643c <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80061c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061c8:	f003 0310 	and.w	r3, r3, #16
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 8135 	beq.w	800643c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2210      	movs	r2, #16
 80061d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e4:	2b40      	cmp	r3, #64	; 0x40
 80061e6:	f040 80b1 	bne.w	800634c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061f6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f000 815c 	beq.w	80064b8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006206:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800620a:	429a      	cmp	r2, r3
 800620c:	f080 8154 	bcs.w	80064b8 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006216:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	2b20      	cmp	r3, #32
 8006222:	f000 8085 	beq.w	8006330 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006232:	e853 3f00 	ldrex	r3, [r3]
 8006236:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800623a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800623e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006242:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	461a      	mov	r2, r3
 800624c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006250:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006254:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800625c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006260:	e841 2300 	strex	r3, r2, [r1]
 8006264:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006268:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1da      	bne.n	8006226 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3308      	adds	r3, #8
 8006276:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006278:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800627a:	e853 3f00 	ldrex	r3, [r3]
 800627e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006280:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006282:	f023 0301 	bic.w	r3, r3, #1
 8006286:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	3308      	adds	r3, #8
 8006290:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006294:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006298:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800629c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80062a0:	e841 2300 	strex	r3, r2, [r1]
 80062a4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80062a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1e1      	bne.n	8006270 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3308      	adds	r3, #8
 80062b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062b6:	e853 3f00 	ldrex	r3, [r3]
 80062ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80062bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3308      	adds	r3, #8
 80062cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80062d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80062d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80062d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80062d8:	e841 2300 	strex	r3, r2, [r1]
 80062dc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80062de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1e3      	bne.n	80062ac <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2220      	movs	r2, #32
 80062e8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062f8:	e853 3f00 	ldrex	r3, [r3]
 80062fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006300:	f023 0310 	bic.w	r3, r3, #16
 8006304:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	461a      	mov	r2, r3
 800630e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006312:	65bb      	str	r3, [r7, #88]	; 0x58
 8006314:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006316:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006318:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800631a:	e841 2300 	strex	r3, r2, [r1]
 800631e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1e4      	bne.n	80062f0 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800632a:	4618      	mov	r0, r3
 800632c:	f7fc fd85 	bl	8002e3a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800633c:	b29b      	uxth	r3, r3
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	b29b      	uxth	r3, r3
 8006342:	4619      	mov	r1, r3
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f8d3 	bl	80064f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800634a:	e0b5      	b.n	80064b8 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006358:	b29b      	uxth	r3, r3
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006366:	b29b      	uxth	r3, r3
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 80a7 	beq.w	80064bc <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800636e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006372:	2b00      	cmp	r3, #0
 8006374:	f000 80a2 	beq.w	80064bc <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006380:	e853 3f00 	ldrex	r3, [r3]
 8006384:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006388:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800638c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	461a      	mov	r2, r3
 8006396:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800639a:	647b      	str	r3, [r7, #68]	; 0x44
 800639c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063a2:	e841 2300 	strex	r3, r2, [r1]
 80063a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1e4      	bne.n	8006378 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	3308      	adds	r3, #8
 80063b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	e853 3f00 	ldrex	r3, [r3]
 80063bc:	623b      	str	r3, [r7, #32]
   return(result);
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	f023 0301 	bic.w	r3, r3, #1
 80063c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	3308      	adds	r3, #8
 80063ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80063d2:	633a      	str	r2, [r7, #48]	; 0x30
 80063d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063da:	e841 2300 	strex	r3, r2, [r1]
 80063de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1e3      	bne.n	80063ae <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2220      	movs	r2, #32
 80063ea:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	e853 3f00 	ldrex	r3, [r3]
 8006404:	60fb      	str	r3, [r7, #12]
   return(result);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f023 0310 	bic.w	r3, r3, #16
 800640c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	461a      	mov	r2, r3
 8006416:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800641a:	61fb      	str	r3, [r7, #28]
 800641c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641e:	69b9      	ldr	r1, [r7, #24]
 8006420:	69fa      	ldr	r2, [r7, #28]
 8006422:	e841 2300 	strex	r3, r2, [r1]
 8006426:	617b      	str	r3, [r7, #20]
   return(result);
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1e4      	bne.n	80063f8 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800642e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006432:	4619      	mov	r1, r3
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 f85b 	bl	80064f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800643a:	e03f      	b.n	80064bc <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800643c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00e      	beq.n	8006466 <HAL_UART_IRQHandler+0x55a>
 8006448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800644c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d008      	beq.n	8006466 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800645c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 fde3 	bl	800702a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006464:	e02d      	b.n	80064c2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800646a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00e      	beq.n	8006490 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800647a:	2b00      	cmp	r3, #0
 800647c:	d008      	beq.n	8006490 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006482:	2b00      	cmp	r3, #0
 8006484:	d01c      	beq.n	80064c0 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	4798      	blx	r3
    }
    return;
 800648e:	e017      	b.n	80064c0 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006498:	2b00      	cmp	r3, #0
 800649a:	d012      	beq.n	80064c2 <HAL_UART_IRQHandler+0x5b6>
 800649c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00c      	beq.n	80064c2 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fc38 	bl	8006d1e <UART_EndTransmit_IT>
    return;
 80064ae:	e008      	b.n	80064c2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80064b0:	bf00      	nop
 80064b2:	e006      	b.n	80064c2 <HAL_UART_IRQHandler+0x5b6>
    return;
 80064b4:	bf00      	nop
 80064b6:	e004      	b.n	80064c2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80064b8:	bf00      	nop
 80064ba:	e002      	b.n	80064c2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80064bc:	bf00      	nop
 80064be:	e000      	b.n	80064c2 <HAL_UART_IRQHandler+0x5b6>
    return;
 80064c0:	bf00      	nop
  }

}
 80064c2:	37e8      	adds	r7, #232	; 0xe8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	460b      	mov	r3, r1
 80064fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b088      	sub	sp, #32
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006510:	2300      	movs	r3, #0
 8006512:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	689a      	ldr	r2, [r3, #8]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	431a      	orrs	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	431a      	orrs	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	4313      	orrs	r3, r2
 800652a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	4b8a      	ldr	r3, [pc, #552]	; (800675c <UART_SetConfig+0x254>)
 8006534:	4013      	ands	r3, r2
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	6812      	ldr	r2, [r2, #0]
 800653a:	6979      	ldr	r1, [r7, #20]
 800653c:	430b      	orrs	r3, r1
 800653e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	430a      	orrs	r2, r1
 8006554:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	4313      	orrs	r3, r2
 8006564:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	430a      	orrs	r2, r1
 8006578:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a78      	ldr	r2, [pc, #480]	; (8006760 <UART_SetConfig+0x258>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d120      	bne.n	80065c6 <UART_SetConfig+0xbe>
 8006584:	4b77      	ldr	r3, [pc, #476]	; (8006764 <UART_SetConfig+0x25c>)
 8006586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006588:	f003 0303 	and.w	r3, r3, #3
 800658c:	2b03      	cmp	r3, #3
 800658e:	d817      	bhi.n	80065c0 <UART_SetConfig+0xb8>
 8006590:	a201      	add	r2, pc, #4	; (adr r2, 8006598 <UART_SetConfig+0x90>)
 8006592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006596:	bf00      	nop
 8006598:	080065a9 	.word	0x080065a9
 800659c:	080065b5 	.word	0x080065b5
 80065a0:	080065bb 	.word	0x080065bb
 80065a4:	080065af 	.word	0x080065af
 80065a8:	2300      	movs	r3, #0
 80065aa:	77fb      	strb	r3, [r7, #31]
 80065ac:	e01d      	b.n	80065ea <UART_SetConfig+0xe2>
 80065ae:	2302      	movs	r3, #2
 80065b0:	77fb      	strb	r3, [r7, #31]
 80065b2:	e01a      	b.n	80065ea <UART_SetConfig+0xe2>
 80065b4:	2304      	movs	r3, #4
 80065b6:	77fb      	strb	r3, [r7, #31]
 80065b8:	e017      	b.n	80065ea <UART_SetConfig+0xe2>
 80065ba:	2308      	movs	r3, #8
 80065bc:	77fb      	strb	r3, [r7, #31]
 80065be:	e014      	b.n	80065ea <UART_SetConfig+0xe2>
 80065c0:	2310      	movs	r3, #16
 80065c2:	77fb      	strb	r3, [r7, #31]
 80065c4:	e011      	b.n	80065ea <UART_SetConfig+0xe2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a67      	ldr	r2, [pc, #412]	; (8006768 <UART_SetConfig+0x260>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d102      	bne.n	80065d6 <UART_SetConfig+0xce>
 80065d0:	2300      	movs	r3, #0
 80065d2:	77fb      	strb	r3, [r7, #31]
 80065d4:	e009      	b.n	80065ea <UART_SetConfig+0xe2>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a64      	ldr	r2, [pc, #400]	; (800676c <UART_SetConfig+0x264>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d102      	bne.n	80065e6 <UART_SetConfig+0xde>
 80065e0:	2300      	movs	r3, #0
 80065e2:	77fb      	strb	r3, [r7, #31]
 80065e4:	e001      	b.n	80065ea <UART_SetConfig+0xe2>
 80065e6:	2310      	movs	r3, #16
 80065e8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065f2:	d15b      	bne.n	80066ac <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80065f4:	7ffb      	ldrb	r3, [r7, #31]
 80065f6:	2b08      	cmp	r3, #8
 80065f8:	d827      	bhi.n	800664a <UART_SetConfig+0x142>
 80065fa:	a201      	add	r2, pc, #4	; (adr r2, 8006600 <UART_SetConfig+0xf8>)
 80065fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006600:	08006625 	.word	0x08006625
 8006604:	0800662d 	.word	0x0800662d
 8006608:	08006635 	.word	0x08006635
 800660c:	0800664b 	.word	0x0800664b
 8006610:	0800663b 	.word	0x0800663b
 8006614:	0800664b 	.word	0x0800664b
 8006618:	0800664b 	.word	0x0800664b
 800661c:	0800664b 	.word	0x0800664b
 8006620:	08006643 	.word	0x08006643
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006624:	f7fd ff36 	bl	8004494 <HAL_RCC_GetPCLK1Freq>
 8006628:	61b8      	str	r0, [r7, #24]
        break;
 800662a:	e013      	b.n	8006654 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800662c:	f7fd ff54 	bl	80044d8 <HAL_RCC_GetPCLK2Freq>
 8006630:	61b8      	str	r0, [r7, #24]
        break;
 8006632:	e00f      	b.n	8006654 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006634:	4b4e      	ldr	r3, [pc, #312]	; (8006770 <UART_SetConfig+0x268>)
 8006636:	61bb      	str	r3, [r7, #24]
        break;
 8006638:	e00c      	b.n	8006654 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800663a:	f7fd feb3 	bl	80043a4 <HAL_RCC_GetSysClockFreq>
 800663e:	61b8      	str	r0, [r7, #24]
        break;
 8006640:	e008      	b.n	8006654 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006646:	61bb      	str	r3, [r7, #24]
        break;
 8006648:	e004      	b.n	8006654 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800664a:	2300      	movs	r3, #0
 800664c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	77bb      	strb	r3, [r7, #30]
        break;
 8006652:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d074      	beq.n	8006744 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	005a      	lsls	r2, r3, #1
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	085b      	lsrs	r3, r3, #1
 8006664:	441a      	add	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	fbb2 f3f3 	udiv	r3, r2, r3
 800666e:	b29b      	uxth	r3, r3
 8006670:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	2b0f      	cmp	r3, #15
 8006676:	d916      	bls.n	80066a6 <UART_SetConfig+0x19e>
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800667e:	d212      	bcs.n	80066a6 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	b29b      	uxth	r3, r3
 8006684:	f023 030f 	bic.w	r3, r3, #15
 8006688:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	085b      	lsrs	r3, r3, #1
 800668e:	b29b      	uxth	r3, r3
 8006690:	f003 0307 	and.w	r3, r3, #7
 8006694:	b29a      	uxth	r2, r3
 8006696:	89fb      	ldrh	r3, [r7, #14]
 8006698:	4313      	orrs	r3, r2
 800669a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	89fa      	ldrh	r2, [r7, #14]
 80066a2:	60da      	str	r2, [r3, #12]
 80066a4:	e04e      	b.n	8006744 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	77bb      	strb	r3, [r7, #30]
 80066aa:	e04b      	b.n	8006744 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066ac:	7ffb      	ldrb	r3, [r7, #31]
 80066ae:	2b08      	cmp	r3, #8
 80066b0:	d827      	bhi.n	8006702 <UART_SetConfig+0x1fa>
 80066b2:	a201      	add	r2, pc, #4	; (adr r2, 80066b8 <UART_SetConfig+0x1b0>)
 80066b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b8:	080066dd 	.word	0x080066dd
 80066bc:	080066e5 	.word	0x080066e5
 80066c0:	080066ed 	.word	0x080066ed
 80066c4:	08006703 	.word	0x08006703
 80066c8:	080066f3 	.word	0x080066f3
 80066cc:	08006703 	.word	0x08006703
 80066d0:	08006703 	.word	0x08006703
 80066d4:	08006703 	.word	0x08006703
 80066d8:	080066fb 	.word	0x080066fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066dc:	f7fd feda 	bl	8004494 <HAL_RCC_GetPCLK1Freq>
 80066e0:	61b8      	str	r0, [r7, #24]
        break;
 80066e2:	e013      	b.n	800670c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066e4:	f7fd fef8 	bl	80044d8 <HAL_RCC_GetPCLK2Freq>
 80066e8:	61b8      	str	r0, [r7, #24]
        break;
 80066ea:	e00f      	b.n	800670c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066ec:	4b20      	ldr	r3, [pc, #128]	; (8006770 <UART_SetConfig+0x268>)
 80066ee:	61bb      	str	r3, [r7, #24]
        break;
 80066f0:	e00c      	b.n	800670c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066f2:	f7fd fe57 	bl	80043a4 <HAL_RCC_GetSysClockFreq>
 80066f6:	61b8      	str	r0, [r7, #24]
        break;
 80066f8:	e008      	b.n	800670c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066fe:	61bb      	str	r3, [r7, #24]
        break;
 8006700:	e004      	b.n	800670c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006702:	2300      	movs	r3, #0
 8006704:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	77bb      	strb	r3, [r7, #30]
        break;
 800670a:	bf00      	nop
    }

    if (pclk != 0U)
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d018      	beq.n	8006744 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	085a      	lsrs	r2, r3, #1
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	441a      	add	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	fbb2 f3f3 	udiv	r3, r2, r3
 8006724:	b29b      	uxth	r3, r3
 8006726:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	2b0f      	cmp	r3, #15
 800672c:	d908      	bls.n	8006740 <UART_SetConfig+0x238>
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006734:	d204      	bcs.n	8006740 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	60da      	str	r2, [r3, #12]
 800673e:	e001      	b.n	8006744 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006750:	7fbb      	ldrb	r3, [r7, #30]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3720      	adds	r7, #32
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	efff69f3 	.word	0xefff69f3
 8006760:	40013800 	.word	0x40013800
 8006764:	40021000 	.word	0x40021000
 8006768:	40004400 	.word	0x40004400
 800676c:	40004800 	.word	0x40004800
 8006770:	007a1200 	.word	0x007a1200

08006774 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00a      	beq.n	800679e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00a      	beq.n	80067c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	430a      	orrs	r2, r1
 80067be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c4:	f003 0304 	and.w	r3, r3, #4
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00a      	beq.n	80067e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	430a      	orrs	r2, r1
 80067e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	f003 0308 	and.w	r3, r3, #8
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00a      	beq.n	8006804 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006808:	f003 0310 	and.w	r3, r3, #16
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00a      	beq.n	8006826 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682a:	f003 0320 	and.w	r3, r3, #32
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00a      	beq.n	8006848 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	430a      	orrs	r2, r1
 8006846:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006850:	2b00      	cmp	r3, #0
 8006852:	d01a      	beq.n	800688a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006872:	d10a      	bne.n	800688a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00a      	beq.n	80068ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	430a      	orrs	r2, r1
 80068aa:	605a      	str	r2, [r3, #4]
  }
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af02      	add	r7, sp, #8
 80068be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068c8:	f7fc f99a 	bl	8002c00 <HAL_GetTick>
 80068cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0308 	and.w	r3, r3, #8
 80068d8:	2b08      	cmp	r3, #8
 80068da:	d10e      	bne.n	80068fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f82d 	bl	800694a <UART_WaitOnFlagUntilTimeout>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e023      	b.n	8006942 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0304 	and.w	r3, r3, #4
 8006904:	2b04      	cmp	r3, #4
 8006906:	d10e      	bne.n	8006926 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006908:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f817 	bl	800694a <UART_WaitOnFlagUntilTimeout>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d001      	beq.n	8006926 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e00d      	b.n	8006942 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2220      	movs	r2, #32
 800692a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2220      	movs	r2, #32
 8006930:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b09c      	sub	sp, #112	; 0x70
 800694e:	af00      	add	r7, sp, #0
 8006950:	60f8      	str	r0, [r7, #12]
 8006952:	60b9      	str	r1, [r7, #8]
 8006954:	603b      	str	r3, [r7, #0]
 8006956:	4613      	mov	r3, r2
 8006958:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800695a:	e0a5      	b.n	8006aa8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800695c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800695e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006962:	f000 80a1 	beq.w	8006aa8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006966:	f7fc f94b 	bl	8002c00 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006972:	429a      	cmp	r2, r3
 8006974:	d302      	bcc.n	800697c <UART_WaitOnFlagUntilTimeout+0x32>
 8006976:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006978:	2b00      	cmp	r3, #0
 800697a:	d13e      	bne.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006984:	e853 3f00 	ldrex	r3, [r3]
 8006988:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800698a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800698c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006990:	667b      	str	r3, [r7, #100]	; 0x64
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	461a      	mov	r2, r3
 8006998:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800699a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800699c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80069a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80069a2:	e841 2300 	strex	r3, r2, [r1]
 80069a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80069a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1e6      	bne.n	800697c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3308      	adds	r3, #8
 80069b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b8:	e853 3f00 	ldrex	r3, [r3]
 80069bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c0:	f023 0301 	bic.w	r3, r3, #1
 80069c4:	663b      	str	r3, [r7, #96]	; 0x60
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	3308      	adds	r3, #8
 80069cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80069ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80069d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069d6:	e841 2300 	strex	r3, r2, [r1]
 80069da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80069dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1e5      	bne.n	80069ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2220      	movs	r2, #32
 80069e6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2220      	movs	r2, #32
 80069ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e067      	b.n	8006aca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0304 	and.w	r3, r3, #4
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d04f      	beq.n	8006aa8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	69db      	ldr	r3, [r3, #28]
 8006a0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a16:	d147      	bne.n	8006aa8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a20:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2a:	e853 3f00 	ldrex	r3, [r3]
 8006a2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a40:	637b      	str	r3, [r7, #52]	; 0x34
 8006a42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a48:	e841 2300 	strex	r3, r2, [r1]
 8006a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1e6      	bne.n	8006a22 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3308      	adds	r3, #8
 8006a5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	e853 3f00 	ldrex	r3, [r3]
 8006a62:	613b      	str	r3, [r7, #16]
   return(result);
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	f023 0301 	bic.w	r3, r3, #1
 8006a6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3308      	adds	r3, #8
 8006a72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a74:	623a      	str	r2, [r7, #32]
 8006a76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a78:	69f9      	ldr	r1, [r7, #28]
 8006a7a:	6a3a      	ldr	r2, [r7, #32]
 8006a7c:	e841 2300 	strex	r3, r2, [r1]
 8006a80:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1e5      	bne.n	8006a54 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2220      	movs	r2, #32
 8006a8c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2220      	movs	r2, #32
 8006a92:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2220      	movs	r2, #32
 8006a98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e010      	b.n	8006aca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	69da      	ldr	r2, [r3, #28]
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	bf0c      	ite	eq
 8006ab8:	2301      	moveq	r3, #1
 8006aba:	2300      	movne	r3, #0
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	461a      	mov	r2, r3
 8006ac0:	79fb      	ldrb	r3, [r7, #7]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	f43f af4a 	beq.w	800695c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3770      	adds	r7, #112	; 0x70
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
	...

08006ad4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b091      	sub	sp, #68	; 0x44
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	88fa      	ldrh	r2, [r7, #6]
 8006aec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	88fa      	ldrh	r2, [r7, #6]
 8006af4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b06:	d10e      	bne.n	8006b26 <UART_Start_Receive_IT+0x52>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d105      	bne.n	8006b1c <UART_Start_Receive_IT+0x48>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006b16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b1a:	e02d      	b.n	8006b78 <UART_Start_Receive_IT+0xa4>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	22ff      	movs	r2, #255	; 0xff
 8006b20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b24:	e028      	b.n	8006b78 <UART_Start_Receive_IT+0xa4>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10d      	bne.n	8006b4a <UART_Start_Receive_IT+0x76>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d104      	bne.n	8006b40 <UART_Start_Receive_IT+0x6c>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	22ff      	movs	r2, #255	; 0xff
 8006b3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b3e:	e01b      	b.n	8006b78 <UART_Start_Receive_IT+0xa4>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	227f      	movs	r2, #127	; 0x7f
 8006b44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b48:	e016      	b.n	8006b78 <UART_Start_Receive_IT+0xa4>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b52:	d10d      	bne.n	8006b70 <UART_Start_Receive_IT+0x9c>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d104      	bne.n	8006b66 <UART_Start_Receive_IT+0x92>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	227f      	movs	r2, #127	; 0x7f
 8006b60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b64:	e008      	b.n	8006b78 <UART_Start_Receive_IT+0xa4>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	223f      	movs	r2, #63	; 0x3f
 8006b6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b6e:	e003      	b.n	8006b78 <UART_Start_Receive_IT+0xa4>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2222      	movs	r2, #34	; 0x22
 8006b84:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3308      	adds	r3, #8
 8006b8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b90:	e853 3f00 	ldrex	r3, [r3]
 8006b94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b98:	f043 0301 	orr.w	r3, r3, #1
 8006b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3308      	adds	r3, #8
 8006ba4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ba6:	637a      	str	r2, [r7, #52]	; 0x34
 8006ba8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006baa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bae:	e841 2300 	strex	r3, r2, [r1]
 8006bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1e5      	bne.n	8006b86 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bc2:	d107      	bne.n	8006bd4 <UART_Start_Receive_IT+0x100>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d103      	bne.n	8006bd4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	4a15      	ldr	r2, [pc, #84]	; (8006c24 <UART_Start_Receive_IT+0x150>)
 8006bd0:	665a      	str	r2, [r3, #100]	; 0x64
 8006bd2:	e002      	b.n	8006bda <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	4a14      	ldr	r2, [pc, #80]	; (8006c28 <UART_Start_Receive_IT+0x154>)
 8006bd8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	e853 3f00 	ldrex	r3, [r3]
 8006bee:	613b      	str	r3, [r7, #16]
   return(result);
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006bf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c00:	623b      	str	r3, [r7, #32]
 8006c02:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c04:	69f9      	ldr	r1, [r7, #28]
 8006c06:	6a3a      	ldr	r2, [r7, #32]
 8006c08:	e841 2300 	strex	r3, r2, [r1]
 8006c0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1e6      	bne.n	8006be2 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3744      	adds	r7, #68	; 0x44
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	08006ecf 	.word	0x08006ecf
 8006c28:	08006d73 	.word	0x08006d73

08006c2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b095      	sub	sp, #84	; 0x54
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c3c:	e853 3f00 	ldrex	r3, [r3]
 8006c40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c52:	643b      	str	r3, [r7, #64]	; 0x40
 8006c54:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c5a:	e841 2300 	strex	r3, r2, [r1]
 8006c5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1e6      	bne.n	8006c34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3308      	adds	r3, #8
 8006c6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	6a3b      	ldr	r3, [r7, #32]
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	f023 0301 	bic.w	r3, r3, #1
 8006c7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3308      	adds	r3, #8
 8006c84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c8e:	e841 2300 	strex	r3, r2, [r1]
 8006c92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1e5      	bne.n	8006c66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d118      	bne.n	8006cd4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	e853 3f00 	ldrex	r3, [r3]
 8006cae:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	f023 0310 	bic.w	r3, r3, #16
 8006cb6:	647b      	str	r3, [r7, #68]	; 0x44
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cc0:	61bb      	str	r3, [r7, #24]
 8006cc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc4:	6979      	ldr	r1, [r7, #20]
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	e841 2300 	strex	r3, r2, [r1]
 8006ccc:	613b      	str	r3, [r7, #16]
   return(result);
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1e6      	bne.n	8006ca2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2220      	movs	r2, #32
 8006cd8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006ce6:	bf00      	nop
 8006ce8:	3754      	adds	r7, #84	; 0x54
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b084      	sub	sp, #16
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f7ff fbe3 	bl	80064dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d16:	bf00      	nop
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b088      	sub	sp, #32
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	e853 3f00 	ldrex	r3, [r3]
 8006d32:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d3a:	61fb      	str	r3, [r7, #28]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	461a      	mov	r2, r3
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	61bb      	str	r3, [r7, #24]
 8006d46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d48:	6979      	ldr	r1, [r7, #20]
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	e841 2300 	strex	r3, r2, [r1]
 8006d50:	613b      	str	r3, [r7, #16]
   return(result);
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1e6      	bne.n	8006d26 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7ff fbaf 	bl	80064c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d6a:	bf00      	nop
 8006d6c:	3720      	adds	r7, #32
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b096      	sub	sp, #88	; 0x58
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d80:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d88:	2b22      	cmp	r3, #34	; 0x22
 8006d8a:	f040 8094 	bne.w	8006eb6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006d94:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d98:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006d9c:	b2d9      	uxtb	r1, r3
 8006d9e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006da2:	b2da      	uxtb	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da8:	400a      	ands	r2, r1
 8006daa:	b2d2      	uxtb	r2, r2
 8006dac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d177      	bne.n	8006ec6 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dde:	e853 3f00 	ldrex	r3, [r3]
 8006de2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dea:	653b      	str	r3, [r7, #80]	; 0x50
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	461a      	mov	r2, r3
 8006df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006df4:	647b      	str	r3, [r7, #68]	; 0x44
 8006df6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006dfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dfc:	e841 2300 	strex	r3, r2, [r1]
 8006e00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1e6      	bne.n	8006dd6 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3308      	adds	r3, #8
 8006e0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	e853 3f00 	ldrex	r3, [r3]
 8006e16:	623b      	str	r3, [r7, #32]
   return(result);
 8006e18:	6a3b      	ldr	r3, [r7, #32]
 8006e1a:	f023 0301 	bic.w	r3, r3, #1
 8006e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3308      	adds	r3, #8
 8006e26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e28:	633a      	str	r2, [r7, #48]	; 0x30
 8006e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e30:	e841 2300 	strex	r3, r2, [r1]
 8006e34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1e5      	bne.n	8006e08 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2220      	movs	r2, #32
 8006e40:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d12e      	bne.n	8006eae <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	e853 3f00 	ldrex	r3, [r3]
 8006e62:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f023 0310 	bic.w	r3, r3, #16
 8006e6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	461a      	mov	r2, r3
 8006e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e74:	61fb      	str	r3, [r7, #28]
 8006e76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e78:	69b9      	ldr	r1, [r7, #24]
 8006e7a:	69fa      	ldr	r2, [r7, #28]
 8006e7c:	e841 2300 	strex	r3, r2, [r1]
 8006e80:	617b      	str	r3, [r7, #20]
   return(result);
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1e6      	bne.n	8006e56 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	f003 0310 	and.w	r3, r3, #16
 8006e92:	2b10      	cmp	r3, #16
 8006e94:	d103      	bne.n	8006e9e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2210      	movs	r2, #16
 8006e9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7ff fb22 	bl	80064f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006eac:	e00b      	b.n	8006ec6 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7fa fed9 	bl	8001c66 <HAL_UART_RxCpltCallback>
}
 8006eb4:	e007      	b.n	8006ec6 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	699a      	ldr	r2, [r3, #24]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f042 0208 	orr.w	r2, r2, #8
 8006ec4:	619a      	str	r2, [r3, #24]
}
 8006ec6:	bf00      	nop
 8006ec8:	3758      	adds	r7, #88	; 0x58
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b096      	sub	sp, #88	; 0x58
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006edc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ee4:	2b22      	cmp	r3, #34	; 0x22
 8006ee6:	f040 8094 	bne.w	8007012 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006ef0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006efa:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006efe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006f02:	4013      	ands	r3, r2
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f08:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f0e:	1c9a      	adds	r2, r3, #2
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d177      	bne.n	8007022 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f3a:	e853 3f00 	ldrex	r3, [r3]
 8006f3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f50:	643b      	str	r3, [r7, #64]	; 0x40
 8006f52:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f58:	e841 2300 	strex	r3, r2, [r1]
 8006f5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e6      	bne.n	8006f32 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3308      	adds	r3, #8
 8006f6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6c:	6a3b      	ldr	r3, [r7, #32]
 8006f6e:	e853 3f00 	ldrex	r3, [r3]
 8006f72:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	f023 0301 	bic.w	r3, r3, #1
 8006f7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3308      	adds	r3, #8
 8006f82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f8c:	e841 2300 	strex	r3, r2, [r1]
 8006f90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1e5      	bne.n	8006f64 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2220      	movs	r2, #32
 8006f9c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d12e      	bne.n	800700a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	e853 3f00 	ldrex	r3, [r3]
 8006fbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	f023 0310 	bic.w	r3, r3, #16
 8006fc6:	647b      	str	r3, [r7, #68]	; 0x44
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	461a      	mov	r2, r3
 8006fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fd0:	61bb      	str	r3, [r7, #24]
 8006fd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd4:	6979      	ldr	r1, [r7, #20]
 8006fd6:	69ba      	ldr	r2, [r7, #24]
 8006fd8:	e841 2300 	strex	r3, r2, [r1]
 8006fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1e6      	bne.n	8006fb2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	69db      	ldr	r3, [r3, #28]
 8006fea:	f003 0310 	and.w	r3, r3, #16
 8006fee:	2b10      	cmp	r3, #16
 8006ff0:	d103      	bne.n	8006ffa <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2210      	movs	r2, #16
 8006ff8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007000:	4619      	mov	r1, r3
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f7ff fa74 	bl	80064f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007008:	e00b      	b.n	8007022 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7fa fe2b 	bl	8001c66 <HAL_UART_RxCpltCallback>
}
 8007010:	e007      	b.n	8007022 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	699a      	ldr	r2, [r3, #24]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f042 0208 	orr.w	r2, r2, #8
 8007020:	619a      	str	r2, [r3, #24]
}
 8007022:	bf00      	nop
 8007024:	3758      	adds	r7, #88	; 0x58
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800702a:	b480      	push	{r7}
 800702c:	b083      	sub	sp, #12
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007032:	bf00      	nop
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
	...

08007040 <__libc_init_array>:
 8007040:	b570      	push	{r4, r5, r6, lr}
 8007042:	4d0d      	ldr	r5, [pc, #52]	; (8007078 <__libc_init_array+0x38>)
 8007044:	4c0d      	ldr	r4, [pc, #52]	; (800707c <__libc_init_array+0x3c>)
 8007046:	1b64      	subs	r4, r4, r5
 8007048:	10a4      	asrs	r4, r4, #2
 800704a:	2600      	movs	r6, #0
 800704c:	42a6      	cmp	r6, r4
 800704e:	d109      	bne.n	8007064 <__libc_init_array+0x24>
 8007050:	4d0b      	ldr	r5, [pc, #44]	; (8007080 <__libc_init_array+0x40>)
 8007052:	4c0c      	ldr	r4, [pc, #48]	; (8007084 <__libc_init_array+0x44>)
 8007054:	f001 f8a6 	bl	80081a4 <_init>
 8007058:	1b64      	subs	r4, r4, r5
 800705a:	10a4      	asrs	r4, r4, #2
 800705c:	2600      	movs	r6, #0
 800705e:	42a6      	cmp	r6, r4
 8007060:	d105      	bne.n	800706e <__libc_init_array+0x2e>
 8007062:	bd70      	pop	{r4, r5, r6, pc}
 8007064:	f855 3b04 	ldr.w	r3, [r5], #4
 8007068:	4798      	blx	r3
 800706a:	3601      	adds	r6, #1
 800706c:	e7ee      	b.n	800704c <__libc_init_array+0xc>
 800706e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007072:	4798      	blx	r3
 8007074:	3601      	adds	r6, #1
 8007076:	e7f2      	b.n	800705e <__libc_init_array+0x1e>
 8007078:	080083d0 	.word	0x080083d0
 800707c:	080083d0 	.word	0x080083d0
 8007080:	080083d0 	.word	0x080083d0
 8007084:	080083d4 	.word	0x080083d4

08007088 <memset>:
 8007088:	4402      	add	r2, r0
 800708a:	4603      	mov	r3, r0
 800708c:	4293      	cmp	r3, r2
 800708e:	d100      	bne.n	8007092 <memset+0xa>
 8007090:	4770      	bx	lr
 8007092:	f803 1b01 	strb.w	r1, [r3], #1
 8007096:	e7f9      	b.n	800708c <memset+0x4>

08007098 <cos>:
 8007098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800709a:	ec53 2b10 	vmov	r2, r3, d0
 800709e:	4824      	ldr	r0, [pc, #144]	; (8007130 <cos+0x98>)
 80070a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80070a4:	4281      	cmp	r1, r0
 80070a6:	dc06      	bgt.n	80070b6 <cos+0x1e>
 80070a8:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8007128 <cos+0x90>
 80070ac:	f000 faa4 	bl	80075f8 <__kernel_cos>
 80070b0:	ec51 0b10 	vmov	r0, r1, d0
 80070b4:	e007      	b.n	80070c6 <cos+0x2e>
 80070b6:	481f      	ldr	r0, [pc, #124]	; (8007134 <cos+0x9c>)
 80070b8:	4281      	cmp	r1, r0
 80070ba:	dd09      	ble.n	80070d0 <cos+0x38>
 80070bc:	ee10 0a10 	vmov	r0, s0
 80070c0:	4619      	mov	r1, r3
 80070c2:	f7f9 f885 	bl	80001d0 <__aeabi_dsub>
 80070c6:	ec41 0b10 	vmov	d0, r0, r1
 80070ca:	b005      	add	sp, #20
 80070cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80070d0:	4668      	mov	r0, sp
 80070d2:	f000 f885 	bl	80071e0 <__ieee754_rem_pio2>
 80070d6:	f000 0003 	and.w	r0, r0, #3
 80070da:	2801      	cmp	r0, #1
 80070dc:	d007      	beq.n	80070ee <cos+0x56>
 80070de:	2802      	cmp	r0, #2
 80070e0:	d012      	beq.n	8007108 <cos+0x70>
 80070e2:	b9c0      	cbnz	r0, 8007116 <cos+0x7e>
 80070e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80070e8:	ed9d 0b00 	vldr	d0, [sp]
 80070ec:	e7de      	b.n	80070ac <cos+0x14>
 80070ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80070f2:	ed9d 0b00 	vldr	d0, [sp]
 80070f6:	f000 fe87 	bl	8007e08 <__kernel_sin>
 80070fa:	ec53 2b10 	vmov	r2, r3, d0
 80070fe:	ee10 0a10 	vmov	r0, s0
 8007102:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007106:	e7de      	b.n	80070c6 <cos+0x2e>
 8007108:	ed9d 1b02 	vldr	d1, [sp, #8]
 800710c:	ed9d 0b00 	vldr	d0, [sp]
 8007110:	f000 fa72 	bl	80075f8 <__kernel_cos>
 8007114:	e7f1      	b.n	80070fa <cos+0x62>
 8007116:	ed9d 1b02 	vldr	d1, [sp, #8]
 800711a:	ed9d 0b00 	vldr	d0, [sp]
 800711e:	2001      	movs	r0, #1
 8007120:	f000 fe72 	bl	8007e08 <__kernel_sin>
 8007124:	e7c4      	b.n	80070b0 <cos+0x18>
 8007126:	bf00      	nop
	...
 8007130:	3fe921fb 	.word	0x3fe921fb
 8007134:	7fefffff 	.word	0x7fefffff

08007138 <sin>:
 8007138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800713a:	ec53 2b10 	vmov	r2, r3, d0
 800713e:	4826      	ldr	r0, [pc, #152]	; (80071d8 <sin+0xa0>)
 8007140:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007144:	4281      	cmp	r1, r0
 8007146:	dc07      	bgt.n	8007158 <sin+0x20>
 8007148:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80071d0 <sin+0x98>
 800714c:	2000      	movs	r0, #0
 800714e:	f000 fe5b 	bl	8007e08 <__kernel_sin>
 8007152:	ec51 0b10 	vmov	r0, r1, d0
 8007156:	e007      	b.n	8007168 <sin+0x30>
 8007158:	4820      	ldr	r0, [pc, #128]	; (80071dc <sin+0xa4>)
 800715a:	4281      	cmp	r1, r0
 800715c:	dd09      	ble.n	8007172 <sin+0x3a>
 800715e:	ee10 0a10 	vmov	r0, s0
 8007162:	4619      	mov	r1, r3
 8007164:	f7f9 f834 	bl	80001d0 <__aeabi_dsub>
 8007168:	ec41 0b10 	vmov	d0, r0, r1
 800716c:	b005      	add	sp, #20
 800716e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007172:	4668      	mov	r0, sp
 8007174:	f000 f834 	bl	80071e0 <__ieee754_rem_pio2>
 8007178:	f000 0003 	and.w	r0, r0, #3
 800717c:	2801      	cmp	r0, #1
 800717e:	d008      	beq.n	8007192 <sin+0x5a>
 8007180:	2802      	cmp	r0, #2
 8007182:	d00d      	beq.n	80071a0 <sin+0x68>
 8007184:	b9d0      	cbnz	r0, 80071bc <sin+0x84>
 8007186:	ed9d 1b02 	vldr	d1, [sp, #8]
 800718a:	ed9d 0b00 	vldr	d0, [sp]
 800718e:	2001      	movs	r0, #1
 8007190:	e7dd      	b.n	800714e <sin+0x16>
 8007192:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007196:	ed9d 0b00 	vldr	d0, [sp]
 800719a:	f000 fa2d 	bl	80075f8 <__kernel_cos>
 800719e:	e7d8      	b.n	8007152 <sin+0x1a>
 80071a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80071a4:	ed9d 0b00 	vldr	d0, [sp]
 80071a8:	2001      	movs	r0, #1
 80071aa:	f000 fe2d 	bl	8007e08 <__kernel_sin>
 80071ae:	ec53 2b10 	vmov	r2, r3, d0
 80071b2:	ee10 0a10 	vmov	r0, s0
 80071b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80071ba:	e7d5      	b.n	8007168 <sin+0x30>
 80071bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80071c0:	ed9d 0b00 	vldr	d0, [sp]
 80071c4:	f000 fa18 	bl	80075f8 <__kernel_cos>
 80071c8:	e7f1      	b.n	80071ae <sin+0x76>
 80071ca:	bf00      	nop
 80071cc:	f3af 8000 	nop.w
	...
 80071d8:	3fe921fb 	.word	0x3fe921fb
 80071dc:	7fefffff 	.word	0x7fefffff

080071e0 <__ieee754_rem_pio2>:
 80071e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e4:	ed2d 8b02 	vpush	{d8}
 80071e8:	ec55 4b10 	vmov	r4, r5, d0
 80071ec:	4bca      	ldr	r3, [pc, #808]	; (8007518 <__ieee754_rem_pio2+0x338>)
 80071ee:	b08b      	sub	sp, #44	; 0x2c
 80071f0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80071f4:	4598      	cmp	r8, r3
 80071f6:	4682      	mov	sl, r0
 80071f8:	9502      	str	r5, [sp, #8]
 80071fa:	dc08      	bgt.n	800720e <__ieee754_rem_pio2+0x2e>
 80071fc:	2200      	movs	r2, #0
 80071fe:	2300      	movs	r3, #0
 8007200:	ed80 0b00 	vstr	d0, [r0]
 8007204:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007208:	f04f 0b00 	mov.w	fp, #0
 800720c:	e028      	b.n	8007260 <__ieee754_rem_pio2+0x80>
 800720e:	4bc3      	ldr	r3, [pc, #780]	; (800751c <__ieee754_rem_pio2+0x33c>)
 8007210:	4598      	cmp	r8, r3
 8007212:	dc78      	bgt.n	8007306 <__ieee754_rem_pio2+0x126>
 8007214:	9b02      	ldr	r3, [sp, #8]
 8007216:	4ec2      	ldr	r6, [pc, #776]	; (8007520 <__ieee754_rem_pio2+0x340>)
 8007218:	2b00      	cmp	r3, #0
 800721a:	ee10 0a10 	vmov	r0, s0
 800721e:	a3b0      	add	r3, pc, #704	; (adr r3, 80074e0 <__ieee754_rem_pio2+0x300>)
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	4629      	mov	r1, r5
 8007226:	dd39      	ble.n	800729c <__ieee754_rem_pio2+0xbc>
 8007228:	f7f8 ffd2 	bl	80001d0 <__aeabi_dsub>
 800722c:	45b0      	cmp	r8, r6
 800722e:	4604      	mov	r4, r0
 8007230:	460d      	mov	r5, r1
 8007232:	d01b      	beq.n	800726c <__ieee754_rem_pio2+0x8c>
 8007234:	a3ac      	add	r3, pc, #688	; (adr r3, 80074e8 <__ieee754_rem_pio2+0x308>)
 8007236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723a:	f7f8 ffc9 	bl	80001d0 <__aeabi_dsub>
 800723e:	4602      	mov	r2, r0
 8007240:	460b      	mov	r3, r1
 8007242:	e9ca 2300 	strd	r2, r3, [sl]
 8007246:	4620      	mov	r0, r4
 8007248:	4629      	mov	r1, r5
 800724a:	f7f8 ffc1 	bl	80001d0 <__aeabi_dsub>
 800724e:	a3a6      	add	r3, pc, #664	; (adr r3, 80074e8 <__ieee754_rem_pio2+0x308>)
 8007250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007254:	f7f8 ffbc 	bl	80001d0 <__aeabi_dsub>
 8007258:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800725c:	f04f 0b01 	mov.w	fp, #1
 8007260:	4658      	mov	r0, fp
 8007262:	b00b      	add	sp, #44	; 0x2c
 8007264:	ecbd 8b02 	vpop	{d8}
 8007268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800726c:	a3a0      	add	r3, pc, #640	; (adr r3, 80074f0 <__ieee754_rem_pio2+0x310>)
 800726e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007272:	f7f8 ffad 	bl	80001d0 <__aeabi_dsub>
 8007276:	a3a0      	add	r3, pc, #640	; (adr r3, 80074f8 <__ieee754_rem_pio2+0x318>)
 8007278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727c:	4604      	mov	r4, r0
 800727e:	460d      	mov	r5, r1
 8007280:	f7f8 ffa6 	bl	80001d0 <__aeabi_dsub>
 8007284:	4602      	mov	r2, r0
 8007286:	460b      	mov	r3, r1
 8007288:	e9ca 2300 	strd	r2, r3, [sl]
 800728c:	4620      	mov	r0, r4
 800728e:	4629      	mov	r1, r5
 8007290:	f7f8 ff9e 	bl	80001d0 <__aeabi_dsub>
 8007294:	a398      	add	r3, pc, #608	; (adr r3, 80074f8 <__ieee754_rem_pio2+0x318>)
 8007296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729a:	e7db      	b.n	8007254 <__ieee754_rem_pio2+0x74>
 800729c:	f7f8 ff9a 	bl	80001d4 <__adddf3>
 80072a0:	45b0      	cmp	r8, r6
 80072a2:	4604      	mov	r4, r0
 80072a4:	460d      	mov	r5, r1
 80072a6:	d016      	beq.n	80072d6 <__ieee754_rem_pio2+0xf6>
 80072a8:	a38f      	add	r3, pc, #572	; (adr r3, 80074e8 <__ieee754_rem_pio2+0x308>)
 80072aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ae:	f7f8 ff91 	bl	80001d4 <__adddf3>
 80072b2:	4602      	mov	r2, r0
 80072b4:	460b      	mov	r3, r1
 80072b6:	e9ca 2300 	strd	r2, r3, [sl]
 80072ba:	4620      	mov	r0, r4
 80072bc:	4629      	mov	r1, r5
 80072be:	f7f8 ff87 	bl	80001d0 <__aeabi_dsub>
 80072c2:	a389      	add	r3, pc, #548	; (adr r3, 80074e8 <__ieee754_rem_pio2+0x308>)
 80072c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c8:	f7f8 ff84 	bl	80001d4 <__adddf3>
 80072cc:	f04f 3bff 	mov.w	fp, #4294967295
 80072d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80072d4:	e7c4      	b.n	8007260 <__ieee754_rem_pio2+0x80>
 80072d6:	a386      	add	r3, pc, #536	; (adr r3, 80074f0 <__ieee754_rem_pio2+0x310>)
 80072d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072dc:	f7f8 ff7a 	bl	80001d4 <__adddf3>
 80072e0:	a385      	add	r3, pc, #532	; (adr r3, 80074f8 <__ieee754_rem_pio2+0x318>)
 80072e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e6:	4604      	mov	r4, r0
 80072e8:	460d      	mov	r5, r1
 80072ea:	f7f8 ff73 	bl	80001d4 <__adddf3>
 80072ee:	4602      	mov	r2, r0
 80072f0:	460b      	mov	r3, r1
 80072f2:	e9ca 2300 	strd	r2, r3, [sl]
 80072f6:	4620      	mov	r0, r4
 80072f8:	4629      	mov	r1, r5
 80072fa:	f7f8 ff69 	bl	80001d0 <__aeabi_dsub>
 80072fe:	a37e      	add	r3, pc, #504	; (adr r3, 80074f8 <__ieee754_rem_pio2+0x318>)
 8007300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007304:	e7e0      	b.n	80072c8 <__ieee754_rem_pio2+0xe8>
 8007306:	4b87      	ldr	r3, [pc, #540]	; (8007524 <__ieee754_rem_pio2+0x344>)
 8007308:	4598      	cmp	r8, r3
 800730a:	f300 80d9 	bgt.w	80074c0 <__ieee754_rem_pio2+0x2e0>
 800730e:	f000 fe39 	bl	8007f84 <fabs>
 8007312:	ec55 4b10 	vmov	r4, r5, d0
 8007316:	ee10 0a10 	vmov	r0, s0
 800731a:	a379      	add	r3, pc, #484	; (adr r3, 8007500 <__ieee754_rem_pio2+0x320>)
 800731c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007320:	4629      	mov	r1, r5
 8007322:	f7f9 f90d 	bl	8000540 <__aeabi_dmul>
 8007326:	4b80      	ldr	r3, [pc, #512]	; (8007528 <__ieee754_rem_pio2+0x348>)
 8007328:	2200      	movs	r2, #0
 800732a:	f7f8 ff53 	bl	80001d4 <__adddf3>
 800732e:	f7f9 fba1 	bl	8000a74 <__aeabi_d2iz>
 8007332:	4683      	mov	fp, r0
 8007334:	f7f9 f89a 	bl	800046c <__aeabi_i2d>
 8007338:	4602      	mov	r2, r0
 800733a:	460b      	mov	r3, r1
 800733c:	ec43 2b18 	vmov	d8, r2, r3
 8007340:	a367      	add	r3, pc, #412	; (adr r3, 80074e0 <__ieee754_rem_pio2+0x300>)
 8007342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007346:	f7f9 f8fb 	bl	8000540 <__aeabi_dmul>
 800734a:	4602      	mov	r2, r0
 800734c:	460b      	mov	r3, r1
 800734e:	4620      	mov	r0, r4
 8007350:	4629      	mov	r1, r5
 8007352:	f7f8 ff3d 	bl	80001d0 <__aeabi_dsub>
 8007356:	a364      	add	r3, pc, #400	; (adr r3, 80074e8 <__ieee754_rem_pio2+0x308>)
 8007358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735c:	4606      	mov	r6, r0
 800735e:	460f      	mov	r7, r1
 8007360:	ec51 0b18 	vmov	r0, r1, d8
 8007364:	f7f9 f8ec 	bl	8000540 <__aeabi_dmul>
 8007368:	f1bb 0f1f 	cmp.w	fp, #31
 800736c:	4604      	mov	r4, r0
 800736e:	460d      	mov	r5, r1
 8007370:	dc0d      	bgt.n	800738e <__ieee754_rem_pio2+0x1ae>
 8007372:	4b6e      	ldr	r3, [pc, #440]	; (800752c <__ieee754_rem_pio2+0x34c>)
 8007374:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800737c:	4543      	cmp	r3, r8
 800737e:	d006      	beq.n	800738e <__ieee754_rem_pio2+0x1ae>
 8007380:	4622      	mov	r2, r4
 8007382:	462b      	mov	r3, r5
 8007384:	4630      	mov	r0, r6
 8007386:	4639      	mov	r1, r7
 8007388:	f7f8 ff22 	bl	80001d0 <__aeabi_dsub>
 800738c:	e00f      	b.n	80073ae <__ieee754_rem_pio2+0x1ce>
 800738e:	462b      	mov	r3, r5
 8007390:	4622      	mov	r2, r4
 8007392:	4630      	mov	r0, r6
 8007394:	4639      	mov	r1, r7
 8007396:	f7f8 ff1b 	bl	80001d0 <__aeabi_dsub>
 800739a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800739e:	9303      	str	r3, [sp, #12]
 80073a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80073a4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80073a8:	f1b8 0f10 	cmp.w	r8, #16
 80073ac:	dc02      	bgt.n	80073b4 <__ieee754_rem_pio2+0x1d4>
 80073ae:	e9ca 0100 	strd	r0, r1, [sl]
 80073b2:	e039      	b.n	8007428 <__ieee754_rem_pio2+0x248>
 80073b4:	a34e      	add	r3, pc, #312	; (adr r3, 80074f0 <__ieee754_rem_pio2+0x310>)
 80073b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ba:	ec51 0b18 	vmov	r0, r1, d8
 80073be:	f7f9 f8bf 	bl	8000540 <__aeabi_dmul>
 80073c2:	4604      	mov	r4, r0
 80073c4:	460d      	mov	r5, r1
 80073c6:	4602      	mov	r2, r0
 80073c8:	460b      	mov	r3, r1
 80073ca:	4630      	mov	r0, r6
 80073cc:	4639      	mov	r1, r7
 80073ce:	f7f8 feff 	bl	80001d0 <__aeabi_dsub>
 80073d2:	4602      	mov	r2, r0
 80073d4:	460b      	mov	r3, r1
 80073d6:	4680      	mov	r8, r0
 80073d8:	4689      	mov	r9, r1
 80073da:	4630      	mov	r0, r6
 80073dc:	4639      	mov	r1, r7
 80073de:	f7f8 fef7 	bl	80001d0 <__aeabi_dsub>
 80073e2:	4622      	mov	r2, r4
 80073e4:	462b      	mov	r3, r5
 80073e6:	f7f8 fef3 	bl	80001d0 <__aeabi_dsub>
 80073ea:	a343      	add	r3, pc, #268	; (adr r3, 80074f8 <__ieee754_rem_pio2+0x318>)
 80073ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f0:	4604      	mov	r4, r0
 80073f2:	460d      	mov	r5, r1
 80073f4:	ec51 0b18 	vmov	r0, r1, d8
 80073f8:	f7f9 f8a2 	bl	8000540 <__aeabi_dmul>
 80073fc:	4622      	mov	r2, r4
 80073fe:	462b      	mov	r3, r5
 8007400:	f7f8 fee6 	bl	80001d0 <__aeabi_dsub>
 8007404:	4602      	mov	r2, r0
 8007406:	460b      	mov	r3, r1
 8007408:	4604      	mov	r4, r0
 800740a:	460d      	mov	r5, r1
 800740c:	4640      	mov	r0, r8
 800740e:	4649      	mov	r1, r9
 8007410:	f7f8 fede 	bl	80001d0 <__aeabi_dsub>
 8007414:	9a03      	ldr	r2, [sp, #12]
 8007416:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	2b31      	cmp	r3, #49	; 0x31
 800741e:	dc24      	bgt.n	800746a <__ieee754_rem_pio2+0x28a>
 8007420:	e9ca 0100 	strd	r0, r1, [sl]
 8007424:	4646      	mov	r6, r8
 8007426:	464f      	mov	r7, r9
 8007428:	e9da 8900 	ldrd	r8, r9, [sl]
 800742c:	4630      	mov	r0, r6
 800742e:	4642      	mov	r2, r8
 8007430:	464b      	mov	r3, r9
 8007432:	4639      	mov	r1, r7
 8007434:	f7f8 fecc 	bl	80001d0 <__aeabi_dsub>
 8007438:	462b      	mov	r3, r5
 800743a:	4622      	mov	r2, r4
 800743c:	f7f8 fec8 	bl	80001d0 <__aeabi_dsub>
 8007440:	9b02      	ldr	r3, [sp, #8]
 8007442:	2b00      	cmp	r3, #0
 8007444:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007448:	f6bf af0a 	bge.w	8007260 <__ieee754_rem_pio2+0x80>
 800744c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007450:	f8ca 3004 	str.w	r3, [sl, #4]
 8007454:	f8ca 8000 	str.w	r8, [sl]
 8007458:	f8ca 0008 	str.w	r0, [sl, #8]
 800745c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007460:	f8ca 300c 	str.w	r3, [sl, #12]
 8007464:	f1cb 0b00 	rsb	fp, fp, #0
 8007468:	e6fa      	b.n	8007260 <__ieee754_rem_pio2+0x80>
 800746a:	a327      	add	r3, pc, #156	; (adr r3, 8007508 <__ieee754_rem_pio2+0x328>)
 800746c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007470:	ec51 0b18 	vmov	r0, r1, d8
 8007474:	f7f9 f864 	bl	8000540 <__aeabi_dmul>
 8007478:	4604      	mov	r4, r0
 800747a:	460d      	mov	r5, r1
 800747c:	4602      	mov	r2, r0
 800747e:	460b      	mov	r3, r1
 8007480:	4640      	mov	r0, r8
 8007482:	4649      	mov	r1, r9
 8007484:	f7f8 fea4 	bl	80001d0 <__aeabi_dsub>
 8007488:	4602      	mov	r2, r0
 800748a:	460b      	mov	r3, r1
 800748c:	4606      	mov	r6, r0
 800748e:	460f      	mov	r7, r1
 8007490:	4640      	mov	r0, r8
 8007492:	4649      	mov	r1, r9
 8007494:	f7f8 fe9c 	bl	80001d0 <__aeabi_dsub>
 8007498:	4622      	mov	r2, r4
 800749a:	462b      	mov	r3, r5
 800749c:	f7f8 fe98 	bl	80001d0 <__aeabi_dsub>
 80074a0:	a31b      	add	r3, pc, #108	; (adr r3, 8007510 <__ieee754_rem_pio2+0x330>)
 80074a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a6:	4604      	mov	r4, r0
 80074a8:	460d      	mov	r5, r1
 80074aa:	ec51 0b18 	vmov	r0, r1, d8
 80074ae:	f7f9 f847 	bl	8000540 <__aeabi_dmul>
 80074b2:	4622      	mov	r2, r4
 80074b4:	462b      	mov	r3, r5
 80074b6:	f7f8 fe8b 	bl	80001d0 <__aeabi_dsub>
 80074ba:	4604      	mov	r4, r0
 80074bc:	460d      	mov	r5, r1
 80074be:	e75f      	b.n	8007380 <__ieee754_rem_pio2+0x1a0>
 80074c0:	4b1b      	ldr	r3, [pc, #108]	; (8007530 <__ieee754_rem_pio2+0x350>)
 80074c2:	4598      	cmp	r8, r3
 80074c4:	dd36      	ble.n	8007534 <__ieee754_rem_pio2+0x354>
 80074c6:	ee10 2a10 	vmov	r2, s0
 80074ca:	462b      	mov	r3, r5
 80074cc:	4620      	mov	r0, r4
 80074ce:	4629      	mov	r1, r5
 80074d0:	f7f8 fe7e 	bl	80001d0 <__aeabi_dsub>
 80074d4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80074d8:	e9ca 0100 	strd	r0, r1, [sl]
 80074dc:	e694      	b.n	8007208 <__ieee754_rem_pio2+0x28>
 80074de:	bf00      	nop
 80074e0:	54400000 	.word	0x54400000
 80074e4:	3ff921fb 	.word	0x3ff921fb
 80074e8:	1a626331 	.word	0x1a626331
 80074ec:	3dd0b461 	.word	0x3dd0b461
 80074f0:	1a600000 	.word	0x1a600000
 80074f4:	3dd0b461 	.word	0x3dd0b461
 80074f8:	2e037073 	.word	0x2e037073
 80074fc:	3ba3198a 	.word	0x3ba3198a
 8007500:	6dc9c883 	.word	0x6dc9c883
 8007504:	3fe45f30 	.word	0x3fe45f30
 8007508:	2e000000 	.word	0x2e000000
 800750c:	3ba3198a 	.word	0x3ba3198a
 8007510:	252049c1 	.word	0x252049c1
 8007514:	397b839a 	.word	0x397b839a
 8007518:	3fe921fb 	.word	0x3fe921fb
 800751c:	4002d97b 	.word	0x4002d97b
 8007520:	3ff921fb 	.word	0x3ff921fb
 8007524:	413921fb 	.word	0x413921fb
 8007528:	3fe00000 	.word	0x3fe00000
 800752c:	080081f8 	.word	0x080081f8
 8007530:	7fefffff 	.word	0x7fefffff
 8007534:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007538:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800753c:	ee10 0a10 	vmov	r0, s0
 8007540:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8007544:	ee10 6a10 	vmov	r6, s0
 8007548:	460f      	mov	r7, r1
 800754a:	f7f9 fa93 	bl	8000a74 <__aeabi_d2iz>
 800754e:	f7f8 ff8d 	bl	800046c <__aeabi_i2d>
 8007552:	4602      	mov	r2, r0
 8007554:	460b      	mov	r3, r1
 8007556:	4630      	mov	r0, r6
 8007558:	4639      	mov	r1, r7
 800755a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800755e:	f7f8 fe37 	bl	80001d0 <__aeabi_dsub>
 8007562:	4b22      	ldr	r3, [pc, #136]	; (80075ec <__ieee754_rem_pio2+0x40c>)
 8007564:	2200      	movs	r2, #0
 8007566:	f7f8 ffeb 	bl	8000540 <__aeabi_dmul>
 800756a:	460f      	mov	r7, r1
 800756c:	4606      	mov	r6, r0
 800756e:	f7f9 fa81 	bl	8000a74 <__aeabi_d2iz>
 8007572:	f7f8 ff7b 	bl	800046c <__aeabi_i2d>
 8007576:	4602      	mov	r2, r0
 8007578:	460b      	mov	r3, r1
 800757a:	4630      	mov	r0, r6
 800757c:	4639      	mov	r1, r7
 800757e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007582:	f7f8 fe25 	bl	80001d0 <__aeabi_dsub>
 8007586:	4b19      	ldr	r3, [pc, #100]	; (80075ec <__ieee754_rem_pio2+0x40c>)
 8007588:	2200      	movs	r2, #0
 800758a:	f7f8 ffd9 	bl	8000540 <__aeabi_dmul>
 800758e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007592:	ad04      	add	r5, sp, #16
 8007594:	f04f 0803 	mov.w	r8, #3
 8007598:	46a9      	mov	r9, r5
 800759a:	2600      	movs	r6, #0
 800759c:	2700      	movs	r7, #0
 800759e:	4632      	mov	r2, r6
 80075a0:	463b      	mov	r3, r7
 80075a2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80075a6:	46c3      	mov	fp, r8
 80075a8:	3d08      	subs	r5, #8
 80075aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80075ae:	f7f9 fa2f 	bl	8000a10 <__aeabi_dcmpeq>
 80075b2:	2800      	cmp	r0, #0
 80075b4:	d1f3      	bne.n	800759e <__ieee754_rem_pio2+0x3be>
 80075b6:	4b0e      	ldr	r3, [pc, #56]	; (80075f0 <__ieee754_rem_pio2+0x410>)
 80075b8:	9301      	str	r3, [sp, #4]
 80075ba:	2302      	movs	r3, #2
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	4622      	mov	r2, r4
 80075c0:	465b      	mov	r3, fp
 80075c2:	4651      	mov	r1, sl
 80075c4:	4648      	mov	r0, r9
 80075c6:	f000 f8df 	bl	8007788 <__kernel_rem_pio2>
 80075ca:	9b02      	ldr	r3, [sp, #8]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	4683      	mov	fp, r0
 80075d0:	f6bf ae46 	bge.w	8007260 <__ieee754_rem_pio2+0x80>
 80075d4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80075d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80075dc:	f8ca 3004 	str.w	r3, [sl, #4]
 80075e0:	f8da 300c 	ldr.w	r3, [sl, #12]
 80075e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80075e8:	e73a      	b.n	8007460 <__ieee754_rem_pio2+0x280>
 80075ea:	bf00      	nop
 80075ec:	41700000 	.word	0x41700000
 80075f0:	08008278 	.word	0x08008278
 80075f4:	00000000 	.word	0x00000000

080075f8 <__kernel_cos>:
 80075f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075fc:	ec57 6b10 	vmov	r6, r7, d0
 8007600:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007604:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007608:	ed8d 1b00 	vstr	d1, [sp]
 800760c:	da07      	bge.n	800761e <__kernel_cos+0x26>
 800760e:	ee10 0a10 	vmov	r0, s0
 8007612:	4639      	mov	r1, r7
 8007614:	f7f9 fa2e 	bl	8000a74 <__aeabi_d2iz>
 8007618:	2800      	cmp	r0, #0
 800761a:	f000 8088 	beq.w	800772e <__kernel_cos+0x136>
 800761e:	4632      	mov	r2, r6
 8007620:	463b      	mov	r3, r7
 8007622:	4630      	mov	r0, r6
 8007624:	4639      	mov	r1, r7
 8007626:	f7f8 ff8b 	bl	8000540 <__aeabi_dmul>
 800762a:	4b51      	ldr	r3, [pc, #324]	; (8007770 <__kernel_cos+0x178>)
 800762c:	2200      	movs	r2, #0
 800762e:	4604      	mov	r4, r0
 8007630:	460d      	mov	r5, r1
 8007632:	f7f8 ff85 	bl	8000540 <__aeabi_dmul>
 8007636:	a340      	add	r3, pc, #256	; (adr r3, 8007738 <__kernel_cos+0x140>)
 8007638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763c:	4682      	mov	sl, r0
 800763e:	468b      	mov	fp, r1
 8007640:	4620      	mov	r0, r4
 8007642:	4629      	mov	r1, r5
 8007644:	f7f8 ff7c 	bl	8000540 <__aeabi_dmul>
 8007648:	a33d      	add	r3, pc, #244	; (adr r3, 8007740 <__kernel_cos+0x148>)
 800764a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764e:	f7f8 fdc1 	bl	80001d4 <__adddf3>
 8007652:	4622      	mov	r2, r4
 8007654:	462b      	mov	r3, r5
 8007656:	f7f8 ff73 	bl	8000540 <__aeabi_dmul>
 800765a:	a33b      	add	r3, pc, #236	; (adr r3, 8007748 <__kernel_cos+0x150>)
 800765c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007660:	f7f8 fdb6 	bl	80001d0 <__aeabi_dsub>
 8007664:	4622      	mov	r2, r4
 8007666:	462b      	mov	r3, r5
 8007668:	f7f8 ff6a 	bl	8000540 <__aeabi_dmul>
 800766c:	a338      	add	r3, pc, #224	; (adr r3, 8007750 <__kernel_cos+0x158>)
 800766e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007672:	f7f8 fdaf 	bl	80001d4 <__adddf3>
 8007676:	4622      	mov	r2, r4
 8007678:	462b      	mov	r3, r5
 800767a:	f7f8 ff61 	bl	8000540 <__aeabi_dmul>
 800767e:	a336      	add	r3, pc, #216	; (adr r3, 8007758 <__kernel_cos+0x160>)
 8007680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007684:	f7f8 fda4 	bl	80001d0 <__aeabi_dsub>
 8007688:	4622      	mov	r2, r4
 800768a:	462b      	mov	r3, r5
 800768c:	f7f8 ff58 	bl	8000540 <__aeabi_dmul>
 8007690:	a333      	add	r3, pc, #204	; (adr r3, 8007760 <__kernel_cos+0x168>)
 8007692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007696:	f7f8 fd9d 	bl	80001d4 <__adddf3>
 800769a:	4622      	mov	r2, r4
 800769c:	462b      	mov	r3, r5
 800769e:	f7f8 ff4f 	bl	8000540 <__aeabi_dmul>
 80076a2:	4622      	mov	r2, r4
 80076a4:	462b      	mov	r3, r5
 80076a6:	f7f8 ff4b 	bl	8000540 <__aeabi_dmul>
 80076aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076ae:	4604      	mov	r4, r0
 80076b0:	460d      	mov	r5, r1
 80076b2:	4630      	mov	r0, r6
 80076b4:	4639      	mov	r1, r7
 80076b6:	f7f8 ff43 	bl	8000540 <__aeabi_dmul>
 80076ba:	460b      	mov	r3, r1
 80076bc:	4602      	mov	r2, r0
 80076be:	4629      	mov	r1, r5
 80076c0:	4620      	mov	r0, r4
 80076c2:	f7f8 fd85 	bl	80001d0 <__aeabi_dsub>
 80076c6:	4b2b      	ldr	r3, [pc, #172]	; (8007774 <__kernel_cos+0x17c>)
 80076c8:	4598      	cmp	r8, r3
 80076ca:	4606      	mov	r6, r0
 80076cc:	460f      	mov	r7, r1
 80076ce:	dc10      	bgt.n	80076f2 <__kernel_cos+0xfa>
 80076d0:	4602      	mov	r2, r0
 80076d2:	460b      	mov	r3, r1
 80076d4:	4650      	mov	r0, sl
 80076d6:	4659      	mov	r1, fp
 80076d8:	f7f8 fd7a 	bl	80001d0 <__aeabi_dsub>
 80076dc:	460b      	mov	r3, r1
 80076de:	4926      	ldr	r1, [pc, #152]	; (8007778 <__kernel_cos+0x180>)
 80076e0:	4602      	mov	r2, r0
 80076e2:	2000      	movs	r0, #0
 80076e4:	f7f8 fd74 	bl	80001d0 <__aeabi_dsub>
 80076e8:	ec41 0b10 	vmov	d0, r0, r1
 80076ec:	b003      	add	sp, #12
 80076ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f2:	4b22      	ldr	r3, [pc, #136]	; (800777c <__kernel_cos+0x184>)
 80076f4:	4920      	ldr	r1, [pc, #128]	; (8007778 <__kernel_cos+0x180>)
 80076f6:	4598      	cmp	r8, r3
 80076f8:	bfcc      	ite	gt
 80076fa:	4d21      	ldrgt	r5, [pc, #132]	; (8007780 <__kernel_cos+0x188>)
 80076fc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007700:	2400      	movs	r4, #0
 8007702:	4622      	mov	r2, r4
 8007704:	462b      	mov	r3, r5
 8007706:	2000      	movs	r0, #0
 8007708:	f7f8 fd62 	bl	80001d0 <__aeabi_dsub>
 800770c:	4622      	mov	r2, r4
 800770e:	4680      	mov	r8, r0
 8007710:	4689      	mov	r9, r1
 8007712:	462b      	mov	r3, r5
 8007714:	4650      	mov	r0, sl
 8007716:	4659      	mov	r1, fp
 8007718:	f7f8 fd5a 	bl	80001d0 <__aeabi_dsub>
 800771c:	4632      	mov	r2, r6
 800771e:	463b      	mov	r3, r7
 8007720:	f7f8 fd56 	bl	80001d0 <__aeabi_dsub>
 8007724:	4602      	mov	r2, r0
 8007726:	460b      	mov	r3, r1
 8007728:	4640      	mov	r0, r8
 800772a:	4649      	mov	r1, r9
 800772c:	e7da      	b.n	80076e4 <__kernel_cos+0xec>
 800772e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007768 <__kernel_cos+0x170>
 8007732:	e7db      	b.n	80076ec <__kernel_cos+0xf4>
 8007734:	f3af 8000 	nop.w
 8007738:	be8838d4 	.word	0xbe8838d4
 800773c:	bda8fae9 	.word	0xbda8fae9
 8007740:	bdb4b1c4 	.word	0xbdb4b1c4
 8007744:	3e21ee9e 	.word	0x3e21ee9e
 8007748:	809c52ad 	.word	0x809c52ad
 800774c:	3e927e4f 	.word	0x3e927e4f
 8007750:	19cb1590 	.word	0x19cb1590
 8007754:	3efa01a0 	.word	0x3efa01a0
 8007758:	16c15177 	.word	0x16c15177
 800775c:	3f56c16c 	.word	0x3f56c16c
 8007760:	5555554c 	.word	0x5555554c
 8007764:	3fa55555 	.word	0x3fa55555
 8007768:	00000000 	.word	0x00000000
 800776c:	3ff00000 	.word	0x3ff00000
 8007770:	3fe00000 	.word	0x3fe00000
 8007774:	3fd33332 	.word	0x3fd33332
 8007778:	3ff00000 	.word	0x3ff00000
 800777c:	3fe90000 	.word	0x3fe90000
 8007780:	3fd20000 	.word	0x3fd20000
 8007784:	00000000 	.word	0x00000000

08007788 <__kernel_rem_pio2>:
 8007788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800778c:	ed2d 8b02 	vpush	{d8}
 8007790:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007794:	f112 0f14 	cmn.w	r2, #20
 8007798:	9308      	str	r3, [sp, #32]
 800779a:	9101      	str	r1, [sp, #4]
 800779c:	4bc6      	ldr	r3, [pc, #792]	; (8007ab8 <__kernel_rem_pio2+0x330>)
 800779e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80077a0:	9009      	str	r0, [sp, #36]	; 0x24
 80077a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80077a6:	9304      	str	r3, [sp, #16]
 80077a8:	9b08      	ldr	r3, [sp, #32]
 80077aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80077ae:	bfa8      	it	ge
 80077b0:	1ed4      	subge	r4, r2, #3
 80077b2:	9306      	str	r3, [sp, #24]
 80077b4:	bfb2      	itee	lt
 80077b6:	2400      	movlt	r4, #0
 80077b8:	2318      	movge	r3, #24
 80077ba:	fb94 f4f3 	sdivge	r4, r4, r3
 80077be:	f06f 0317 	mvn.w	r3, #23
 80077c2:	fb04 3303 	mla	r3, r4, r3, r3
 80077c6:	eb03 0a02 	add.w	sl, r3, r2
 80077ca:	9b04      	ldr	r3, [sp, #16]
 80077cc:	9a06      	ldr	r2, [sp, #24]
 80077ce:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007aa8 <__kernel_rem_pio2+0x320>
 80077d2:	eb03 0802 	add.w	r8, r3, r2
 80077d6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80077d8:	1aa7      	subs	r7, r4, r2
 80077da:	ae20      	add	r6, sp, #128	; 0x80
 80077dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80077e0:	2500      	movs	r5, #0
 80077e2:	4545      	cmp	r5, r8
 80077e4:	dd18      	ble.n	8007818 <__kernel_rem_pio2+0x90>
 80077e6:	9b08      	ldr	r3, [sp, #32]
 80077e8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80077ec:	aa20      	add	r2, sp, #128	; 0x80
 80077ee:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8007aa8 <__kernel_rem_pio2+0x320>
 80077f2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80077f6:	f1c3 0301 	rsb	r3, r3, #1
 80077fa:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80077fe:	9307      	str	r3, [sp, #28]
 8007800:	9b07      	ldr	r3, [sp, #28]
 8007802:	9a04      	ldr	r2, [sp, #16]
 8007804:	4443      	add	r3, r8
 8007806:	429a      	cmp	r2, r3
 8007808:	db2f      	blt.n	800786a <__kernel_rem_pio2+0xe2>
 800780a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800780e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007812:	462f      	mov	r7, r5
 8007814:	2600      	movs	r6, #0
 8007816:	e01b      	b.n	8007850 <__kernel_rem_pio2+0xc8>
 8007818:	42ef      	cmn	r7, r5
 800781a:	d407      	bmi.n	800782c <__kernel_rem_pio2+0xa4>
 800781c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007820:	f7f8 fe24 	bl	800046c <__aeabi_i2d>
 8007824:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007828:	3501      	adds	r5, #1
 800782a:	e7da      	b.n	80077e2 <__kernel_rem_pio2+0x5a>
 800782c:	ec51 0b18 	vmov	r0, r1, d8
 8007830:	e7f8      	b.n	8007824 <__kernel_rem_pio2+0x9c>
 8007832:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007836:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800783a:	f7f8 fe81 	bl	8000540 <__aeabi_dmul>
 800783e:	4602      	mov	r2, r0
 8007840:	460b      	mov	r3, r1
 8007842:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007846:	f7f8 fcc5 	bl	80001d4 <__adddf3>
 800784a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800784e:	3601      	adds	r6, #1
 8007850:	9b06      	ldr	r3, [sp, #24]
 8007852:	429e      	cmp	r6, r3
 8007854:	f1a7 0708 	sub.w	r7, r7, #8
 8007858:	ddeb      	ble.n	8007832 <__kernel_rem_pio2+0xaa>
 800785a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800785e:	3508      	adds	r5, #8
 8007860:	ecab 7b02 	vstmia	fp!, {d7}
 8007864:	f108 0801 	add.w	r8, r8, #1
 8007868:	e7ca      	b.n	8007800 <__kernel_rem_pio2+0x78>
 800786a:	9b04      	ldr	r3, [sp, #16]
 800786c:	aa0c      	add	r2, sp, #48	; 0x30
 800786e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007872:	930b      	str	r3, [sp, #44]	; 0x2c
 8007874:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007876:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800787a:	9c04      	ldr	r4, [sp, #16]
 800787c:	930a      	str	r3, [sp, #40]	; 0x28
 800787e:	ab98      	add	r3, sp, #608	; 0x260
 8007880:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007884:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007888:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800788c:	f8cd b008 	str.w	fp, [sp, #8]
 8007890:	4625      	mov	r5, r4
 8007892:	2d00      	cmp	r5, #0
 8007894:	dc78      	bgt.n	8007988 <__kernel_rem_pio2+0x200>
 8007896:	ec47 6b10 	vmov	d0, r6, r7
 800789a:	4650      	mov	r0, sl
 800789c:	f000 fbfc 	bl	8008098 <scalbn>
 80078a0:	ec57 6b10 	vmov	r6, r7, d0
 80078a4:	2200      	movs	r2, #0
 80078a6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80078aa:	ee10 0a10 	vmov	r0, s0
 80078ae:	4639      	mov	r1, r7
 80078b0:	f7f8 fe46 	bl	8000540 <__aeabi_dmul>
 80078b4:	ec41 0b10 	vmov	d0, r0, r1
 80078b8:	f000 fb6e 	bl	8007f98 <floor>
 80078bc:	4b7f      	ldr	r3, [pc, #508]	; (8007abc <__kernel_rem_pio2+0x334>)
 80078be:	ec51 0b10 	vmov	r0, r1, d0
 80078c2:	2200      	movs	r2, #0
 80078c4:	f7f8 fe3c 	bl	8000540 <__aeabi_dmul>
 80078c8:	4602      	mov	r2, r0
 80078ca:	460b      	mov	r3, r1
 80078cc:	4630      	mov	r0, r6
 80078ce:	4639      	mov	r1, r7
 80078d0:	f7f8 fc7e 	bl	80001d0 <__aeabi_dsub>
 80078d4:	460f      	mov	r7, r1
 80078d6:	4606      	mov	r6, r0
 80078d8:	f7f9 f8cc 	bl	8000a74 <__aeabi_d2iz>
 80078dc:	9007      	str	r0, [sp, #28]
 80078de:	f7f8 fdc5 	bl	800046c <__aeabi_i2d>
 80078e2:	4602      	mov	r2, r0
 80078e4:	460b      	mov	r3, r1
 80078e6:	4630      	mov	r0, r6
 80078e8:	4639      	mov	r1, r7
 80078ea:	f7f8 fc71 	bl	80001d0 <__aeabi_dsub>
 80078ee:	f1ba 0f00 	cmp.w	sl, #0
 80078f2:	4606      	mov	r6, r0
 80078f4:	460f      	mov	r7, r1
 80078f6:	dd70      	ble.n	80079da <__kernel_rem_pio2+0x252>
 80078f8:	1e62      	subs	r2, r4, #1
 80078fa:	ab0c      	add	r3, sp, #48	; 0x30
 80078fc:	9d07      	ldr	r5, [sp, #28]
 80078fe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007902:	f1ca 0118 	rsb	r1, sl, #24
 8007906:	fa40 f301 	asr.w	r3, r0, r1
 800790a:	441d      	add	r5, r3
 800790c:	408b      	lsls	r3, r1
 800790e:	1ac0      	subs	r0, r0, r3
 8007910:	ab0c      	add	r3, sp, #48	; 0x30
 8007912:	9507      	str	r5, [sp, #28]
 8007914:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007918:	f1ca 0317 	rsb	r3, sl, #23
 800791c:	fa40 f303 	asr.w	r3, r0, r3
 8007920:	9302      	str	r3, [sp, #8]
 8007922:	9b02      	ldr	r3, [sp, #8]
 8007924:	2b00      	cmp	r3, #0
 8007926:	dd66      	ble.n	80079f6 <__kernel_rem_pio2+0x26e>
 8007928:	9b07      	ldr	r3, [sp, #28]
 800792a:	2200      	movs	r2, #0
 800792c:	3301      	adds	r3, #1
 800792e:	9307      	str	r3, [sp, #28]
 8007930:	4615      	mov	r5, r2
 8007932:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007936:	4294      	cmp	r4, r2
 8007938:	f300 8099 	bgt.w	8007a6e <__kernel_rem_pio2+0x2e6>
 800793c:	f1ba 0f00 	cmp.w	sl, #0
 8007940:	dd07      	ble.n	8007952 <__kernel_rem_pio2+0x1ca>
 8007942:	f1ba 0f01 	cmp.w	sl, #1
 8007946:	f000 80a5 	beq.w	8007a94 <__kernel_rem_pio2+0x30c>
 800794a:	f1ba 0f02 	cmp.w	sl, #2
 800794e:	f000 80c1 	beq.w	8007ad4 <__kernel_rem_pio2+0x34c>
 8007952:	9b02      	ldr	r3, [sp, #8]
 8007954:	2b02      	cmp	r3, #2
 8007956:	d14e      	bne.n	80079f6 <__kernel_rem_pio2+0x26e>
 8007958:	4632      	mov	r2, r6
 800795a:	463b      	mov	r3, r7
 800795c:	4958      	ldr	r1, [pc, #352]	; (8007ac0 <__kernel_rem_pio2+0x338>)
 800795e:	2000      	movs	r0, #0
 8007960:	f7f8 fc36 	bl	80001d0 <__aeabi_dsub>
 8007964:	4606      	mov	r6, r0
 8007966:	460f      	mov	r7, r1
 8007968:	2d00      	cmp	r5, #0
 800796a:	d044      	beq.n	80079f6 <__kernel_rem_pio2+0x26e>
 800796c:	4650      	mov	r0, sl
 800796e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007ab0 <__kernel_rem_pio2+0x328>
 8007972:	f000 fb91 	bl	8008098 <scalbn>
 8007976:	4630      	mov	r0, r6
 8007978:	4639      	mov	r1, r7
 800797a:	ec53 2b10 	vmov	r2, r3, d0
 800797e:	f7f8 fc27 	bl	80001d0 <__aeabi_dsub>
 8007982:	4606      	mov	r6, r0
 8007984:	460f      	mov	r7, r1
 8007986:	e036      	b.n	80079f6 <__kernel_rem_pio2+0x26e>
 8007988:	4b4e      	ldr	r3, [pc, #312]	; (8007ac4 <__kernel_rem_pio2+0x33c>)
 800798a:	2200      	movs	r2, #0
 800798c:	4630      	mov	r0, r6
 800798e:	4639      	mov	r1, r7
 8007990:	f7f8 fdd6 	bl	8000540 <__aeabi_dmul>
 8007994:	f7f9 f86e 	bl	8000a74 <__aeabi_d2iz>
 8007998:	f7f8 fd68 	bl	800046c <__aeabi_i2d>
 800799c:	4b4a      	ldr	r3, [pc, #296]	; (8007ac8 <__kernel_rem_pio2+0x340>)
 800799e:	2200      	movs	r2, #0
 80079a0:	4680      	mov	r8, r0
 80079a2:	4689      	mov	r9, r1
 80079a4:	f7f8 fdcc 	bl	8000540 <__aeabi_dmul>
 80079a8:	4602      	mov	r2, r0
 80079aa:	460b      	mov	r3, r1
 80079ac:	4630      	mov	r0, r6
 80079ae:	4639      	mov	r1, r7
 80079b0:	f7f8 fc0e 	bl	80001d0 <__aeabi_dsub>
 80079b4:	f7f9 f85e 	bl	8000a74 <__aeabi_d2iz>
 80079b8:	9b02      	ldr	r3, [sp, #8]
 80079ba:	f843 0b04 	str.w	r0, [r3], #4
 80079be:	3d01      	subs	r5, #1
 80079c0:	9302      	str	r3, [sp, #8]
 80079c2:	ab70      	add	r3, sp, #448	; 0x1c0
 80079c4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80079c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079cc:	4640      	mov	r0, r8
 80079ce:	4649      	mov	r1, r9
 80079d0:	f7f8 fc00 	bl	80001d4 <__adddf3>
 80079d4:	4606      	mov	r6, r0
 80079d6:	460f      	mov	r7, r1
 80079d8:	e75b      	b.n	8007892 <__kernel_rem_pio2+0x10a>
 80079da:	d105      	bne.n	80079e8 <__kernel_rem_pio2+0x260>
 80079dc:	1e63      	subs	r3, r4, #1
 80079de:	aa0c      	add	r2, sp, #48	; 0x30
 80079e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80079e4:	15c3      	asrs	r3, r0, #23
 80079e6:	e79b      	b.n	8007920 <__kernel_rem_pio2+0x198>
 80079e8:	4b38      	ldr	r3, [pc, #224]	; (8007acc <__kernel_rem_pio2+0x344>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	f7f9 f82e 	bl	8000a4c <__aeabi_dcmpge>
 80079f0:	2800      	cmp	r0, #0
 80079f2:	d139      	bne.n	8007a68 <__kernel_rem_pio2+0x2e0>
 80079f4:	9002      	str	r0, [sp, #8]
 80079f6:	2200      	movs	r2, #0
 80079f8:	2300      	movs	r3, #0
 80079fa:	4630      	mov	r0, r6
 80079fc:	4639      	mov	r1, r7
 80079fe:	f7f9 f807 	bl	8000a10 <__aeabi_dcmpeq>
 8007a02:	2800      	cmp	r0, #0
 8007a04:	f000 80b4 	beq.w	8007b70 <__kernel_rem_pio2+0x3e8>
 8007a08:	f104 3bff 	add.w	fp, r4, #4294967295
 8007a0c:	465b      	mov	r3, fp
 8007a0e:	2200      	movs	r2, #0
 8007a10:	9904      	ldr	r1, [sp, #16]
 8007a12:	428b      	cmp	r3, r1
 8007a14:	da65      	bge.n	8007ae2 <__kernel_rem_pio2+0x35a>
 8007a16:	2a00      	cmp	r2, #0
 8007a18:	d07b      	beq.n	8007b12 <__kernel_rem_pio2+0x38a>
 8007a1a:	ab0c      	add	r3, sp, #48	; 0x30
 8007a1c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007a20:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 80a0 	beq.w	8007b6a <__kernel_rem_pio2+0x3e2>
 8007a2a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8007ab0 <__kernel_rem_pio2+0x328>
 8007a2e:	4650      	mov	r0, sl
 8007a30:	f000 fb32 	bl	8008098 <scalbn>
 8007a34:	4f23      	ldr	r7, [pc, #140]	; (8007ac4 <__kernel_rem_pio2+0x33c>)
 8007a36:	ec55 4b10 	vmov	r4, r5, d0
 8007a3a:	46d8      	mov	r8, fp
 8007a3c:	2600      	movs	r6, #0
 8007a3e:	f1b8 0f00 	cmp.w	r8, #0
 8007a42:	f280 80cf 	bge.w	8007be4 <__kernel_rem_pio2+0x45c>
 8007a46:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8007aa8 <__kernel_rem_pio2+0x320>
 8007a4a:	465f      	mov	r7, fp
 8007a4c:	f04f 0800 	mov.w	r8, #0
 8007a50:	2f00      	cmp	r7, #0
 8007a52:	f2c0 80fd 	blt.w	8007c50 <__kernel_rem_pio2+0x4c8>
 8007a56:	ab70      	add	r3, sp, #448	; 0x1c0
 8007a58:	f8df a074 	ldr.w	sl, [pc, #116]	; 8007ad0 <__kernel_rem_pio2+0x348>
 8007a5c:	ec55 4b18 	vmov	r4, r5, d8
 8007a60:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8007a64:	2600      	movs	r6, #0
 8007a66:	e0e5      	b.n	8007c34 <__kernel_rem_pio2+0x4ac>
 8007a68:	2302      	movs	r3, #2
 8007a6a:	9302      	str	r3, [sp, #8]
 8007a6c:	e75c      	b.n	8007928 <__kernel_rem_pio2+0x1a0>
 8007a6e:	f8db 3000 	ldr.w	r3, [fp]
 8007a72:	b955      	cbnz	r5, 8007a8a <__kernel_rem_pio2+0x302>
 8007a74:	b123      	cbz	r3, 8007a80 <__kernel_rem_pio2+0x2f8>
 8007a76:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007a7a:	f8cb 3000 	str.w	r3, [fp]
 8007a7e:	2301      	movs	r3, #1
 8007a80:	3201      	adds	r2, #1
 8007a82:	f10b 0b04 	add.w	fp, fp, #4
 8007a86:	461d      	mov	r5, r3
 8007a88:	e755      	b.n	8007936 <__kernel_rem_pio2+0x1ae>
 8007a8a:	1acb      	subs	r3, r1, r3
 8007a8c:	f8cb 3000 	str.w	r3, [fp]
 8007a90:	462b      	mov	r3, r5
 8007a92:	e7f5      	b.n	8007a80 <__kernel_rem_pio2+0x2f8>
 8007a94:	1e62      	subs	r2, r4, #1
 8007a96:	ab0c      	add	r3, sp, #48	; 0x30
 8007a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a9c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007aa0:	a90c      	add	r1, sp, #48	; 0x30
 8007aa2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007aa6:	e754      	b.n	8007952 <__kernel_rem_pio2+0x1ca>
	...
 8007ab4:	3ff00000 	.word	0x3ff00000
 8007ab8:	080083c0 	.word	0x080083c0
 8007abc:	40200000 	.word	0x40200000
 8007ac0:	3ff00000 	.word	0x3ff00000
 8007ac4:	3e700000 	.word	0x3e700000
 8007ac8:	41700000 	.word	0x41700000
 8007acc:	3fe00000 	.word	0x3fe00000
 8007ad0:	08008380 	.word	0x08008380
 8007ad4:	1e62      	subs	r2, r4, #1
 8007ad6:	ab0c      	add	r3, sp, #48	; 0x30
 8007ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007adc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007ae0:	e7de      	b.n	8007aa0 <__kernel_rem_pio2+0x318>
 8007ae2:	a90c      	add	r1, sp, #48	; 0x30
 8007ae4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	430a      	orrs	r2, r1
 8007aec:	e790      	b.n	8007a10 <__kernel_rem_pio2+0x288>
 8007aee:	3301      	adds	r3, #1
 8007af0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007af4:	2900      	cmp	r1, #0
 8007af6:	d0fa      	beq.n	8007aee <__kernel_rem_pio2+0x366>
 8007af8:	9a08      	ldr	r2, [sp, #32]
 8007afa:	18e3      	adds	r3, r4, r3
 8007afc:	18a6      	adds	r6, r4, r2
 8007afe:	aa20      	add	r2, sp, #128	; 0x80
 8007b00:	1c65      	adds	r5, r4, #1
 8007b02:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007b06:	9302      	str	r3, [sp, #8]
 8007b08:	9b02      	ldr	r3, [sp, #8]
 8007b0a:	42ab      	cmp	r3, r5
 8007b0c:	da04      	bge.n	8007b18 <__kernel_rem_pio2+0x390>
 8007b0e:	461c      	mov	r4, r3
 8007b10:	e6b5      	b.n	800787e <__kernel_rem_pio2+0xf6>
 8007b12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b14:	2301      	movs	r3, #1
 8007b16:	e7eb      	b.n	8007af0 <__kernel_rem_pio2+0x368>
 8007b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b1e:	f7f8 fca5 	bl	800046c <__aeabi_i2d>
 8007b22:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b28:	46b3      	mov	fp, r6
 8007b2a:	461c      	mov	r4, r3
 8007b2c:	2700      	movs	r7, #0
 8007b2e:	f04f 0800 	mov.w	r8, #0
 8007b32:	f04f 0900 	mov.w	r9, #0
 8007b36:	9b06      	ldr	r3, [sp, #24]
 8007b38:	429f      	cmp	r7, r3
 8007b3a:	dd06      	ble.n	8007b4a <__kernel_rem_pio2+0x3c2>
 8007b3c:	ab70      	add	r3, sp, #448	; 0x1c0
 8007b3e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007b42:	e9c3 8900 	strd	r8, r9, [r3]
 8007b46:	3501      	adds	r5, #1
 8007b48:	e7de      	b.n	8007b08 <__kernel_rem_pio2+0x380>
 8007b4a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007b4e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007b52:	f7f8 fcf5 	bl	8000540 <__aeabi_dmul>
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	4640      	mov	r0, r8
 8007b5c:	4649      	mov	r1, r9
 8007b5e:	f7f8 fb39 	bl	80001d4 <__adddf3>
 8007b62:	3701      	adds	r7, #1
 8007b64:	4680      	mov	r8, r0
 8007b66:	4689      	mov	r9, r1
 8007b68:	e7e5      	b.n	8007b36 <__kernel_rem_pio2+0x3ae>
 8007b6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b6e:	e754      	b.n	8007a1a <__kernel_rem_pio2+0x292>
 8007b70:	ec47 6b10 	vmov	d0, r6, r7
 8007b74:	f1ca 0000 	rsb	r0, sl, #0
 8007b78:	f000 fa8e 	bl	8008098 <scalbn>
 8007b7c:	ec57 6b10 	vmov	r6, r7, d0
 8007b80:	4b9f      	ldr	r3, [pc, #636]	; (8007e00 <__kernel_rem_pio2+0x678>)
 8007b82:	ee10 0a10 	vmov	r0, s0
 8007b86:	2200      	movs	r2, #0
 8007b88:	4639      	mov	r1, r7
 8007b8a:	f7f8 ff5f 	bl	8000a4c <__aeabi_dcmpge>
 8007b8e:	b300      	cbz	r0, 8007bd2 <__kernel_rem_pio2+0x44a>
 8007b90:	4b9c      	ldr	r3, [pc, #624]	; (8007e04 <__kernel_rem_pio2+0x67c>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	4630      	mov	r0, r6
 8007b96:	4639      	mov	r1, r7
 8007b98:	f7f8 fcd2 	bl	8000540 <__aeabi_dmul>
 8007b9c:	f7f8 ff6a 	bl	8000a74 <__aeabi_d2iz>
 8007ba0:	4605      	mov	r5, r0
 8007ba2:	f7f8 fc63 	bl	800046c <__aeabi_i2d>
 8007ba6:	4b96      	ldr	r3, [pc, #600]	; (8007e00 <__kernel_rem_pio2+0x678>)
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f7f8 fcc9 	bl	8000540 <__aeabi_dmul>
 8007bae:	460b      	mov	r3, r1
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	4639      	mov	r1, r7
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	f7f8 fb0b 	bl	80001d0 <__aeabi_dsub>
 8007bba:	f7f8 ff5b 	bl	8000a74 <__aeabi_d2iz>
 8007bbe:	f104 0b01 	add.w	fp, r4, #1
 8007bc2:	ab0c      	add	r3, sp, #48	; 0x30
 8007bc4:	f10a 0a18 	add.w	sl, sl, #24
 8007bc8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007bcc:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8007bd0:	e72b      	b.n	8007a2a <__kernel_rem_pio2+0x2a2>
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	4639      	mov	r1, r7
 8007bd6:	f7f8 ff4d 	bl	8000a74 <__aeabi_d2iz>
 8007bda:	ab0c      	add	r3, sp, #48	; 0x30
 8007bdc:	46a3      	mov	fp, r4
 8007bde:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007be2:	e722      	b.n	8007a2a <__kernel_rem_pio2+0x2a2>
 8007be4:	ab70      	add	r3, sp, #448	; 0x1c0
 8007be6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8007bea:	ab0c      	add	r3, sp, #48	; 0x30
 8007bec:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007bf0:	f7f8 fc3c 	bl	800046c <__aeabi_i2d>
 8007bf4:	4622      	mov	r2, r4
 8007bf6:	462b      	mov	r3, r5
 8007bf8:	f7f8 fca2 	bl	8000540 <__aeabi_dmul>
 8007bfc:	4632      	mov	r2, r6
 8007bfe:	e9c9 0100 	strd	r0, r1, [r9]
 8007c02:	463b      	mov	r3, r7
 8007c04:	4620      	mov	r0, r4
 8007c06:	4629      	mov	r1, r5
 8007c08:	f7f8 fc9a 	bl	8000540 <__aeabi_dmul>
 8007c0c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007c10:	4604      	mov	r4, r0
 8007c12:	460d      	mov	r5, r1
 8007c14:	e713      	b.n	8007a3e <__kernel_rem_pio2+0x2b6>
 8007c16:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007c1a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007c1e:	f7f8 fc8f 	bl	8000540 <__aeabi_dmul>
 8007c22:	4602      	mov	r2, r0
 8007c24:	460b      	mov	r3, r1
 8007c26:	4620      	mov	r0, r4
 8007c28:	4629      	mov	r1, r5
 8007c2a:	f7f8 fad3 	bl	80001d4 <__adddf3>
 8007c2e:	3601      	adds	r6, #1
 8007c30:	4604      	mov	r4, r0
 8007c32:	460d      	mov	r5, r1
 8007c34:	9b04      	ldr	r3, [sp, #16]
 8007c36:	429e      	cmp	r6, r3
 8007c38:	dc01      	bgt.n	8007c3e <__kernel_rem_pio2+0x4b6>
 8007c3a:	45b0      	cmp	r8, r6
 8007c3c:	daeb      	bge.n	8007c16 <__kernel_rem_pio2+0x48e>
 8007c3e:	ab48      	add	r3, sp, #288	; 0x120
 8007c40:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007c44:	e9c3 4500 	strd	r4, r5, [r3]
 8007c48:	3f01      	subs	r7, #1
 8007c4a:	f108 0801 	add.w	r8, r8, #1
 8007c4e:	e6ff      	b.n	8007a50 <__kernel_rem_pio2+0x2c8>
 8007c50:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	dc0b      	bgt.n	8007c6e <__kernel_rem_pio2+0x4e6>
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	dc6e      	bgt.n	8007d38 <__kernel_rem_pio2+0x5b0>
 8007c5a:	d045      	beq.n	8007ce8 <__kernel_rem_pio2+0x560>
 8007c5c:	9b07      	ldr	r3, [sp, #28]
 8007c5e:	f003 0007 	and.w	r0, r3, #7
 8007c62:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007c66:	ecbd 8b02 	vpop	{d8}
 8007c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c6e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007c70:	2b03      	cmp	r3, #3
 8007c72:	d1f3      	bne.n	8007c5c <__kernel_rem_pio2+0x4d4>
 8007c74:	ab48      	add	r3, sp, #288	; 0x120
 8007c76:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8007c7a:	46d0      	mov	r8, sl
 8007c7c:	46d9      	mov	r9, fp
 8007c7e:	f1b9 0f00 	cmp.w	r9, #0
 8007c82:	f1a8 0808 	sub.w	r8, r8, #8
 8007c86:	dc64      	bgt.n	8007d52 <__kernel_rem_pio2+0x5ca>
 8007c88:	465c      	mov	r4, fp
 8007c8a:	2c01      	cmp	r4, #1
 8007c8c:	f1aa 0a08 	sub.w	sl, sl, #8
 8007c90:	dc7e      	bgt.n	8007d90 <__kernel_rem_pio2+0x608>
 8007c92:	2000      	movs	r0, #0
 8007c94:	2100      	movs	r1, #0
 8007c96:	f1bb 0f01 	cmp.w	fp, #1
 8007c9a:	f300 8097 	bgt.w	8007dcc <__kernel_rem_pio2+0x644>
 8007c9e:	9b02      	ldr	r3, [sp, #8]
 8007ca0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8007ca4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f040 8099 	bne.w	8007de0 <__kernel_rem_pio2+0x658>
 8007cae:	9b01      	ldr	r3, [sp, #4]
 8007cb0:	e9c3 5600 	strd	r5, r6, [r3]
 8007cb4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007cb8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007cbc:	e7ce      	b.n	8007c5c <__kernel_rem_pio2+0x4d4>
 8007cbe:	ab48      	add	r3, sp, #288	; 0x120
 8007cc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc8:	f7f8 fa84 	bl	80001d4 <__adddf3>
 8007ccc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007cd0:	f1bb 0f00 	cmp.w	fp, #0
 8007cd4:	daf3      	bge.n	8007cbe <__kernel_rem_pio2+0x536>
 8007cd6:	9b02      	ldr	r3, [sp, #8]
 8007cd8:	b113      	cbz	r3, 8007ce0 <__kernel_rem_pio2+0x558>
 8007cda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cde:	4619      	mov	r1, r3
 8007ce0:	9b01      	ldr	r3, [sp, #4]
 8007ce2:	e9c3 0100 	strd	r0, r1, [r3]
 8007ce6:	e7b9      	b.n	8007c5c <__kernel_rem_pio2+0x4d4>
 8007ce8:	2000      	movs	r0, #0
 8007cea:	2100      	movs	r1, #0
 8007cec:	e7f0      	b.n	8007cd0 <__kernel_rem_pio2+0x548>
 8007cee:	ab48      	add	r3, sp, #288	; 0x120
 8007cf0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf8:	f7f8 fa6c 	bl	80001d4 <__adddf3>
 8007cfc:	3c01      	subs	r4, #1
 8007cfe:	2c00      	cmp	r4, #0
 8007d00:	daf5      	bge.n	8007cee <__kernel_rem_pio2+0x566>
 8007d02:	9b02      	ldr	r3, [sp, #8]
 8007d04:	b1e3      	cbz	r3, 8007d40 <__kernel_rem_pio2+0x5b8>
 8007d06:	4602      	mov	r2, r0
 8007d08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d0c:	9c01      	ldr	r4, [sp, #4]
 8007d0e:	e9c4 2300 	strd	r2, r3, [r4]
 8007d12:	4602      	mov	r2, r0
 8007d14:	460b      	mov	r3, r1
 8007d16:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007d1a:	f7f8 fa59 	bl	80001d0 <__aeabi_dsub>
 8007d1e:	ad4a      	add	r5, sp, #296	; 0x128
 8007d20:	2401      	movs	r4, #1
 8007d22:	45a3      	cmp	fp, r4
 8007d24:	da0f      	bge.n	8007d46 <__kernel_rem_pio2+0x5be>
 8007d26:	9b02      	ldr	r3, [sp, #8]
 8007d28:	b113      	cbz	r3, 8007d30 <__kernel_rem_pio2+0x5a8>
 8007d2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d2e:	4619      	mov	r1, r3
 8007d30:	9b01      	ldr	r3, [sp, #4]
 8007d32:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007d36:	e791      	b.n	8007c5c <__kernel_rem_pio2+0x4d4>
 8007d38:	465c      	mov	r4, fp
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	e7de      	b.n	8007cfe <__kernel_rem_pio2+0x576>
 8007d40:	4602      	mov	r2, r0
 8007d42:	460b      	mov	r3, r1
 8007d44:	e7e2      	b.n	8007d0c <__kernel_rem_pio2+0x584>
 8007d46:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8007d4a:	f7f8 fa43 	bl	80001d4 <__adddf3>
 8007d4e:	3401      	adds	r4, #1
 8007d50:	e7e7      	b.n	8007d22 <__kernel_rem_pio2+0x59a>
 8007d52:	e9d8 4500 	ldrd	r4, r5, [r8]
 8007d56:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	4632      	mov	r2, r6
 8007d5e:	463b      	mov	r3, r7
 8007d60:	4629      	mov	r1, r5
 8007d62:	f7f8 fa37 	bl	80001d4 <__adddf3>
 8007d66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	4620      	mov	r0, r4
 8007d70:	4629      	mov	r1, r5
 8007d72:	f7f8 fa2d 	bl	80001d0 <__aeabi_dsub>
 8007d76:	4632      	mov	r2, r6
 8007d78:	463b      	mov	r3, r7
 8007d7a:	f7f8 fa2b 	bl	80001d4 <__adddf3>
 8007d7e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007d82:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8007d86:	ed88 7b00 	vstr	d7, [r8]
 8007d8a:	f109 39ff 	add.w	r9, r9, #4294967295
 8007d8e:	e776      	b.n	8007c7e <__kernel_rem_pio2+0x4f6>
 8007d90:	e9da 8900 	ldrd	r8, r9, [sl]
 8007d94:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007d98:	4640      	mov	r0, r8
 8007d9a:	4632      	mov	r2, r6
 8007d9c:	463b      	mov	r3, r7
 8007d9e:	4649      	mov	r1, r9
 8007da0:	f7f8 fa18 	bl	80001d4 <__adddf3>
 8007da4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007da8:	4602      	mov	r2, r0
 8007daa:	460b      	mov	r3, r1
 8007dac:	4640      	mov	r0, r8
 8007dae:	4649      	mov	r1, r9
 8007db0:	f7f8 fa0e 	bl	80001d0 <__aeabi_dsub>
 8007db4:	4632      	mov	r2, r6
 8007db6:	463b      	mov	r3, r7
 8007db8:	f7f8 fa0c 	bl	80001d4 <__adddf3>
 8007dbc:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007dc0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007dc4:	ed8a 7b00 	vstr	d7, [sl]
 8007dc8:	3c01      	subs	r4, #1
 8007dca:	e75e      	b.n	8007c8a <__kernel_rem_pio2+0x502>
 8007dcc:	ab48      	add	r3, sp, #288	; 0x120
 8007dce:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd6:	f7f8 f9fd 	bl	80001d4 <__adddf3>
 8007dda:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007dde:	e75a      	b.n	8007c96 <__kernel_rem_pio2+0x50e>
 8007de0:	9b01      	ldr	r3, [sp, #4]
 8007de2:	9a01      	ldr	r2, [sp, #4]
 8007de4:	601d      	str	r5, [r3, #0]
 8007de6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007dea:	605c      	str	r4, [r3, #4]
 8007dec:	609f      	str	r7, [r3, #8]
 8007dee:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007df2:	60d3      	str	r3, [r2, #12]
 8007df4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007df8:	6110      	str	r0, [r2, #16]
 8007dfa:	6153      	str	r3, [r2, #20]
 8007dfc:	e72e      	b.n	8007c5c <__kernel_rem_pio2+0x4d4>
 8007dfe:	bf00      	nop
 8007e00:	41700000 	.word	0x41700000
 8007e04:	3e700000 	.word	0x3e700000

08007e08 <__kernel_sin>:
 8007e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e0c:	ed2d 8b04 	vpush	{d8-d9}
 8007e10:	eeb0 8a41 	vmov.f32	s16, s2
 8007e14:	eef0 8a61 	vmov.f32	s17, s3
 8007e18:	ec55 4b10 	vmov	r4, r5, d0
 8007e1c:	b083      	sub	sp, #12
 8007e1e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007e22:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007e26:	9001      	str	r0, [sp, #4]
 8007e28:	da06      	bge.n	8007e38 <__kernel_sin+0x30>
 8007e2a:	ee10 0a10 	vmov	r0, s0
 8007e2e:	4629      	mov	r1, r5
 8007e30:	f7f8 fe20 	bl	8000a74 <__aeabi_d2iz>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	d051      	beq.n	8007edc <__kernel_sin+0xd4>
 8007e38:	4622      	mov	r2, r4
 8007e3a:	462b      	mov	r3, r5
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	4629      	mov	r1, r5
 8007e40:	f7f8 fb7e 	bl	8000540 <__aeabi_dmul>
 8007e44:	4682      	mov	sl, r0
 8007e46:	468b      	mov	fp, r1
 8007e48:	4602      	mov	r2, r0
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	4629      	mov	r1, r5
 8007e50:	f7f8 fb76 	bl	8000540 <__aeabi_dmul>
 8007e54:	a341      	add	r3, pc, #260	; (adr r3, 8007f5c <__kernel_sin+0x154>)
 8007e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5a:	4680      	mov	r8, r0
 8007e5c:	4689      	mov	r9, r1
 8007e5e:	4650      	mov	r0, sl
 8007e60:	4659      	mov	r1, fp
 8007e62:	f7f8 fb6d 	bl	8000540 <__aeabi_dmul>
 8007e66:	a33f      	add	r3, pc, #252	; (adr r3, 8007f64 <__kernel_sin+0x15c>)
 8007e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6c:	f7f8 f9b0 	bl	80001d0 <__aeabi_dsub>
 8007e70:	4652      	mov	r2, sl
 8007e72:	465b      	mov	r3, fp
 8007e74:	f7f8 fb64 	bl	8000540 <__aeabi_dmul>
 8007e78:	a33c      	add	r3, pc, #240	; (adr r3, 8007f6c <__kernel_sin+0x164>)
 8007e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7e:	f7f8 f9a9 	bl	80001d4 <__adddf3>
 8007e82:	4652      	mov	r2, sl
 8007e84:	465b      	mov	r3, fp
 8007e86:	f7f8 fb5b 	bl	8000540 <__aeabi_dmul>
 8007e8a:	a33a      	add	r3, pc, #232	; (adr r3, 8007f74 <__kernel_sin+0x16c>)
 8007e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e90:	f7f8 f99e 	bl	80001d0 <__aeabi_dsub>
 8007e94:	4652      	mov	r2, sl
 8007e96:	465b      	mov	r3, fp
 8007e98:	f7f8 fb52 	bl	8000540 <__aeabi_dmul>
 8007e9c:	a337      	add	r3, pc, #220	; (adr r3, 8007f7c <__kernel_sin+0x174>)
 8007e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea2:	f7f8 f997 	bl	80001d4 <__adddf3>
 8007ea6:	9b01      	ldr	r3, [sp, #4]
 8007ea8:	4606      	mov	r6, r0
 8007eaa:	460f      	mov	r7, r1
 8007eac:	b9eb      	cbnz	r3, 8007eea <__kernel_sin+0xe2>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	4650      	mov	r0, sl
 8007eb4:	4659      	mov	r1, fp
 8007eb6:	f7f8 fb43 	bl	8000540 <__aeabi_dmul>
 8007eba:	a325      	add	r3, pc, #148	; (adr r3, 8007f50 <__kernel_sin+0x148>)
 8007ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec0:	f7f8 f986 	bl	80001d0 <__aeabi_dsub>
 8007ec4:	4642      	mov	r2, r8
 8007ec6:	464b      	mov	r3, r9
 8007ec8:	f7f8 fb3a 	bl	8000540 <__aeabi_dmul>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	460b      	mov	r3, r1
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	4629      	mov	r1, r5
 8007ed4:	f7f8 f97e 	bl	80001d4 <__adddf3>
 8007ed8:	4604      	mov	r4, r0
 8007eda:	460d      	mov	r5, r1
 8007edc:	ec45 4b10 	vmov	d0, r4, r5
 8007ee0:	b003      	add	sp, #12
 8007ee2:	ecbd 8b04 	vpop	{d8-d9}
 8007ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eea:	4b1b      	ldr	r3, [pc, #108]	; (8007f58 <__kernel_sin+0x150>)
 8007eec:	ec51 0b18 	vmov	r0, r1, d8
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f7f8 fb25 	bl	8000540 <__aeabi_dmul>
 8007ef6:	4632      	mov	r2, r6
 8007ef8:	ec41 0b19 	vmov	d9, r0, r1
 8007efc:	463b      	mov	r3, r7
 8007efe:	4640      	mov	r0, r8
 8007f00:	4649      	mov	r1, r9
 8007f02:	f7f8 fb1d 	bl	8000540 <__aeabi_dmul>
 8007f06:	4602      	mov	r2, r0
 8007f08:	460b      	mov	r3, r1
 8007f0a:	ec51 0b19 	vmov	r0, r1, d9
 8007f0e:	f7f8 f95f 	bl	80001d0 <__aeabi_dsub>
 8007f12:	4652      	mov	r2, sl
 8007f14:	465b      	mov	r3, fp
 8007f16:	f7f8 fb13 	bl	8000540 <__aeabi_dmul>
 8007f1a:	ec53 2b18 	vmov	r2, r3, d8
 8007f1e:	f7f8 f957 	bl	80001d0 <__aeabi_dsub>
 8007f22:	a30b      	add	r3, pc, #44	; (adr r3, 8007f50 <__kernel_sin+0x148>)
 8007f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f28:	4606      	mov	r6, r0
 8007f2a:	460f      	mov	r7, r1
 8007f2c:	4640      	mov	r0, r8
 8007f2e:	4649      	mov	r1, r9
 8007f30:	f7f8 fb06 	bl	8000540 <__aeabi_dmul>
 8007f34:	4602      	mov	r2, r0
 8007f36:	460b      	mov	r3, r1
 8007f38:	4630      	mov	r0, r6
 8007f3a:	4639      	mov	r1, r7
 8007f3c:	f7f8 f94a 	bl	80001d4 <__adddf3>
 8007f40:	4602      	mov	r2, r0
 8007f42:	460b      	mov	r3, r1
 8007f44:	4620      	mov	r0, r4
 8007f46:	4629      	mov	r1, r5
 8007f48:	f7f8 f942 	bl	80001d0 <__aeabi_dsub>
 8007f4c:	e7c4      	b.n	8007ed8 <__kernel_sin+0xd0>
 8007f4e:	bf00      	nop
 8007f50:	55555549 	.word	0x55555549
 8007f54:	3fc55555 	.word	0x3fc55555
 8007f58:	3fe00000 	.word	0x3fe00000
 8007f5c:	5acfd57c 	.word	0x5acfd57c
 8007f60:	3de5d93a 	.word	0x3de5d93a
 8007f64:	8a2b9ceb 	.word	0x8a2b9ceb
 8007f68:	3e5ae5e6 	.word	0x3e5ae5e6
 8007f6c:	57b1fe7d 	.word	0x57b1fe7d
 8007f70:	3ec71de3 	.word	0x3ec71de3
 8007f74:	19c161d5 	.word	0x19c161d5
 8007f78:	3f2a01a0 	.word	0x3f2a01a0
 8007f7c:	1110f8a6 	.word	0x1110f8a6
 8007f80:	3f811111 	.word	0x3f811111

08007f84 <fabs>:
 8007f84:	ec51 0b10 	vmov	r0, r1, d0
 8007f88:	ee10 2a10 	vmov	r2, s0
 8007f8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007f90:	ec43 2b10 	vmov	d0, r2, r3
 8007f94:	4770      	bx	lr
	...

08007f98 <floor>:
 8007f98:	ec51 0b10 	vmov	r0, r1, d0
 8007f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007fa4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007fa8:	2e13      	cmp	r6, #19
 8007faa:	ee10 5a10 	vmov	r5, s0
 8007fae:	ee10 8a10 	vmov	r8, s0
 8007fb2:	460c      	mov	r4, r1
 8007fb4:	dc32      	bgt.n	800801c <floor+0x84>
 8007fb6:	2e00      	cmp	r6, #0
 8007fb8:	da14      	bge.n	8007fe4 <floor+0x4c>
 8007fba:	a333      	add	r3, pc, #204	; (adr r3, 8008088 <floor+0xf0>)
 8007fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc0:	f7f8 f908 	bl	80001d4 <__adddf3>
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	f7f8 fd4a 	bl	8000a60 <__aeabi_dcmpgt>
 8007fcc:	b138      	cbz	r0, 8007fde <floor+0x46>
 8007fce:	2c00      	cmp	r4, #0
 8007fd0:	da57      	bge.n	8008082 <floor+0xea>
 8007fd2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007fd6:	431d      	orrs	r5, r3
 8007fd8:	d001      	beq.n	8007fde <floor+0x46>
 8007fda:	4c2d      	ldr	r4, [pc, #180]	; (8008090 <floor+0xf8>)
 8007fdc:	2500      	movs	r5, #0
 8007fde:	4621      	mov	r1, r4
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	e025      	b.n	8008030 <floor+0x98>
 8007fe4:	4f2b      	ldr	r7, [pc, #172]	; (8008094 <floor+0xfc>)
 8007fe6:	4137      	asrs	r7, r6
 8007fe8:	ea01 0307 	and.w	r3, r1, r7
 8007fec:	4303      	orrs	r3, r0
 8007fee:	d01f      	beq.n	8008030 <floor+0x98>
 8007ff0:	a325      	add	r3, pc, #148	; (adr r3, 8008088 <floor+0xf0>)
 8007ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff6:	f7f8 f8ed 	bl	80001d4 <__adddf3>
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	f7f8 fd2f 	bl	8000a60 <__aeabi_dcmpgt>
 8008002:	2800      	cmp	r0, #0
 8008004:	d0eb      	beq.n	8007fde <floor+0x46>
 8008006:	2c00      	cmp	r4, #0
 8008008:	bfbe      	ittt	lt
 800800a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800800e:	fa43 f606 	asrlt.w	r6, r3, r6
 8008012:	19a4      	addlt	r4, r4, r6
 8008014:	ea24 0407 	bic.w	r4, r4, r7
 8008018:	2500      	movs	r5, #0
 800801a:	e7e0      	b.n	8007fde <floor+0x46>
 800801c:	2e33      	cmp	r6, #51	; 0x33
 800801e:	dd0b      	ble.n	8008038 <floor+0xa0>
 8008020:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008024:	d104      	bne.n	8008030 <floor+0x98>
 8008026:	ee10 2a10 	vmov	r2, s0
 800802a:	460b      	mov	r3, r1
 800802c:	f7f8 f8d2 	bl	80001d4 <__adddf3>
 8008030:	ec41 0b10 	vmov	d0, r0, r1
 8008034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008038:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800803c:	f04f 33ff 	mov.w	r3, #4294967295
 8008040:	fa23 f707 	lsr.w	r7, r3, r7
 8008044:	4207      	tst	r7, r0
 8008046:	d0f3      	beq.n	8008030 <floor+0x98>
 8008048:	a30f      	add	r3, pc, #60	; (adr r3, 8008088 <floor+0xf0>)
 800804a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804e:	f7f8 f8c1 	bl	80001d4 <__adddf3>
 8008052:	2200      	movs	r2, #0
 8008054:	2300      	movs	r3, #0
 8008056:	f7f8 fd03 	bl	8000a60 <__aeabi_dcmpgt>
 800805a:	2800      	cmp	r0, #0
 800805c:	d0bf      	beq.n	8007fde <floor+0x46>
 800805e:	2c00      	cmp	r4, #0
 8008060:	da02      	bge.n	8008068 <floor+0xd0>
 8008062:	2e14      	cmp	r6, #20
 8008064:	d103      	bne.n	800806e <floor+0xd6>
 8008066:	3401      	adds	r4, #1
 8008068:	ea25 0507 	bic.w	r5, r5, r7
 800806c:	e7b7      	b.n	8007fde <floor+0x46>
 800806e:	2301      	movs	r3, #1
 8008070:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008074:	fa03 f606 	lsl.w	r6, r3, r6
 8008078:	4435      	add	r5, r6
 800807a:	4545      	cmp	r5, r8
 800807c:	bf38      	it	cc
 800807e:	18e4      	addcc	r4, r4, r3
 8008080:	e7f2      	b.n	8008068 <floor+0xd0>
 8008082:	2500      	movs	r5, #0
 8008084:	462c      	mov	r4, r5
 8008086:	e7aa      	b.n	8007fde <floor+0x46>
 8008088:	8800759c 	.word	0x8800759c
 800808c:	7e37e43c 	.word	0x7e37e43c
 8008090:	bff00000 	.word	0xbff00000
 8008094:	000fffff 	.word	0x000fffff

08008098 <scalbn>:
 8008098:	b570      	push	{r4, r5, r6, lr}
 800809a:	ec55 4b10 	vmov	r4, r5, d0
 800809e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80080a2:	4606      	mov	r6, r0
 80080a4:	462b      	mov	r3, r5
 80080a6:	b99a      	cbnz	r2, 80080d0 <scalbn+0x38>
 80080a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80080ac:	4323      	orrs	r3, r4
 80080ae:	d036      	beq.n	800811e <scalbn+0x86>
 80080b0:	4b39      	ldr	r3, [pc, #228]	; (8008198 <scalbn+0x100>)
 80080b2:	4629      	mov	r1, r5
 80080b4:	ee10 0a10 	vmov	r0, s0
 80080b8:	2200      	movs	r2, #0
 80080ba:	f7f8 fa41 	bl	8000540 <__aeabi_dmul>
 80080be:	4b37      	ldr	r3, [pc, #220]	; (800819c <scalbn+0x104>)
 80080c0:	429e      	cmp	r6, r3
 80080c2:	4604      	mov	r4, r0
 80080c4:	460d      	mov	r5, r1
 80080c6:	da10      	bge.n	80080ea <scalbn+0x52>
 80080c8:	a32b      	add	r3, pc, #172	; (adr r3, 8008178 <scalbn+0xe0>)
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	e03a      	b.n	8008146 <scalbn+0xae>
 80080d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80080d4:	428a      	cmp	r2, r1
 80080d6:	d10c      	bne.n	80080f2 <scalbn+0x5a>
 80080d8:	ee10 2a10 	vmov	r2, s0
 80080dc:	4620      	mov	r0, r4
 80080de:	4629      	mov	r1, r5
 80080e0:	f7f8 f878 	bl	80001d4 <__adddf3>
 80080e4:	4604      	mov	r4, r0
 80080e6:	460d      	mov	r5, r1
 80080e8:	e019      	b.n	800811e <scalbn+0x86>
 80080ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80080ee:	460b      	mov	r3, r1
 80080f0:	3a36      	subs	r2, #54	; 0x36
 80080f2:	4432      	add	r2, r6
 80080f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80080f8:	428a      	cmp	r2, r1
 80080fa:	dd08      	ble.n	800810e <scalbn+0x76>
 80080fc:	2d00      	cmp	r5, #0
 80080fe:	a120      	add	r1, pc, #128	; (adr r1, 8008180 <scalbn+0xe8>)
 8008100:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008104:	da1c      	bge.n	8008140 <scalbn+0xa8>
 8008106:	a120      	add	r1, pc, #128	; (adr r1, 8008188 <scalbn+0xf0>)
 8008108:	e9d1 0100 	ldrd	r0, r1, [r1]
 800810c:	e018      	b.n	8008140 <scalbn+0xa8>
 800810e:	2a00      	cmp	r2, #0
 8008110:	dd08      	ble.n	8008124 <scalbn+0x8c>
 8008112:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008116:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800811a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800811e:	ec45 4b10 	vmov	d0, r4, r5
 8008122:	bd70      	pop	{r4, r5, r6, pc}
 8008124:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008128:	da19      	bge.n	800815e <scalbn+0xc6>
 800812a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800812e:	429e      	cmp	r6, r3
 8008130:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008134:	dd0a      	ble.n	800814c <scalbn+0xb4>
 8008136:	a112      	add	r1, pc, #72	; (adr r1, 8008180 <scalbn+0xe8>)
 8008138:	e9d1 0100 	ldrd	r0, r1, [r1]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1e2      	bne.n	8008106 <scalbn+0x6e>
 8008140:	a30f      	add	r3, pc, #60	; (adr r3, 8008180 <scalbn+0xe8>)
 8008142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008146:	f7f8 f9fb 	bl	8000540 <__aeabi_dmul>
 800814a:	e7cb      	b.n	80080e4 <scalbn+0x4c>
 800814c:	a10a      	add	r1, pc, #40	; (adr r1, 8008178 <scalbn+0xe0>)
 800814e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d0b8      	beq.n	80080c8 <scalbn+0x30>
 8008156:	a10e      	add	r1, pc, #56	; (adr r1, 8008190 <scalbn+0xf8>)
 8008158:	e9d1 0100 	ldrd	r0, r1, [r1]
 800815c:	e7b4      	b.n	80080c8 <scalbn+0x30>
 800815e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008162:	3236      	adds	r2, #54	; 0x36
 8008164:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008168:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800816c:	4620      	mov	r0, r4
 800816e:	4b0c      	ldr	r3, [pc, #48]	; (80081a0 <scalbn+0x108>)
 8008170:	2200      	movs	r2, #0
 8008172:	e7e8      	b.n	8008146 <scalbn+0xae>
 8008174:	f3af 8000 	nop.w
 8008178:	c2f8f359 	.word	0xc2f8f359
 800817c:	01a56e1f 	.word	0x01a56e1f
 8008180:	8800759c 	.word	0x8800759c
 8008184:	7e37e43c 	.word	0x7e37e43c
 8008188:	8800759c 	.word	0x8800759c
 800818c:	fe37e43c 	.word	0xfe37e43c
 8008190:	c2f8f359 	.word	0xc2f8f359
 8008194:	81a56e1f 	.word	0x81a56e1f
 8008198:	43500000 	.word	0x43500000
 800819c:	ffff3cb0 	.word	0xffff3cb0
 80081a0:	3c900000 	.word	0x3c900000

080081a4 <_init>:
 80081a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a6:	bf00      	nop
 80081a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081aa:	bc08      	pop	{r3}
 80081ac:	469e      	mov	lr, r3
 80081ae:	4770      	bx	lr

080081b0 <_fini>:
 80081b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b2:	bf00      	nop
 80081b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081b6:	bc08      	pop	{r3}
 80081b8:	469e      	mov	lr, r3
 80081ba:	4770      	bx	lr
