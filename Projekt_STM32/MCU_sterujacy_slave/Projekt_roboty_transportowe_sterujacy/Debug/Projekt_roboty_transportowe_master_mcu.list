
Projekt_roboty_transportowe_master_mcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000535c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080054e4  080054e4  000154e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800551c  0800551c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800551c  0800551c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800551c  0800551c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800551c  0800551c  0001551c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005520  08005520  00015520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000718  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000728  20000728  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000135ea  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a6a  00000000  00000000  0003362a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e90  00000000  00000000  00036098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d68  00000000  00000000  00036f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c5b8  00000000  00000000  00037c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001337d  00000000  00000000  00054248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a5964  00000000  00000000  000675c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0010cf29  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b04  00000000  00000000  0010cf7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080054cc 	.word	0x080054cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080054cc 	.word	0x080054cc

080001c8 <motor_init>:
	}

	return m->speed;
}
void motor_init(motor *m, GPIO_TypeDef * DIR_GPIO_IN,uint16_t DIR_PIN_IN)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	4613      	mov	r3, r2
 80001d4:	80fb      	strh	r3, [r7, #6]
	m->DIR_PIN = DIR_PIN_IN;
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	88fa      	ldrh	r2, [r7, #6]
 80001da:	809a      	strh	r2, [r3, #4]

	m->DIR_GPIO = DIR_GPIO_IN;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	68ba      	ldr	r2, [r7, #8]
 80001e0:	601a      	str	r2, [r3, #0]

	m->resolution = (ENCODER_RESOLUTION * TIMER_COUNTS * GEAR_RATIO);
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80001e8:	65da      	str	r2, [r3, #92]	; 0x5c

	m->pulse_count = 0;
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	2200      	movs	r2, #0
 80001ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	m->speed = 0;
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	2200      	movs	r2, #0
 80001f6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	m->iterator = 0;
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	2200      	movs	r2, #0
 80001fe:	811a      	strh	r2, [r3, #8]
	for(int i = 0; i<10;i++)
 8000200:	2300      	movs	r3, #0
 8000202:	617b      	str	r3, [r7, #20]
 8000204:	e009      	b.n	800021a <motor_init+0x52>
	{
		m->speedlist[i] = 0;
 8000206:	68fa      	ldr	r2, [r7, #12]
 8000208:	697b      	ldr	r3, [r7, #20]
 800020a:	3304      	adds	r3, #4
 800020c:	005b      	lsls	r3, r3, #1
 800020e:	4413      	add	r3, r2
 8000210:	2200      	movs	r2, #0
 8000212:	805a      	strh	r2, [r3, #2]
	for(int i = 0; i<10;i++)
 8000214:	697b      	ldr	r3, [r7, #20]
 8000216:	3301      	adds	r3, #1
 8000218:	617b      	str	r3, [r7, #20]
 800021a:	697b      	ldr	r3, [r7, #20]
 800021c:	2b09      	cmp	r3, #9
 800021e:	ddf2      	ble.n	8000206 <motor_init+0x3e>
	}
}
 8000220:	bf00      	nop
 8000222:	bf00      	nop
 8000224:	371c      	adds	r7, #28
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
	...

08000230 <pid_init>:
 *  Created on: 6 kwi 2022
 *      Author: Grzegorz Cieslar
 */
#include "PID.h"

void pid_init(PID_t * pid, float p, float i, float d, float dt_ms, int16_t power) {
 8000230:	b480      	push	{r7}
 8000232:	b087      	sub	sp, #28
 8000234:	af00      	add	r7, sp, #0
 8000236:	6178      	str	r0, [r7, #20]
 8000238:	ed87 0a04 	vstr	s0, [r7, #16]
 800023c:	edc7 0a03 	vstr	s1, [r7, #12]
 8000240:	ed87 1a02 	vstr	s2, [r7, #8]
 8000244:	edc7 1a01 	vstr	s3, [r7, #4]
 8000248:	460b      	mov	r3, r1
 800024a:	807b      	strh	r3, [r7, #2]

	pid->p = p;
 800024c:	697b      	ldr	r3, [r7, #20]
 800024e:	693a      	ldr	r2, [r7, #16]
 8000250:	601a      	str	r2, [r3, #0]
	pid->i = i;
 8000252:	697b      	ldr	r3, [r7, #20]
 8000254:	68fa      	ldr	r2, [r7, #12]
 8000256:	605a      	str	r2, [r3, #4]
	pid->d = d;
 8000258:	697b      	ldr	r3, [r7, #20]
 800025a:	68ba      	ldr	r2, [r7, #8]
 800025c:	609a      	str	r2, [r3, #8]
	pid->p_val = 0.0;
 800025e:	697b      	ldr	r3, [r7, #20]
 8000260:	f04f 0200 	mov.w	r2, #0
 8000264:	60da      	str	r2, [r3, #12]
	pid->i_val = 0.0;
 8000266:	697b      	ldr	r3, [r7, #20]
 8000268:	f04f 0200 	mov.w	r2, #0
 800026c:	611a      	str	r2, [r3, #16]
	pid->d_val = 0.0;
 800026e:	697b      	ldr	r3, [r7, #20]
 8000270:	f04f 0200 	mov.w	r2, #0
 8000274:	615a      	str	r2, [r3, #20]

	pid->PID_max_val = FLOAT_MAX;
 8000276:	697b      	ldr	r3, [r7, #20]
 8000278:	4a0f      	ldr	r2, [pc, #60]	; (80002b8 <pid_init+0x88>)
 800027a:	619a      	str	r2, [r3, #24]
	pid->PID_min_val = FLOAT_MIN;
 800027c:	697b      	ldr	r3, [r7, #20]
 800027e:	4a0f      	ldr	r2, [pc, #60]	; (80002bc <pid_init+0x8c>)
 8000280:	61da      	str	r2, [r3, #28]
	pid->total_max = FLOAT_MAX;
 8000282:	697b      	ldr	r3, [r7, #20]
 8000284:	4a0c      	ldr	r2, [pc, #48]	; (80002b8 <pid_init+0x88>)
 8000286:	621a      	str	r2, [r3, #32]
	pid->total_min = FLOAT_MIN;
 8000288:	697b      	ldr	r3, [r7, #20]
 800028a:	4a0c      	ldr	r2, [pc, #48]	; (80002bc <pid_init+0x8c>)
 800028c:	625a      	str	r2, [r3, #36]	; 0x24

	pid->e_last = 0.0;
 800028e:	697b      	ldr	r3, [r7, #20]
 8000290:	f04f 0200 	mov.w	r2, #0
 8000294:	631a      	str	r2, [r3, #48]	; 0x30
	pid->sum = 0.0;
 8000296:	697b      	ldr	r3, [r7, #20]
 8000298:	f04f 0200 	mov.w	r2, #0
 800029c:	635a      	str	r2, [r3, #52]	; 0x34

	pid->dt_ms = dt_ms;
 800029e:	697b      	ldr	r3, [r7, #20]
 80002a0:	687a      	ldr	r2, [r7, #4]
 80002a2:	63da      	str	r2, [r3, #60]	; 0x3c

	pid->power = power;
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	887a      	ldrh	r2, [r7, #2]
 80002a8:	875a      	strh	r2, [r3, #58]	; 0x3a

}
 80002aa:	bf00      	nop
 80002ac:	371c      	adds	r7, #28
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	49742400 	.word	0x49742400
 80002bc:	c9742400 	.word	0xc9742400

080002c0 <pid_scaling>:

	return pid->control;
}

void pid_scaling(PID_t* pid, float  pid_max, float pid_min, float total_max, float total_min)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b087      	sub	sp, #28
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6178      	str	r0, [r7, #20]
 80002c8:	ed87 0a04 	vstr	s0, [r7, #16]
 80002cc:	edc7 0a03 	vstr	s1, [r7, #12]
 80002d0:	ed87 1a02 	vstr	s2, [r7, #8]
 80002d4:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->PID_max_val = pid_max*pid->power;
 80002d8:	697b      	ldr	r3, [r7, #20]
 80002da:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80002de:	ee07 3a90 	vmov	s15, r3
 80002e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80002e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80002ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80002ee:	697b      	ldr	r3, [r7, #20]
 80002f0:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->PID_min_val = pid_min*pid->power;
 80002f4:	697b      	ldr	r3, [r7, #20]
 80002f6:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80002fa:	ee07 3a90 	vmov	s15, r3
 80002fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000302:	edd7 7a03 	vldr	s15, [r7, #12]
 8000306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800030a:	697b      	ldr	r3, [r7, #20]
 800030c:	edc3 7a07 	vstr	s15, [r3, #28]
	pid->total_max = total_max;
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	68ba      	ldr	r2, [r7, #8]
 8000314:	621a      	str	r2, [r3, #32]
	pid->total_min = total_min;
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	687a      	ldr	r2, [r7, #4]
 800031a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800031c:	bf00      	nop
 800031e:	371c      	adds	r7, #28
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr

08000328 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800032e:	4b10      	ldr	r3, [pc, #64]	; (8000370 <MX_DMA_Init+0x48>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	4a0f      	ldr	r2, [pc, #60]	; (8000370 <MX_DMA_Init+0x48>)
 8000334:	f043 0301 	orr.w	r3, r3, #1
 8000338:	6153      	str	r3, [r2, #20]
 800033a:	4b0d      	ldr	r3, [pc, #52]	; (8000370 <MX_DMA_Init+0x48>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	f003 0301 	and.w	r3, r3, #1
 8000342:	607b      	str	r3, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000346:	2200      	movs	r2, #0
 8000348:	2100      	movs	r1, #0
 800034a:	200f      	movs	r0, #15
 800034c:	f001 f923 	bl	8001596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000350:	200f      	movs	r0, #15
 8000352:	f001 f93c 	bl	80015ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000356:	2200      	movs	r2, #0
 8000358:	2100      	movs	r1, #0
 800035a:	2010      	movs	r0, #16
 800035c:	f001 f91b 	bl	8001596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000360:	2010      	movs	r0, #16
 8000362:	f001 f934 	bl	80015ce <HAL_NVIC_EnableIRQ>

}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40021000 	.word	0x40021000

08000374 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b088      	sub	sp, #32
 8000378:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037a:	f107 030c 	add.w	r3, r7, #12
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]
 8000388:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800038a:	4b42      	ldr	r3, [pc, #264]	; (8000494 <MX_GPIO_Init+0x120>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	4a41      	ldr	r2, [pc, #260]	; (8000494 <MX_GPIO_Init+0x120>)
 8000390:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000394:	6153      	str	r3, [r2, #20]
 8000396:	4b3f      	ldr	r3, [pc, #252]	; (8000494 <MX_GPIO_Init+0x120>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800039e:	60bb      	str	r3, [r7, #8]
 80003a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a2:	4b3c      	ldr	r3, [pc, #240]	; (8000494 <MX_GPIO_Init+0x120>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	4a3b      	ldr	r2, [pc, #236]	; (8000494 <MX_GPIO_Init+0x120>)
 80003a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003ac:	6153      	str	r3, [r2, #20]
 80003ae:	4b39      	ldr	r3, [pc, #228]	; (8000494 <MX_GPIO_Init+0x120>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ba:	4b36      	ldr	r3, [pc, #216]	; (8000494 <MX_GPIO_Init+0x120>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	4a35      	ldr	r2, [pc, #212]	; (8000494 <MX_GPIO_Init+0x120>)
 80003c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003c4:	6153      	str	r3, [r2, #20]
 80003c6:	4b33      	ldr	r3, [pc, #204]	; (8000494 <MX_GPIO_Init+0x120>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003ce:	603b      	str	r3, [r7, #0]
 80003d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_PT_Pin|DIR_LT_Pin|WYLACZNIK_Pin, GPIO_PIN_RESET);
 80003d2:	2200      	movs	r2, #0
 80003d4:	f248 0130 	movw	r1, #32816	; 0x8030
 80003d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003dc:	f001 fc92 	bl	8001d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_LP_Pin|DIR_PP_Pin, GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2103      	movs	r1, #3
 80003e4:	482c      	ldr	r0, [pc, #176]	; (8000498 <MX_GPIO_Init+0x124>)
 80003e6:	f001 fc8d 	bl	8001d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STOP_AW_Pin;
 80003ea:	2302      	movs	r3, #2
 80003ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80003f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(STOP_AW_GPIO_Port, &GPIO_InitStruct);
 80003f8:	f107 030c 	add.w	r3, r7, #12
 80003fc:	4619      	mov	r1, r3
 80003fe:	4827      	ldr	r0, [pc, #156]	; (800049c <MX_GPIO_Init+0x128>)
 8000400:	f001 fb0e 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DIR_PT_Pin|DIR_LT_Pin|WYLACZNIK_Pin;
 8000404:	f248 0330 	movw	r3, #32816	; 0x8030
 8000408:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040a:	2301      	movs	r3, #1
 800040c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000412:	2300      	movs	r3, #0
 8000414:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000416:	f107 030c 	add.w	r3, r7, #12
 800041a:	4619      	mov	r1, r3
 800041c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000420:	f001 fafe 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIR_LP_Pin|DIR_PP_Pin;
 8000424:	2303      	movs	r3, #3
 8000426:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000428:	2301      	movs	r3, #1
 800042a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042c:	2300      	movs	r3, #0
 800042e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000430:	2300      	movs	r3, #0
 8000432:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000434:	f107 030c 	add.w	r3, r7, #12
 8000438:	4619      	mov	r1, r3
 800043a:	4817      	ldr	r0, [pc, #92]	; (8000498 <MX_GPIO_Init+0x124>)
 800043c:	f001 faf0 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = KRANCOWKA_1_Pin|KRANCOWKA_2_Pin;
 8000440:	2318      	movs	r3, #24
 8000442:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000444:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000448:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044a:	2300      	movs	r3, #0
 800044c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800044e:	f107 030c 	add.w	r3, r7, #12
 8000452:	4619      	mov	r1, r3
 8000454:	4810      	ldr	r0, [pc, #64]	; (8000498 <MX_GPIO_Init+0x124>)
 8000456:	f001 fae3 	bl	8001a20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800045a:	2200      	movs	r2, #0
 800045c:	2100      	movs	r1, #0
 800045e:	2007      	movs	r0, #7
 8000460:	f001 f899 	bl	8001596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000464:	2007      	movs	r0, #7
 8000466:	f001 f8b2 	bl	80015ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800046a:	2200      	movs	r2, #0
 800046c:	2100      	movs	r1, #0
 800046e:	2009      	movs	r0, #9
 8000470:	f001 f891 	bl	8001596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000474:	2009      	movs	r0, #9
 8000476:	f001 f8aa 	bl	80015ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	2100      	movs	r1, #0
 800047e:	200a      	movs	r0, #10
 8000480:	f001 f889 	bl	8001596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000484:	200a      	movs	r0, #10
 8000486:	f001 f8a2 	bl	80015ce <HAL_NVIC_EnableIRQ>

}
 800048a:	bf00      	nop
 800048c:	3720      	adds	r7, #32
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	40021000 	.word	0x40021000
 8000498:	48000400 	.word	0x48000400
 800049c:	48001400 	.word	0x48001400

080004a0 <ibus_init>:
static uint8_t fail_safe_flag = 0;


/* Main Functions */
void ibus_init()
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(IBUS_UART, uart_rx_buffer, 32);
 80004a4:	2220      	movs	r2, #32
 80004a6:	4903      	ldr	r1, [pc, #12]	; (80004b4 <ibus_init+0x14>)
 80004a8:	4803      	ldr	r0, [pc, #12]	; (80004b8 <ibus_init+0x18>)
 80004aa:	f003 ff49 	bl	8004340 <HAL_UART_Receive_DMA>
}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	2000002c 	.word	0x2000002c
 80004b8:	200006a0 	.word	0x200006a0

080004bc <ibus_reset_failsafe>:

/**
 * @note This function is located in HAL_UART_RxCpltCallback.
 */
void ibus_reset_failsafe()
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
		fail_safe_flag = 0; // flag reset
 80004c0:	4b03      	ldr	r3, [pc, #12]	; (80004d0 <ibus_reset_failsafe+0x14>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	701a      	strb	r2, [r3, #0]
}
 80004c6:	bf00      	nop
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	2000004c 	.word	0x2000004c

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 ff1c 	bl	8001314 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f8cc 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f7ff ff48 	bl	8000374 <MX_GPIO_Init>
  MX_TIM7_Init();
 80004e4:	f000 fba8 	bl	8000c38 <MX_TIM7_Init>
  MX_TIM3_Init();
 80004e8:	f000 fb18 	bl	8000b1c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80004ec:	f000 fdae 	bl	800104c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80004f0:	f000 fa0c 	bl	800090c <MX_TIM1_Init>
  MX_TIM2_Init();
 80004f4:	f000 fabe 	bl	8000a74 <MX_TIM2_Init>
  MX_TIM6_Init();
 80004f8:	f000 fb66 	bl	8000bc8 <MX_TIM6_Init>
  MX_TIM17_Init();
 80004fc:	f000 fbd4 	bl	8000ca8 <MX_TIM17_Init>
  MX_DMA_Init();
 8000500:	f7ff ff12 	bl	8000328 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000504:	f000 fdd2 	bl	80010ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //INIT komunikacji ze zdalna aparatura
  ibus_init();
 8000508:	f7ff ffca 	bl	80004a0 <ibus_init>

  //timery dla PID i komunikacji z PC
  HAL_TIM_Base_Start_IT(PID_TIMER);
 800050c:	484b      	ldr	r0, [pc, #300]	; (800063c <main+0x168>)
 800050e:	f002 fef3 	bl	80032f8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(COMM_TIMER);
 8000512:	484b      	ldr	r0, [pc, #300]	; (8000640 <main+0x16c>)
 8000514:	f002 fef0 	bl	80032f8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_ConfigChannel(PWM_TIMER, &oc, CH_PRZOD_LEWY);
  HAL_TIM_PWM_ConfigChannel(PWM_TIMER, &oc, CH_PRZOD_PRAWY);*/


  //Pid inicjalizacja
  ms = (int16_t)1000/PID_HZ;
 8000518:	4b4a      	ldr	r3, [pc, #296]	; (8000644 <main+0x170>)
 800051a:	2232      	movs	r2, #50	; 0x32
 800051c:	801a      	strh	r2, [r3, #0]
  pid_init(&Pid_tyl_lewy, 0.5, 5.0, 0.0, ms,PID_POWER);
 800051e:	4b49      	ldr	r3, [pc, #292]	; (8000644 <main+0x170>)
 8000520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000524:	ee07 3a90 	vmov	s15, r3
 8000528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800052c:	2164      	movs	r1, #100	; 0x64
 800052e:	eef0 1a67 	vmov.f32	s3, s15
 8000532:	ed9f 1a45 	vldr	s2, [pc, #276]	; 8000648 <main+0x174>
 8000536:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 800053a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800053e:	4843      	ldr	r0, [pc, #268]	; (800064c <main+0x178>)
 8000540:	f7ff fe76 	bl	8000230 <pid_init>
  pid_scaling(&Pid_tyl_lewy, Counter_20kHz_360, -Counter_20kHz_360, Counter_20kHz_360, -Counter_20kHz_360);
 8000544:	eddf 1a42 	vldr	s3, [pc, #264]	; 8000650 <main+0x17c>
 8000548:	ed9f 1a42 	vldr	s2, [pc, #264]	; 8000654 <main+0x180>
 800054c:	eddf 0a40 	vldr	s1, [pc, #256]	; 8000650 <main+0x17c>
 8000550:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8000654 <main+0x180>
 8000554:	483d      	ldr	r0, [pc, #244]	; (800064c <main+0x178>)
 8000556:	f7ff feb3 	bl	80002c0 <pid_scaling>
  pid_init(&Pid_tyl_prawy, 0.5, 5.0, 0.0, ms,PID_POWER);
 800055a:	4b3a      	ldr	r3, [pc, #232]	; (8000644 <main+0x170>)
 800055c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000560:	ee07 3a90 	vmov	s15, r3
 8000564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000568:	2164      	movs	r1, #100	; 0x64
 800056a:	eef0 1a67 	vmov.f32	s3, s15
 800056e:	ed9f 1a36 	vldr	s2, [pc, #216]	; 8000648 <main+0x174>
 8000572:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8000576:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800057a:	4837      	ldr	r0, [pc, #220]	; (8000658 <main+0x184>)
 800057c:	f7ff fe58 	bl	8000230 <pid_init>
  pid_scaling(&Pid_tyl_prawy, Counter_20kHz_360, -Counter_20kHz_360, Counter_20kHz_360, -Counter_20kHz_360);
 8000580:	eddf 1a33 	vldr	s3, [pc, #204]	; 8000650 <main+0x17c>
 8000584:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8000654 <main+0x180>
 8000588:	eddf 0a31 	vldr	s1, [pc, #196]	; 8000650 <main+0x17c>
 800058c:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8000654 <main+0x180>
 8000590:	4831      	ldr	r0, [pc, #196]	; (8000658 <main+0x184>)
 8000592:	f7ff fe95 	bl	80002c0 <pid_scaling>
  pid_init(&Pid_przod_lewy, 0.5, 5.0, 0.0, ms,PID_POWER);
 8000596:	4b2b      	ldr	r3, [pc, #172]	; (8000644 <main+0x170>)
 8000598:	f9b3 3000 	ldrsh.w	r3, [r3]
 800059c:	ee07 3a90 	vmov	s15, r3
 80005a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005a4:	2164      	movs	r1, #100	; 0x64
 80005a6:	eef0 1a67 	vmov.f32	s3, s15
 80005aa:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8000648 <main+0x174>
 80005ae:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80005b2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80005b6:	4829      	ldr	r0, [pc, #164]	; (800065c <main+0x188>)
 80005b8:	f7ff fe3a 	bl	8000230 <pid_init>
  pid_scaling(&Pid_przod_lewy, Counter_20kHz_360, -Counter_20kHz_360, Counter_20kHz_360, -Counter_20kHz_360);
 80005bc:	eddf 1a24 	vldr	s3, [pc, #144]	; 8000650 <main+0x17c>
 80005c0:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8000654 <main+0x180>
 80005c4:	eddf 0a22 	vldr	s1, [pc, #136]	; 8000650 <main+0x17c>
 80005c8:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8000654 <main+0x180>
 80005cc:	4823      	ldr	r0, [pc, #140]	; (800065c <main+0x188>)
 80005ce:	f7ff fe77 	bl	80002c0 <pid_scaling>
  pid_init(&Pid_przod_prawy, 0.5, 5.0, 0.0, ms,PID_POWER);
 80005d2:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <main+0x170>)
 80005d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005d8:	ee07 3a90 	vmov	s15, r3
 80005dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005e0:	2164      	movs	r1, #100	; 0x64
 80005e2:	eef0 1a67 	vmov.f32	s3, s15
 80005e6:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8000648 <main+0x174>
 80005ea:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80005ee:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80005f2:	481b      	ldr	r0, [pc, #108]	; (8000660 <main+0x18c>)
 80005f4:	f7ff fe1c 	bl	8000230 <pid_init>
  pid_scaling(&Pid_przod_prawy, Counter_20kHz_360, -Counter_20kHz_360, Counter_20kHz_360, -Counter_20kHz_360);
 80005f8:	eddf 1a15 	vldr	s3, [pc, #84]	; 8000650 <main+0x17c>
 80005fc:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8000654 <main+0x180>
 8000600:	eddf 0a13 	vldr	s1, [pc, #76]	; 8000650 <main+0x17c>
 8000604:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8000654 <main+0x180>
 8000608:	4815      	ldr	r0, [pc, #84]	; (8000660 <main+0x18c>)
 800060a:	f7ff fe59 	bl	80002c0 <pid_scaling>

  //Motor inicjalizacja
  motor_init(&mot_tyl_lewy,DIR_LT_GPIO_Port,DIR_LT_Pin);
 800060e:	2220      	movs	r2, #32
 8000610:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000614:	4813      	ldr	r0, [pc, #76]	; (8000664 <main+0x190>)
 8000616:	f7ff fdd7 	bl	80001c8 <motor_init>
  motor_init(&mot_tyl_prawy,DIR_PT_GPIO_Port,DIR_PT_Pin);
 800061a:	2210      	movs	r2, #16
 800061c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000620:	4811      	ldr	r0, [pc, #68]	; (8000668 <main+0x194>)
 8000622:	f7ff fdd1 	bl	80001c8 <motor_init>
  motor_init(&mot_przod_lewy,DIR_LP_GPIO_Port,DIR_LP_Pin);
 8000626:	2201      	movs	r2, #1
 8000628:	4910      	ldr	r1, [pc, #64]	; (800066c <main+0x198>)
 800062a:	4811      	ldr	r0, [pc, #68]	; (8000670 <main+0x19c>)
 800062c:	f7ff fdcc 	bl	80001c8 <motor_init>
  motor_init(&mot_przod_prawy,DIR_PP_GPIO_Port,DIR_PP_Pin);
 8000630:	2202      	movs	r2, #2
 8000632:	490e      	ldr	r1, [pc, #56]	; (800066c <main+0x198>)
 8000634:	480f      	ldr	r0, [pc, #60]	; (8000674 <main+0x1a0>)
 8000636:	f7ff fdc7 	bl	80001c8 <motor_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063a:	e7fe      	b.n	800063a <main+0x166>
 800063c:	20000464 	.word	0x20000464
 8000640:	20000548 	.word	0x20000548
 8000644:	20000000 	.word	0x20000000
 8000648:	00000000 	.word	0x00000000
 800064c:	200002e0 	.word	0x200002e0
 8000650:	c3b38000 	.word	0xc3b38000
 8000654:	43b38000 	.word	0x43b38000
 8000658:	2000029c 	.word	0x2000029c
 800065c:	200001ec 	.word	0x200001ec
 8000660:	20000320 	.word	0x20000320
 8000664:	20000364 	.word	0x20000364
 8000668:	2000022c 	.word	0x2000022c
 800066c:	48000400 	.word	0x48000400
 8000670:	20000184 	.word	0x20000184
 8000674:	2000011c 	.word	0x2000011c

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b096      	sub	sp, #88	; 0x58
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000682:	2228      	movs	r2, #40	; 0x28
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f004 ff18 	bl	80054bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]
 80006aa:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ac:	2301      	movs	r3, #1
 80006ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80006b6:	2301      	movs	r3, #1
 80006b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ba:	2301      	movs	r3, #1
 80006bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006c8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 fb52 	bl	8001d7c <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80006de:	f000 f85b 	bl	8000798 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2302      	movs	r3, #2
 80006e8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	2102      	movs	r1, #2
 80006fe:	4618      	mov	r0, r3
 8000700:	f002 fa44 	bl	8002b8c <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800070a:	f000 f845 	bl	8000798 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 800070e:	f241 0301 	movw	r3, #4097	; 0x1001
 8000712:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8000714:	2301      	movs	r3, #1
 8000716:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	4618      	mov	r0, r3
 8000720:	f002 fc6c 	bl	8002ffc <HAL_RCCEx_PeriphCLKConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800072a:	f000 f835 	bl	8000798 <Error_Handler>
  }
}
 800072e:	bf00      	nop
 8000730:	3758      	adds	r7, #88	; 0x58
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	if(huart == IBUS_UART) { ibus_reset_failsafe();}
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4a04      	ldr	r2, [pc, #16]	; (8000754 <HAL_UART_RxCpltCallback+0x1c>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d101      	bne.n	800074c <HAL_UART_RxCpltCallback+0x14>
 8000748:	f7ff feb8 	bl	80004bc <ibus_reset_failsafe>
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200006a0 	.word	0x200006a0

08000758 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef* htim)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	if(htim == PID_TIMER){
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a09      	ldr	r2, [pc, #36]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d102      	bne.n	800076e <HAL_TIM_PeriodElapsedCallback+0x16>
		PID_flaga = 1;
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800076a:	2201      	movs	r2, #1
 800076c:	701a      	strb	r2, [r3, #0]
	}

	if(htim == COMM_TIMER){
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a07      	ldr	r2, [pc, #28]	; (8000790 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d102      	bne.n	800077c <HAL_TIM_PeriodElapsedCallback+0x24>
		COMM_flaga = 1;
 8000776:	4b07      	ldr	r3, [pc, #28]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000778:	2201      	movs	r2, #1
 800077a:	701a      	strb	r2, [r3, #0]
	}
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	20000464 	.word	0x20000464
 800078c:	2000004d 	.word	0x2000004d
 8000790:	20000548 	.word	0x20000548
 8000794:	2000004e 	.word	0x2000004e

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
	...

080007a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <HAL_MspInit+0x44>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	4a0e      	ldr	r2, [pc, #56]	; (80007ec <HAL_MspInit+0x44>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6193      	str	r3, [r2, #24]
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <HAL_MspInit+0x44>)
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <HAL_MspInit+0x44>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	4a08      	ldr	r2, [pc, #32]	; (80007ec <HAL_MspInit+0x44>)
 80007cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d0:	61d3      	str	r3, [r2, #28]
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_MspInit+0x44>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000

080007f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <NMI_Handler+0x4>

080007f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007fa:	e7fe      	b.n	80007fa <HardFault_Handler+0x4>

080007fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <MemManage_Handler+0x4>

08000802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000806:	e7fe      	b.n	8000806 <BusFault_Handler+0x4>

08000808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800080c:	e7fe      	b.n	800080c <UsageFault_Handler+0x4>

0800080e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083c:	f000 fdb0 	bl	80013a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STOP_AW_Pin);
 8000848:	2002      	movs	r0, #2
 800084a:	f001 fa73 	bl	8001d34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}

08000852 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PC_UART_RX_Pin);
 8000856:	2008      	movs	r0, #8
 8000858:	f001 fa6c 	bl	8001d34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}

08000860 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIR_PT_Pin);
 8000864:	2010      	movs	r0, #16
 8000866:	f001 fa65 	bl	8001d34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000874:	4802      	ldr	r0, [pc, #8]	; (8000880 <DMA1_Channel5_IRQHandler+0x10>)
 8000876:	f000 ffe1 	bl	800183c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200005d8 	.word	0x200005d8

08000884 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000888:	4802      	ldr	r0, [pc, #8]	; (8000894 <DMA1_Channel6_IRQHandler+0x10>)
 800088a:	f000 ffd7 	bl	800183c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000594 	.word	0x20000594

08000898 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800089c:	4802      	ldr	r0, [pc, #8]	; (80008a8 <USART1_IRQHandler+0x10>)
 800089e:	f003 fd9d 	bl	80043dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	2000061c 	.word	0x2000061c

080008ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008b0:	4802      	ldr	r0, [pc, #8]	; (80008bc <USART2_IRQHandler+0x10>)
 80008b2:	f003 fd93 	bl	80043dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200006a0 	.word	0x200006a0

080008c0 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <TIM6_DAC1_IRQHandler+0x10>)
 80008c6:	f002 fe70 	bl	80035aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000464 	.word	0x20000464

080008d4 <TIM7_DAC2_IRQHandler>:

/**
  * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
  */
void TIM7_DAC2_IRQHandler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80008d8:	4802      	ldr	r0, [pc, #8]	; (80008e4 <TIM7_DAC2_IRQHandler+0x10>)
 80008da:	f002 fe66 	bl	80035aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC2_IRQn 1 */

  /* USER CODE END TIM7_DAC2_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000548 	.word	0x20000548

080008e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <SystemInit+0x20>)
 80008ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008f2:	4a05      	ldr	r2, [pc, #20]	; (8000908 <SystemInit+0x20>)
 80008f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b096      	sub	sp, #88	; 0x58
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000912:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800091e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	611a      	str	r2, [r3, #16]
 800092e:	615a      	str	r2, [r3, #20]
 8000930:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	222c      	movs	r2, #44	; 0x2c
 8000936:	2100      	movs	r1, #0
 8000938:	4618      	mov	r0, r3
 800093a:	f004 fdbf 	bl	80054bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800093e:	4b4b      	ldr	r3, [pc, #300]	; (8000a6c <MX_TIM1_Init+0x160>)
 8000940:	4a4b      	ldr	r2, [pc, #300]	; (8000a70 <MX_TIM1_Init+0x164>)
 8000942:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = Pre_20k_360;
 8000944:	4b49      	ldr	r3, [pc, #292]	; (8000a6c <MX_TIM1_Init+0x160>)
 8000946:	2209      	movs	r2, #9
 8000948:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094a:	4b48      	ldr	r3, [pc, #288]	; (8000a6c <MX_TIM1_Init+0x160>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = Counter_20kHz_360;
 8000950:	4b46      	ldr	r3, [pc, #280]	; (8000a6c <MX_TIM1_Init+0x160>)
 8000952:	f240 1267 	movw	r2, #359	; 0x167
 8000956:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000958:	4b44      	ldr	r3, [pc, #272]	; (8000a6c <MX_TIM1_Init+0x160>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800095e:	4b43      	ldr	r3, [pc, #268]	; (8000a6c <MX_TIM1_Init+0x160>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000964:	4b41      	ldr	r3, [pc, #260]	; (8000a6c <MX_TIM1_Init+0x160>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800096a:	4840      	ldr	r0, [pc, #256]	; (8000a6c <MX_TIM1_Init+0x160>)
 800096c:	f002 fd20 	bl	80033b0 <HAL_TIM_PWM_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000976:	f7ff ff0f 	bl	8000798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097a:	2300      	movs	r3, #0
 800097c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800097e:	2300      	movs	r3, #0
 8000980:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000982:	2300      	movs	r3, #0
 8000984:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000986:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800098a:	4619      	mov	r1, r3
 800098c:	4837      	ldr	r0, [pc, #220]	; (8000a6c <MX_TIM1_Init+0x160>)
 800098e:	f003 fb85 	bl	800409c <HAL_TIMEx_MasterConfigSynchronization>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000998:	f7ff fefe 	bl	8000798 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800099c:	2360      	movs	r3, #96	; 0x60
 800099e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a4:	2300      	movs	r3, #0
 80009a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009a8:	2300      	movs	r3, #0
 80009aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009b0:	2300      	movs	r3, #0
 80009b2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009b4:	2300      	movs	r3, #0
 80009b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009bc:	2200      	movs	r2, #0
 80009be:	4619      	mov	r1, r3
 80009c0:	482a      	ldr	r0, [pc, #168]	; (8000a6c <MX_TIM1_Init+0x160>)
 80009c2:	f002 ff11 	bl	80037e8 <HAL_TIM_PWM_ConfigChannel>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80009cc:	f7ff fee4 	bl	8000798 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009d4:	2204      	movs	r2, #4
 80009d6:	4619      	mov	r1, r3
 80009d8:	4824      	ldr	r0, [pc, #144]	; (8000a6c <MX_TIM1_Init+0x160>)
 80009da:	f002 ff05 	bl	80037e8 <HAL_TIM_PWM_ConfigChannel>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80009e4:	f7ff fed8 	bl	8000798 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009ec:	2208      	movs	r2, #8
 80009ee:	4619      	mov	r1, r3
 80009f0:	481e      	ldr	r0, [pc, #120]	; (8000a6c <MX_TIM1_Init+0x160>)
 80009f2:	f002 fef9 	bl	80037e8 <HAL_TIM_PWM_ConfigChannel>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80009fc:	f7ff fecc 	bl	8000798 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a04:	220c      	movs	r2, #12
 8000a06:	4619      	mov	r1, r3
 8000a08:	4818      	ldr	r0, [pc, #96]	; (8000a6c <MX_TIM1_Init+0x160>)
 8000a0a:	f002 feed 	bl	80037e8 <HAL_TIM_PWM_ConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000a14:	f7ff fec0 	bl	8000798 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a30:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4807      	ldr	r0, [pc, #28]	; (8000a6c <MX_TIM1_Init+0x160>)
 8000a4e:	f003 fb93 	bl	8004178 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8000a58:	f7ff fe9e 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a5c:	4803      	ldr	r0, [pc, #12]	; (8000a6c <MX_TIM1_Init+0x160>)
 8000a5e:	f000 fa85 	bl	8000f6c <HAL_TIM_MspPostInit>

}
 8000a62:	bf00      	nop
 8000a64:	3758      	adds	r7, #88	; 0x58
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200004b0 	.word	0x200004b0
 8000a70:	40012c00 	.word	0x40012c00

08000a74 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08c      	sub	sp, #48	; 0x30
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a7a:	f107 030c 	add.w	r3, r7, #12
 8000a7e:	2224      	movs	r2, #36	; 0x24
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f004 fd1a 	bl	80054bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a88:	463b      	mov	r3, r7
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a92:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <MX_TIM2_Init+0xa4>)
 8000a94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a9a:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <MX_TIM2_Init+0xa4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa0:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <MX_TIM2_Init+0xa4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <MX_TIM2_Init+0xa4>)
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aae:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_TIM2_Init+0xa4>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab4:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <MX_TIM2_Init+0xa4>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000aba:	2303      	movs	r3, #3
 8000abc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000aca:	230f      	movs	r3, #15
 8000acc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000ada:	230f      	movs	r3, #15
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480c      	ldr	r0, [pc, #48]	; (8000b18 <MX_TIM2_Init+0xa4>)
 8000ae6:	f002 fcba 	bl	800345e <HAL_TIM_Encoder_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000af0:	f7ff fe52 	bl	8000798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af4:	2300      	movs	r3, #0
 8000af6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000afc:	463b      	mov	r3, r7
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_TIM2_Init+0xa4>)
 8000b02:	f003 facb 	bl	800409c <HAL_TIMEx_MasterConfigSynchronization>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000b0c:	f7ff fe44 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	3730      	adds	r7, #48	; 0x30
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	200004fc 	.word	0x200004fc

08000b1c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08c      	sub	sp, #48	; 0x30
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	2224      	movs	r2, #36	; 0x24
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f004 fcc6 	bl	80054bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b30:	463b      	mov	r3, r7
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b3a:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <MX_TIM3_Init+0xa4>)
 8000b3c:	4a21      	ldr	r2, [pc, #132]	; (8000bc4 <MX_TIM3_Init+0xa8>)
 8000b3e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b40:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <MX_TIM3_Init+0xa4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b46:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <MX_TIM3_Init+0xa4>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b4c:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <MX_TIM3_Init+0xa4>)
 8000b4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b54:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <MX_TIM3_Init+0xa4>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5a:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <MX_TIM3_Init+0xa4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b60:	2303      	movs	r3, #3
 8000b62:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b64:	2300      	movs	r3, #0
 8000b66:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000b70:	230f      	movs	r3, #15
 8000b72:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000b80:	230f      	movs	r3, #15
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b84:	f107 030c 	add.w	r3, r7, #12
 8000b88:	4619      	mov	r1, r3
 8000b8a:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <MX_TIM3_Init+0xa4>)
 8000b8c:	f002 fc67 	bl	800345e <HAL_TIM_Encoder_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000b96:	f7ff fdff 	bl	8000798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <MX_TIM3_Init+0xa4>)
 8000ba8:	f003 fa78 	bl	800409c <HAL_TIMEx_MasterConfigSynchronization>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000bb2:	f7ff fdf1 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	3730      	adds	r7, #48	; 0x30
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000418 	.word	0x20000418
 8000bc4:	40000400 	.word	0x40000400

08000bc8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000bd8:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <MX_TIM6_Init+0x68>)
 8000bda:	4a16      	ldr	r2, [pc, #88]	; (8000c34 <MX_TIM6_Init+0x6c>)
 8000bdc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = Pre_10kHz;
 8000bde:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <MX_TIM6_Init+0x68>)
 8000be0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000be4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be6:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <MX_TIM6_Init+0x68>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = Hz20;
 8000bec:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <MX_TIM6_Init+0x68>)
 8000bee:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000bf2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <MX_TIM6_Init+0x68>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000bfa:	480d      	ldr	r0, [pc, #52]	; (8000c30 <MX_TIM6_Init+0x68>)
 8000bfc:	f002 fb24 	bl	8003248 <HAL_TIM_Base_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000c06:	f7ff fdc7 	bl	8000798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	4619      	mov	r1, r3
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <MX_TIM6_Init+0x68>)
 8000c18:	f003 fa40 	bl	800409c <HAL_TIMEx_MasterConfigSynchronization>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000c22:	f7ff fdb9 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000464 	.word	0x20000464
 8000c34:	40001000 	.word	0x40001000

08000c38 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000c48:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <MX_TIM7_Init+0x68>)
 8000c4a:	4a16      	ldr	r2, [pc, #88]	; (8000ca4 <MX_TIM7_Init+0x6c>)
 8000c4c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = Pre_10kHz;
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_TIM7_Init+0x68>)
 8000c50:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000c54:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c56:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <MX_TIM7_Init+0x68>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = Hz10;
 8000c5c:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <MX_TIM7_Init+0x68>)
 8000c5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c62:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c64:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_TIM7_Init+0x68>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000c6a:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <MX_TIM7_Init+0x68>)
 8000c6c:	f002 faec 	bl	8003248 <HAL_TIM_Base_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000c76:	f7ff fd8f 	bl	8000798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	4619      	mov	r1, r3
 8000c86:	4806      	ldr	r0, [pc, #24]	; (8000ca0 <MX_TIM7_Init+0x68>)
 8000c88:	f003 fa08 	bl	800409c <HAL_TIMEx_MasterConfigSynchronization>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000c92:	f7ff fd81 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000548 	.word	0x20000548
 8000ca4:	40001400 	.word	0x40001400

08000ca8 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b092      	sub	sp, #72	; 0x48
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]
 8000cbe:	615a      	str	r2, [r3, #20]
 8000cc0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	222c      	movs	r2, #44	; 0x2c
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f004 fbf7 	bl	80054bc <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000cce:	4b31      	ldr	r3, [pc, #196]	; (8000d94 <MX_TIM17_Init+0xec>)
 8000cd0:	4a31      	ldr	r2, [pc, #196]	; (8000d98 <MX_TIM17_Init+0xf0>)
 8000cd2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = Pre_20k_360;
 8000cd4:	4b2f      	ldr	r3, [pc, #188]	; (8000d94 <MX_TIM17_Init+0xec>)
 8000cd6:	2209      	movs	r2, #9
 8000cd8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cda:	4b2e      	ldr	r3, [pc, #184]	; (8000d94 <MX_TIM17_Init+0xec>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = Counter_20kHz_360;
 8000ce0:	4b2c      	ldr	r3, [pc, #176]	; (8000d94 <MX_TIM17_Init+0xec>)
 8000ce2:	f240 1267 	movw	r2, #359	; 0x167
 8000ce6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce8:	4b2a      	ldr	r3, [pc, #168]	; (8000d94 <MX_TIM17_Init+0xec>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_TIM17_Init+0xec>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf4:	4b27      	ldr	r3, [pc, #156]	; (8000d94 <MX_TIM17_Init+0xec>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000cfa:	4826      	ldr	r0, [pc, #152]	; (8000d94 <MX_TIM17_Init+0xec>)
 8000cfc:	f002 faa4 	bl	8003248 <HAL_TIM_Base_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000d06:	f7ff fd47 	bl	8000798 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000d0a:	4822      	ldr	r0, [pc, #136]	; (8000d94 <MX_TIM17_Init+0xec>)
 8000d0c:	f002 fb50 	bl	80033b0 <HAL_TIM_PWM_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000d16:	f7ff fd3f 	bl	8000798 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d1a:	2360      	movs	r3, #96	; 0x60
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d22:	2300      	movs	r3, #0
 8000d24:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d26:	2300      	movs	r3, #0
 8000d28:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d32:	2300      	movs	r3, #0
 8000d34:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4815      	ldr	r0, [pc, #84]	; (8000d94 <MX_TIM17_Init+0xec>)
 8000d40:	f002 fd52 	bl	80037e8 <HAL_TIM_PWM_ConfigChannel>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000d4a:	f7ff fd25 	bl	8000798 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d66:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000d70:	463b      	mov	r3, r7
 8000d72:	4619      	mov	r1, r3
 8000d74:	4807      	ldr	r0, [pc, #28]	; (8000d94 <MX_TIM17_Init+0xec>)
 8000d76:	f003 f9ff 	bl	8004178 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000d80:	f7ff fd0a 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000d84:	4803      	ldr	r0, [pc, #12]	; (8000d94 <MX_TIM17_Init+0xec>)
 8000d86:	f000 f8f1 	bl	8000f6c <HAL_TIM_MspPostInit>

}
 8000d8a:	bf00      	nop
 8000d8c:	3748      	adds	r7, #72	; 0x48
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200003cc 	.word	0x200003cc
 8000d98:	40014800 	.word	0x40014800

08000d9c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <HAL_TIM_PWM_MspInit+0x38>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d10b      	bne.n	8000dc6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	4a09      	ldr	r2, [pc, #36]	; (8000dd8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000db4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000db8:	6193      	str	r3, [r2, #24]
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40012c00 	.word	0x40012c00
 8000dd8:	40021000 	.word	0x40021000

08000ddc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08c      	sub	sp, #48	; 0x30
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dfc:	d129      	bne.n	8000e52 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dfe:	4b2e      	ldr	r3, [pc, #184]	; (8000eb8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	4a2d      	ldr	r2, [pc, #180]	; (8000eb8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	61d3      	str	r3, [r2, #28]
 8000e0a:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	61bb      	str	r3, [r7, #24]
 8000e14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	4a27      	ldr	r2, [pc, #156]	; (8000eb8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e20:	6153      	str	r3, [r2, #20]
 8000e22:	4b25      	ldr	r3, [pc, #148]	; (8000eb8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_LT_Pin|ENCODER_B_LT_Pin;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 031c 	add.w	r3, r7, #28
 8000e46:	4619      	mov	r1, r3
 8000e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4c:	f000 fde8 	bl	8001a20 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000e50:	e02d      	b.n	8000eae <HAL_TIM_Encoder_MspInit+0xd2>
  else if(tim_encoderHandle->Instance==TIM3)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a19      	ldr	r2, [pc, #100]	; (8000ebc <HAL_TIM_Encoder_MspInit+0xe0>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d128      	bne.n	8000eae <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e5c:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e5e:	69db      	ldr	r3, [r3, #28]
 8000e60:	4a15      	ldr	r2, [pc, #84]	; (8000eb8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e62:	f043 0302 	orr.w	r3, r3, #2
 8000e66:	61d3      	str	r3, [r2, #28]
 8000e68:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e6a:	69db      	ldr	r3, [r3, #28]
 8000e6c:	f003 0302 	and.w	r3, r3, #2
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e74:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	4a0f      	ldr	r2, [pc, #60]	; (8000eb8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e7e:	6153      	str	r3, [r2, #20]
 8000e80:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_A_PT_Pin|ENCODER_B_PT_Pin;
 8000e8c:	23c0      	movs	r3, #192	; 0xc0
 8000e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eaa:	f000 fdb9 	bl	8001a20 <HAL_GPIO_Init>
}
 8000eae:	bf00      	nop
 8000eb0:	3730      	adds	r7, #48	; 0x30
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40000400 	.word	0x40000400

08000ec0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a23      	ldr	r2, [pc, #140]	; (8000f5c <HAL_TIM_Base_MspInit+0x9c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d114      	bne.n	8000efc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ed2:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <HAL_TIM_Base_MspInit+0xa0>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	4a22      	ldr	r2, [pc, #136]	; (8000f60 <HAL_TIM_Base_MspInit+0xa0>)
 8000ed8:	f043 0310 	orr.w	r3, r3, #16
 8000edc:	61d3      	str	r3, [r2, #28]
 8000ede:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <HAL_TIM_Base_MspInit+0xa0>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	f003 0310 	and.w	r3, r3, #16
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	2036      	movs	r0, #54	; 0x36
 8000ef0:	f000 fb51 	bl	8001596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000ef4:	2036      	movs	r0, #54	; 0x36
 8000ef6:	f000 fb6a 	bl	80015ce <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8000efa:	e02a      	b.n	8000f52 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM7)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a18      	ldr	r2, [pc, #96]	; (8000f64 <HAL_TIM_Base_MspInit+0xa4>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d114      	bne.n	8000f30 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000f06:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_TIM_Base_MspInit+0xa0>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	4a15      	ldr	r2, [pc, #84]	; (8000f60 <HAL_TIM_Base_MspInit+0xa0>)
 8000f0c:	f043 0320 	orr.w	r3, r3, #32
 8000f10:	61d3      	str	r3, [r2, #28]
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <HAL_TIM_Base_MspInit+0xa0>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	f003 0320 	and.w	r3, r3, #32
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	2037      	movs	r0, #55	; 0x37
 8000f24:	f000 fb37 	bl	8001596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8000f28:	2037      	movs	r0, #55	; 0x37
 8000f2a:	f000 fb50 	bl	80015ce <HAL_NVIC_EnableIRQ>
}
 8000f2e:	e010      	b.n	8000f52 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM17)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0c      	ldr	r2, [pc, #48]	; (8000f68 <HAL_TIM_Base_MspInit+0xa8>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d10b      	bne.n	8000f52 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HAL_TIM_Base_MspInit+0xa0>)
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	4a08      	ldr	r2, [pc, #32]	; (8000f60 <HAL_TIM_Base_MspInit+0xa0>)
 8000f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f44:	6193      	str	r3, [r2, #24]
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_TIM_Base_MspInit+0xa0>)
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
}
 8000f52:	bf00      	nop
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40001000 	.word	0x40001000
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40001400 	.word	0x40001400
 8000f68:	40014800 	.word	0x40014800

08000f6c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a2c      	ldr	r2, [pc, #176]	; (800103c <HAL_TIM_MspPostInit+0xd0>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d130      	bne.n	8000ff0 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <HAL_TIM_MspPostInit+0xd4>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a2b      	ldr	r2, [pc, #172]	; (8001040 <HAL_TIM_MspPostInit+0xd4>)
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f98:	6153      	str	r3, [r2, #20]
 8000f9a:	4b29      	ldr	r3, [pc, #164]	; (8001040 <HAL_TIM_MspPostInit+0xd4>)
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM1_LT_Pin|PWM2_PT_Pin|PWM3_LP_Pin;
 8000fa6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000fb8:	2306      	movs	r3, #6
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc6:	f000 fd2b 	bl	8001a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM4_PP_Pin;
 8000fca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8000fdc:	230b      	movs	r3, #11
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM4_PP_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fea:	f000 fd19 	bl	8001a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000fee:	e020      	b.n	8001032 <HAL_TIM_MspPostInit+0xc6>
  else if(timHandle->Instance==TIM17)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a13      	ldr	r2, [pc, #76]	; (8001044 <HAL_TIM_MspPostInit+0xd8>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d11b      	bne.n	8001032 <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <HAL_TIM_MspPostInit+0xd4>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	4a10      	ldr	r2, [pc, #64]	; (8001040 <HAL_TIM_MspPostInit+0xd4>)
 8001000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001004:	6153      	str	r3, [r2, #20]
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <HAL_TIM_MspPostInit+0xd4>)
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM5_SERWO_Pin;
 8001012:	2320      	movs	r3, #32
 8001014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8001022:	230a      	movs	r3, #10
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM5_SERWO_GPIO_Port, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	4806      	ldr	r0, [pc, #24]	; (8001048 <HAL_TIM_MspPostInit+0xdc>)
 800102e:	f000 fcf7 	bl	8001a20 <HAL_GPIO_Init>
}
 8001032:	bf00      	nop
 8001034:	3728      	adds	r7, #40	; 0x28
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40012c00 	.word	0x40012c00
 8001040:	40021000 	.word	0x40021000
 8001044:	40014800 	.word	0x40014800
 8001048:	48000400 	.word	0x48000400

0800104c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_USART1_UART_Init+0x58>)
 8001052:	4a15      	ldr	r2, [pc, #84]	; (80010a8 <MX_USART1_UART_Init+0x5c>)
 8001054:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = UART_SPEED_MCU;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_USART1_UART_Init+0x58>)
 8001058:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800105c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_USART1_UART_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_USART1_UART_Init+0x58>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_USART1_UART_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_USART1_UART_Init+0x58>)
 8001072:	220c      	movs	r2, #12
 8001074:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <MX_USART1_UART_Init+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_USART1_UART_Init+0x58>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <MX_USART1_UART_Init+0x58>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_USART1_UART_Init+0x58>)
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_USART1_UART_Init+0x58>)
 8001090:	f003 f908 	bl	80042a4 <HAL_UART_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800109a:	f7ff fb7d 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000061c 	.word	0x2000061c
 80010a8:	40013800 	.word	0x40013800

080010ac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_USART2_UART_Init+0x58>)
 80010b2:	4a15      	ldr	r2, [pc, #84]	; (8001108 <MX_USART2_UART_Init+0x5c>)
 80010b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = UART_230;
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <MX_USART2_UART_Init+0x58>)
 80010b8:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80010bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <MX_USART2_UART_Init+0x58>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <MX_USART2_UART_Init+0x58>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <MX_USART2_UART_Init+0x58>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <MX_USART2_UART_Init+0x58>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <MX_USART2_UART_Init+0x58>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010dc:	4b09      	ldr	r3, [pc, #36]	; (8001104 <MX_USART2_UART_Init+0x58>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <MX_USART2_UART_Init+0x58>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <MX_USART2_UART_Init+0x58>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_USART2_UART_Init+0x58>)
 80010f0:	f003 f8d8 	bl	80042a4 <HAL_UART_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010fa:	f7ff fb4d 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200006a0 	.word	0x200006a0
 8001108:	40004400 	.word	0x40004400

0800110c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08c      	sub	sp, #48	; 0x30
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a5d      	ldr	r2, [pc, #372]	; (80012a0 <HAL_UART_MspInit+0x194>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d157      	bne.n	80011de <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800112e:	4b5d      	ldr	r3, [pc, #372]	; (80012a4 <HAL_UART_MspInit+0x198>)
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	4a5c      	ldr	r2, [pc, #368]	; (80012a4 <HAL_UART_MspInit+0x198>)
 8001134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001138:	6193      	str	r3, [r2, #24]
 800113a:	4b5a      	ldr	r3, [pc, #360]	; (80012a4 <HAL_UART_MspInit+0x198>)
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001142:	61bb      	str	r3, [r7, #24]
 8001144:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001146:	4b57      	ldr	r3, [pc, #348]	; (80012a4 <HAL_UART_MspInit+0x198>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a56      	ldr	r2, [pc, #344]	; (80012a4 <HAL_UART_MspInit+0x198>)
 800114c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001150:	6153      	str	r3, [r2, #20]
 8001152:	4b54      	ldr	r3, [pc, #336]	; (80012a4 <HAL_UART_MspInit+0x198>)
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = COMM_TO_MASTER_UART_TX_Pin|COMM_TO_MASTER_UART_RX_Pin;
 800115e:	23c0      	movs	r3, #192	; 0xc0
 8001160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800116e:	2307      	movs	r3, #7
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	4619      	mov	r1, r3
 8001178:	484b      	ldr	r0, [pc, #300]	; (80012a8 <HAL_UART_MspInit+0x19c>)
 800117a:	f000 fc51 	bl	8001a20 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800117e:	4b4b      	ldr	r3, [pc, #300]	; (80012ac <HAL_UART_MspInit+0x1a0>)
 8001180:	4a4b      	ldr	r2, [pc, #300]	; (80012b0 <HAL_UART_MspInit+0x1a4>)
 8001182:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001184:	4b49      	ldr	r3, [pc, #292]	; (80012ac <HAL_UART_MspInit+0x1a0>)
 8001186:	2200      	movs	r2, #0
 8001188:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800118a:	4b48      	ldr	r3, [pc, #288]	; (80012ac <HAL_UART_MspInit+0x1a0>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001190:	4b46      	ldr	r3, [pc, #280]	; (80012ac <HAL_UART_MspInit+0x1a0>)
 8001192:	2280      	movs	r2, #128	; 0x80
 8001194:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001196:	4b45      	ldr	r3, [pc, #276]	; (80012ac <HAL_UART_MspInit+0x1a0>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800119c:	4b43      	ldr	r3, [pc, #268]	; (80012ac <HAL_UART_MspInit+0x1a0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80011a2:	4b42      	ldr	r3, [pc, #264]	; (80012ac <HAL_UART_MspInit+0x1a0>)
 80011a4:	2220      	movs	r2, #32
 80011a6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80011a8:	4b40      	ldr	r3, [pc, #256]	; (80012ac <HAL_UART_MspInit+0x1a0>)
 80011aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80011b0:	483e      	ldr	r0, [pc, #248]	; (80012ac <HAL_UART_MspInit+0x1a0>)
 80011b2:	f000 fa26 	bl	8001602 <HAL_DMA_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 80011bc:	f7ff faec 	bl	8000798 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a3a      	ldr	r2, [pc, #232]	; (80012ac <HAL_UART_MspInit+0x1a0>)
 80011c4:	671a      	str	r2, [r3, #112]	; 0x70
 80011c6:	4a39      	ldr	r2, [pc, #228]	; (80012ac <HAL_UART_MspInit+0x1a0>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2100      	movs	r1, #0
 80011d0:	2025      	movs	r0, #37	; 0x25
 80011d2:	f000 f9e0 	bl	8001596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011d6:	2025      	movs	r0, #37	; 0x25
 80011d8:	f000 f9f9 	bl	80015ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011dc:	e05c      	b.n	8001298 <HAL_UART_MspInit+0x18c>
  else if(uartHandle->Instance==USART2)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a34      	ldr	r2, [pc, #208]	; (80012b4 <HAL_UART_MspInit+0x1a8>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d157      	bne.n	8001298 <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011e8:	4b2e      	ldr	r3, [pc, #184]	; (80012a4 <HAL_UART_MspInit+0x198>)
 80011ea:	69db      	ldr	r3, [r3, #28]
 80011ec:	4a2d      	ldr	r2, [pc, #180]	; (80012a4 <HAL_UART_MspInit+0x198>)
 80011ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f2:	61d3      	str	r3, [r2, #28]
 80011f4:	4b2b      	ldr	r3, [pc, #172]	; (80012a4 <HAL_UART_MspInit+0x198>)
 80011f6:	69db      	ldr	r3, [r3, #28]
 80011f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001200:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <HAL_UART_MspInit+0x198>)
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	4a27      	ldr	r2, [pc, #156]	; (80012a4 <HAL_UART_MspInit+0x198>)
 8001206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800120a:	6153      	str	r3, [r2, #20]
 800120c:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <HAL_UART_MspInit+0x198>)
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PC_UART_TX_Pin|PC_UART_RX_Pin;
 8001218:	230c      	movs	r3, #12
 800121a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001228:	2307      	movs	r3, #7
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	4619      	mov	r1, r3
 8001232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001236:	f000 fbf3 	bl	8001a20 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800123a:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <HAL_UART_MspInit+0x1ac>)
 800123c:	4a1f      	ldr	r2, [pc, #124]	; (80012bc <HAL_UART_MspInit+0x1b0>)
 800123e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001240:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <HAL_UART_MspInit+0x1ac>)
 8001242:	2200      	movs	r2, #0
 8001244:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001246:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <HAL_UART_MspInit+0x1ac>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <HAL_UART_MspInit+0x1ac>)
 800124e:	2280      	movs	r2, #128	; 0x80
 8001250:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001252:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <HAL_UART_MspInit+0x1ac>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <HAL_UART_MspInit+0x1ac>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800125e:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <HAL_UART_MspInit+0x1ac>)
 8001260:	2220      	movs	r2, #32
 8001262:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <HAL_UART_MspInit+0x1ac>)
 8001266:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800126a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800126c:	4812      	ldr	r0, [pc, #72]	; (80012b8 <HAL_UART_MspInit+0x1ac>)
 800126e:	f000 f9c8 	bl	8001602 <HAL_DMA_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <HAL_UART_MspInit+0x170>
      Error_Handler();
 8001278:	f7ff fa8e 	bl	8000798 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <HAL_UART_MspInit+0x1ac>)
 8001280:	671a      	str	r2, [r3, #112]	; 0x70
 8001282:	4a0d      	ldr	r2, [pc, #52]	; (80012b8 <HAL_UART_MspInit+0x1ac>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	2100      	movs	r1, #0
 800128c:	2026      	movs	r0, #38	; 0x26
 800128e:	f000 f982 	bl	8001596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001292:	2026      	movs	r0, #38	; 0x26
 8001294:	f000 f99b 	bl	80015ce <HAL_NVIC_EnableIRQ>
}
 8001298:	bf00      	nop
 800129a:	3730      	adds	r7, #48	; 0x30
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40013800 	.word	0x40013800
 80012a4:	40021000 	.word	0x40021000
 80012a8:	48000400 	.word	0x48000400
 80012ac:	200005d8 	.word	0x200005d8
 80012b0:	40020058 	.word	0x40020058
 80012b4:	40004400 	.word	0x40004400
 80012b8:	20000594 	.word	0x20000594
 80012bc:	4002006c 	.word	0x4002006c

080012c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c4:	480d      	ldr	r0, [pc, #52]	; (80012fc <LoopForever+0x6>)
  ldr r1, =_edata
 80012c6:	490e      	ldr	r1, [pc, #56]	; (8001300 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012c8:	4a0e      	ldr	r2, [pc, #56]	; (8001304 <LoopForever+0xe>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012cc:	e002      	b.n	80012d4 <LoopCopyDataInit>

080012ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d2:	3304      	adds	r3, #4

080012d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d8:	d3f9      	bcc.n	80012ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012da:	4a0b      	ldr	r2, [pc, #44]	; (8001308 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012dc:	4c0b      	ldr	r4, [pc, #44]	; (800130c <LoopForever+0x16>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e0:	e001      	b.n	80012e6 <LoopFillZerobss>

080012e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e4:	3204      	adds	r2, #4

080012e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e8:	d3fb      	bcc.n	80012e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012ea:	f7ff fafd 	bl	80008e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ee:	f004 f8c1 	bl	8005474 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012f2:	f7ff f8ef 	bl	80004d4 <main>

080012f6 <LoopForever>:

LoopForever:
    b LoopForever
 80012f6:	e7fe      	b.n	80012f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012f8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80012fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001300:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001304:	08005524 	.word	0x08005524
  ldr r2, =_sbss
 8001308:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800130c:	20000728 	.word	0x20000728

08001310 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001310:	e7fe      	b.n	8001310 <ADC1_2_IRQHandler>
	...

08001314 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <HAL_Init+0x28>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a07      	ldr	r2, [pc, #28]	; (800133c <HAL_Init+0x28>)
 800131e:	f043 0310 	orr.w	r3, r3, #16
 8001322:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001324:	2003      	movs	r0, #3
 8001326:	f000 f92b 	bl	8001580 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800132a:	2000      	movs	r0, #0
 800132c:	f000 f808 	bl	8001340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001330:	f7ff fa3a 	bl	80007a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40022000 	.word	0x40022000

08001340 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_InitTick+0x54>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_InitTick+0x58>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	4619      	mov	r1, r3
 8001352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001356:	fbb3 f3f1 	udiv	r3, r3, r1
 800135a:	fbb2 f3f3 	udiv	r3, r2, r3
 800135e:	4618      	mov	r0, r3
 8001360:	f000 f943 	bl	80015ea <HAL_SYSTICK_Config>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e00e      	b.n	800138c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b0f      	cmp	r3, #15
 8001372:	d80a      	bhi.n	800138a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001374:	2200      	movs	r2, #0
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	f000 f90b 	bl	8001596 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001380:	4a06      	ldr	r2, [pc, #24]	; (800139c <HAL_InitTick+0x5c>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	e000      	b.n	800138c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000004 	.word	0x20000004
 8001398:	2000000c 	.word	0x2000000c
 800139c:	20000008 	.word	0x20000008

080013a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_IncTick+0x20>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_IncTick+0x24>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4413      	add	r3, r2
 80013b0:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <HAL_IncTick+0x24>)
 80013b2:	6013      	str	r3, [r2, #0]
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	2000000c 	.word	0x2000000c
 80013c4:	20000724 	.word	0x20000724

080013c8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return uwTick;  
 80013cc:	4b03      	ldr	r3, [pc, #12]	; (80013dc <HAL_GetTick+0x14>)
 80013ce:	681b      	ldr	r3, [r3, #0]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000724 	.word	0x20000724

080013e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <__NVIC_SetPriorityGrouping+0x44>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013fc:	4013      	ands	r3, r2
 80013fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800140c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001412:	4a04      	ldr	r2, [pc, #16]	; (8001424 <__NVIC_SetPriorityGrouping+0x44>)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	60d3      	str	r3, [r2, #12]
}
 8001418:	bf00      	nop
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <__NVIC_GetPriorityGrouping+0x18>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	0a1b      	lsrs	r3, r3, #8
 8001432:	f003 0307 	and.w	r3, r3, #7
}
 8001436:	4618      	mov	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	2b00      	cmp	r3, #0
 8001454:	db0b      	blt.n	800146e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	f003 021f 	and.w	r2, r3, #31
 800145c:	4907      	ldr	r1, [pc, #28]	; (800147c <__NVIC_EnableIRQ+0x38>)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	095b      	lsrs	r3, r3, #5
 8001464:	2001      	movs	r0, #1
 8001466:	fa00 f202 	lsl.w	r2, r0, r2
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000e100 	.word	0xe000e100

08001480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	6039      	str	r1, [r7, #0]
 800148a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	2b00      	cmp	r3, #0
 8001492:	db0a      	blt.n	80014aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	b2da      	uxtb	r2, r3
 8001498:	490c      	ldr	r1, [pc, #48]	; (80014cc <__NVIC_SetPriority+0x4c>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	0112      	lsls	r2, r2, #4
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	440b      	add	r3, r1
 80014a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a8:	e00a      	b.n	80014c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4908      	ldr	r1, [pc, #32]	; (80014d0 <__NVIC_SetPriority+0x50>)
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	3b04      	subs	r3, #4
 80014b8:	0112      	lsls	r2, r2, #4
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	440b      	add	r3, r1
 80014be:	761a      	strb	r2, [r3, #24]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000e100 	.word	0xe000e100
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f1c3 0307 	rsb	r3, r3, #7
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	bf28      	it	cs
 80014f2:	2304      	movcs	r3, #4
 80014f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3304      	adds	r3, #4
 80014fa:	2b06      	cmp	r3, #6
 80014fc:	d902      	bls.n	8001504 <NVIC_EncodePriority+0x30>
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3b03      	subs	r3, #3
 8001502:	e000      	b.n	8001506 <NVIC_EncodePriority+0x32>
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	f04f 32ff 	mov.w	r2, #4294967295
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	401a      	ands	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800151c:	f04f 31ff 	mov.w	r1, #4294967295
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	43d9      	mvns	r1, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	4313      	orrs	r3, r2
         );
}
 800152e:	4618      	mov	r0, r3
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800154c:	d301      	bcc.n	8001552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154e:	2301      	movs	r3, #1
 8001550:	e00f      	b.n	8001572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <SysTick_Config+0x40>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3b01      	subs	r3, #1
 8001558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155a:	210f      	movs	r1, #15
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f7ff ff8e 	bl	8001480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <SysTick_Config+0x40>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <SysTick_Config+0x40>)
 800156c:	2207      	movs	r2, #7
 800156e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	e000e010 	.word	0xe000e010

08001580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff29 	bl	80013e0 <__NVIC_SetPriorityGrouping>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b086      	sub	sp, #24
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a8:	f7ff ff3e 	bl	8001428 <__NVIC_GetPriorityGrouping>
 80015ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	68b9      	ldr	r1, [r7, #8]
 80015b2:	6978      	ldr	r0, [r7, #20]
 80015b4:	f7ff ff8e 	bl	80014d4 <NVIC_EncodePriority>
 80015b8:	4602      	mov	r2, r0
 80015ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff5d 	bl	8001480 <__NVIC_SetPriority>
}
 80015c6:	bf00      	nop
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff31 	bl	8001444 <__NVIC_EnableIRQ>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff ffa2 	bl	800153c <SysTick_Config>
 80015f8:	4603      	mov	r3, r0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001602:	b580      	push	{r7, lr}
 8001604:	b084      	sub	sp, #16
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e037      	b.n	8001688 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2202      	movs	r2, #2
 800161c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800162e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001632:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800163c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001648:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001654:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	4313      	orrs	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f9b8 	bl	80019e0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}  
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d101      	bne.n	80016b0 <HAL_DMA_Start_IT+0x20>
 80016ac:	2302      	movs	r3, #2
 80016ae:	e04a      	b.n	8001746 <HAL_DMA_Start_IT+0xb6>
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d13a      	bne.n	8001738 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2202      	movs	r2, #2
 80016c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2200      	movs	r2, #0
 80016ce:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0201 	bic.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f000 f94b 	bl	8001982 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d008      	beq.n	8001706 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 020e 	orr.w	r2, r2, #14
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	e00f      	b.n	8001726 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f042 020a 	orr.w	r2, r2, #10
 8001714:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0204 	bic.w	r2, r2, #4
 8001724:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f042 0201 	orr.w	r2, r2, #1
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	e005      	b.n	8001744 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001740:	2302      	movs	r3, #2
 8001742:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001744:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800175c:	2b02      	cmp	r3, #2
 800175e:	d008      	beq.n	8001772 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2204      	movs	r2, #4
 8001764:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e020      	b.n	80017b4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 020e 	bic.w	r2, r2, #14
 8001780:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 0201 	bic.w	r2, r2, #1
 8001790:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800179a:	2101      	movs	r1, #1
 800179c:	fa01 f202 	lsl.w	r2, r1, r2
 80017a0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d005      	beq.n	80017e2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2204      	movs	r2, #4
 80017da:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	73fb      	strb	r3, [r7, #15]
 80017e0:	e027      	b.n	8001832 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 020e 	bic.w	r2, r2, #14
 80017f0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 0201 	bic.w	r2, r2, #1
 8001800:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800180a:	2101      	movs	r1, #1
 800180c:	fa01 f202 	lsl.w	r2, r1, r2
 8001810:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	4798      	blx	r3
    } 
  }
  return status;
 8001832:	7bfb      	ldrb	r3, [r7, #15]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	2204      	movs	r2, #4
 800185a:	409a      	lsls	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4013      	ands	r3, r2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d024      	beq.n	80018ae <HAL_DMA_IRQHandler+0x72>
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	2b00      	cmp	r3, #0
 800186c:	d01f      	beq.n	80018ae <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0320 	and.w	r3, r3, #32
 8001878:	2b00      	cmp	r3, #0
 800187a:	d107      	bne.n	800188c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f022 0204 	bic.w	r2, r2, #4
 800188a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001894:	2104      	movs	r1, #4
 8001896:	fa01 f202 	lsl.w	r2, r1, r2
 800189a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d06a      	beq.n	800197a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80018ac:	e065      	b.n	800197a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	2202      	movs	r2, #2
 80018b4:	409a      	lsls	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d02c      	beq.n	8001918 <HAL_DMA_IRQHandler+0xdc>
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d027      	beq.n	8001918 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0320 	and.w	r3, r3, #32
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10b      	bne.n	80018ee <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 020a 	bic.w	r2, r2, #10
 80018e4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f6:	2102      	movs	r1, #2
 80018f8:	fa01 f202 	lsl.w	r2, r1, r2
 80018fc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190a:	2b00      	cmp	r3, #0
 800190c:	d035      	beq.n	800197a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001916:	e030      	b.n	800197a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	2208      	movs	r2, #8
 800191e:	409a      	lsls	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4013      	ands	r3, r2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d028      	beq.n	800197a <HAL_DMA_IRQHandler+0x13e>
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d023      	beq.n	800197a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 020e 	bic.w	r2, r2, #14
 8001940:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800194a:	2101      	movs	r1, #1
 800194c:	fa01 f202 	lsl.w	r2, r1, r2
 8001950:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2201      	movs	r2, #1
 8001956:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	2b00      	cmp	r3, #0
 800196e:	d004      	beq.n	800197a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	4798      	blx	r3
    }
  }
}  
 8001978:	e7ff      	b.n	800197a <HAL_DMA_IRQHandler+0x13e>
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001982:	b480      	push	{r7}
 8001984:	b085      	sub	sp, #20
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001998:	2101      	movs	r1, #1
 800199a:	fa01 f202 	lsl.w	r2, r1, r2
 800199e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b10      	cmp	r3, #16
 80019ae:	d108      	bne.n	80019c2 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68ba      	ldr	r2, [r7, #8]
 80019be:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019c0:	e007      	b.n	80019d2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	60da      	str	r2, [r3, #12]
}
 80019d2:	bf00      	nop
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <DMA_CalcBaseAndBitshift+0x34>)
 80019f0:	4413      	add	r3, r2
 80019f2:	4a09      	ldr	r2, [pc, #36]	; (8001a18 <DMA_CalcBaseAndBitshift+0x38>)
 80019f4:	fba2 2303 	umull	r2, r3, r2, r3
 80019f8:	091b      	lsrs	r3, r3, #4
 80019fa:	009a      	lsls	r2, r3, #2
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a06      	ldr	r2, [pc, #24]	; (8001a1c <DMA_CalcBaseAndBitshift+0x3c>)
 8001a04:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	bffdfff8 	.word	0xbffdfff8
 8001a18:	cccccccd 	.word	0xcccccccd
 8001a1c:	40020000 	.word	0x40020000

08001a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a2e:	e14e      	b.n	8001cce <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	2101      	movs	r1, #1
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 8140 	beq.w	8001cc8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d005      	beq.n	8001a60 <HAL_GPIO_Init+0x40>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d130      	bne.n	8001ac2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	2203      	movs	r2, #3
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4013      	ands	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	68da      	ldr	r2, [r3, #12]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a96:	2201      	movs	r2, #1
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	091b      	lsrs	r3, r3, #4
 8001aac:	f003 0201 	and.w	r2, r3, #1
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	d017      	beq.n	8001afe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	2203      	movs	r2, #3
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d123      	bne.n	8001b52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	08da      	lsrs	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3208      	adds	r2, #8
 8001b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	220f      	movs	r2, #15
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	691a      	ldr	r2, [r3, #16]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	08da      	lsrs	r2, r3, #3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3208      	adds	r2, #8
 8001b4c:	6939      	ldr	r1, [r7, #16]
 8001b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 0203 	and.w	r2, r3, #3
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 809a 	beq.w	8001cc8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b94:	4b55      	ldr	r3, [pc, #340]	; (8001cec <HAL_GPIO_Init+0x2cc>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	4a54      	ldr	r2, [pc, #336]	; (8001cec <HAL_GPIO_Init+0x2cc>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6193      	str	r3, [r2, #24]
 8001ba0:	4b52      	ldr	r3, [pc, #328]	; (8001cec <HAL_GPIO_Init+0x2cc>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bac:	4a50      	ldr	r2, [pc, #320]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	089b      	lsrs	r3, r3, #2
 8001bb2:	3302      	adds	r3, #2
 8001bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	220f      	movs	r2, #15
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bd6:	d013      	beq.n	8001c00 <HAL_GPIO_Init+0x1e0>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a46      	ldr	r2, [pc, #280]	; (8001cf4 <HAL_GPIO_Init+0x2d4>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d00d      	beq.n	8001bfc <HAL_GPIO_Init+0x1dc>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a45      	ldr	r2, [pc, #276]	; (8001cf8 <HAL_GPIO_Init+0x2d8>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d007      	beq.n	8001bf8 <HAL_GPIO_Init+0x1d8>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a44      	ldr	r2, [pc, #272]	; (8001cfc <HAL_GPIO_Init+0x2dc>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d101      	bne.n	8001bf4 <HAL_GPIO_Init+0x1d4>
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e006      	b.n	8001c02 <HAL_GPIO_Init+0x1e2>
 8001bf4:	2305      	movs	r3, #5
 8001bf6:	e004      	b.n	8001c02 <HAL_GPIO_Init+0x1e2>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e002      	b.n	8001c02 <HAL_GPIO_Init+0x1e2>
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e000      	b.n	8001c02 <HAL_GPIO_Init+0x1e2>
 8001c00:	2300      	movs	r3, #0
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	f002 0203 	and.w	r2, r2, #3
 8001c08:	0092      	lsls	r2, r2, #2
 8001c0a:	4093      	lsls	r3, r2
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c12:	4937      	ldr	r1, [pc, #220]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	3302      	adds	r3, #2
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c20:	4b37      	ldr	r3, [pc, #220]	; (8001d00 <HAL_GPIO_Init+0x2e0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c44:	4a2e      	ldr	r2, [pc, #184]	; (8001d00 <HAL_GPIO_Init+0x2e0>)
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c4a:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <HAL_GPIO_Init+0x2e0>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c6e:	4a24      	ldr	r2, [pc, #144]	; (8001d00 <HAL_GPIO_Init+0x2e0>)
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c74:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <HAL_GPIO_Init+0x2e0>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c98:	4a19      	ldr	r2, [pc, #100]	; (8001d00 <HAL_GPIO_Init+0x2e0>)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c9e:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <HAL_GPIO_Init+0x2e0>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cc2:	4a0f      	ldr	r2, [pc, #60]	; (8001d00 <HAL_GPIO_Init+0x2e0>)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f47f aea9 	bne.w	8001a30 <HAL_GPIO_Init+0x10>
  }
}
 8001cde:	bf00      	nop
 8001ce0:	bf00      	nop
 8001ce2:	371c      	adds	r7, #28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40010000 	.word	0x40010000
 8001cf4:	48000400 	.word	0x48000400
 8001cf8:	48000800 	.word	0x48000800
 8001cfc:	48000c00 	.word	0x48000c00
 8001d00:	40010400 	.word	0x40010400

08001d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	807b      	strh	r3, [r7, #2]
 8001d10:	4613      	mov	r3, r2
 8001d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d14:	787b      	ldrb	r3, [r7, #1]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d1a:	887a      	ldrh	r2, [r7, #2]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d20:	e002      	b.n	8001d28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d22:	887a      	ldrh	r2, [r7, #2]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d3e:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d40:	695a      	ldr	r2, [r3, #20]
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	4013      	ands	r3, r2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d006      	beq.n	8001d58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d4a:	4a05      	ldr	r2, [pc, #20]	; (8001d60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d4c:	88fb      	ldrh	r3, [r7, #6]
 8001d4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d50:	88fb      	ldrh	r3, [r7, #6]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 f806 	bl	8001d64 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40010400 	.word	0x40010400

08001d64 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	1d3b      	adds	r3, r7, #4
 8001d86:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d88:	1d3b      	adds	r3, r7, #4
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d102      	bne.n	8001d96 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	f000 bef4 	b.w	8002b7e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 816a 	beq.w	800207a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001da6:	4bb3      	ldr	r3, [pc, #716]	; (8002074 <HAL_RCC_OscConfig+0x2f8>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d00c      	beq.n	8001dcc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001db2:	4bb0      	ldr	r3, [pc, #704]	; (8002074 <HAL_RCC_OscConfig+0x2f8>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d159      	bne.n	8001e72 <HAL_RCC_OscConfig+0xf6>
 8001dbe:	4bad      	ldr	r3, [pc, #692]	; (8002074 <HAL_RCC_OscConfig+0x2f8>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dca:	d152      	bne.n	8001e72 <HAL_RCC_OscConfig+0xf6>
 8001dcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dd0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001de0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de4:	fab3 f383 	clz	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	095b      	lsrs	r3, r3, #5
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d102      	bne.n	8001dfe <HAL_RCC_OscConfig+0x82>
 8001df8:	4b9e      	ldr	r3, [pc, #632]	; (8002074 <HAL_RCC_OscConfig+0x2f8>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	e015      	b.n	8001e2a <HAL_RCC_OscConfig+0xae>
 8001dfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e02:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001e0a:	fa93 f3a3 	rbit	r3, r3
 8001e0e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001e12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e16:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001e1a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001e1e:	fa93 f3a3 	rbit	r3, r3
 8001e22:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001e26:	4b93      	ldr	r3, [pc, #588]	; (8002074 <HAL_RCC_OscConfig+0x2f8>)
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e2e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001e32:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001e36:	fa92 f2a2 	rbit	r2, r2
 8001e3a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001e3e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001e42:	fab2 f282 	clz	r2, r2
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	f042 0220 	orr.w	r2, r2, #32
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	f002 021f 	and.w	r2, r2, #31
 8001e52:	2101      	movs	r1, #1
 8001e54:	fa01 f202 	lsl.w	r2, r1, r2
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 810c 	beq.w	8002078 <HAL_RCC_OscConfig+0x2fc>
 8001e60:	1d3b      	adds	r3, r7, #4
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f040 8106 	bne.w	8002078 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	f000 be86 	b.w	8002b7e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e7c:	d106      	bne.n	8001e8c <HAL_RCC_OscConfig+0x110>
 8001e7e:	4b7d      	ldr	r3, [pc, #500]	; (8002074 <HAL_RCC_OscConfig+0x2f8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a7c      	ldr	r2, [pc, #496]	; (8002074 <HAL_RCC_OscConfig+0x2f8>)
 8001e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	e030      	b.n	8001eee <HAL_RCC_OscConfig+0x172>
 8001e8c:	1d3b      	adds	r3, r7, #4
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10c      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x134>
 8001e96:	4b77      	ldr	r3, [pc, #476]	; (8002074 <HAL_RCC_OscConfig+0x2f8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a76      	ldr	r2, [pc, #472]	; (8002074 <HAL_RCC_OscConfig+0x2f8>)
 8001e9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	4b74      	ldr	r3, [pc, #464]	; (8002074 <HAL_RCC_OscConfig+0x2f8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a73      	ldr	r2, [pc, #460]	; (8002074 <HAL_RCC_OscConfig+0x2f8>)
 8001ea8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	e01e      	b.n	8001eee <HAL_RCC_OscConfig+0x172>
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eba:	d10c      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x15a>
 8001ebc:	4b6d      	ldr	r3, [pc, #436]	; (8002074 <HAL_RCC_OscConfig+0x2f8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a6c      	ldr	r2, [pc, #432]	; (8002074 <HAL_RCC_OscConfig+0x2f8>)
 8001ec2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	4b6a      	ldr	r3, [pc, #424]	; (8002074 <HAL_RCC_OscConfig+0x2f8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a69      	ldr	r2, [pc, #420]	; (8002074 <HAL_RCC_OscConfig+0x2f8>)
 8001ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	e00b      	b.n	8001eee <HAL_RCC_OscConfig+0x172>
 8001ed6:	4b67      	ldr	r3, [pc, #412]	; (8002074 <HAL_RCC_OscConfig+0x2f8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a66      	ldr	r2, [pc, #408]	; (8002074 <HAL_RCC_OscConfig+0x2f8>)
 8001edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	4b64      	ldr	r3, [pc, #400]	; (8002074 <HAL_RCC_OscConfig+0x2f8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a63      	ldr	r2, [pc, #396]	; (8002074 <HAL_RCC_OscConfig+0x2f8>)
 8001ee8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eec:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eee:	4b61      	ldr	r3, [pc, #388]	; (8002074 <HAL_RCC_OscConfig+0x2f8>)
 8001ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef2:	f023 020f 	bic.w	r2, r3, #15
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	495d      	ldr	r1, [pc, #372]	; (8002074 <HAL_RCC_OscConfig+0x2f8>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f02:	1d3b      	adds	r3, r7, #4
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d059      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0c:	f7ff fa5c 	bl	80013c8 <HAL_GetTick>
 8001f10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f14:	e00a      	b.n	8001f2c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f16:	f7ff fa57 	bl	80013c8 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b64      	cmp	r3, #100	; 0x64
 8001f24:	d902      	bls.n	8001f2c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	f000 be29 	b.w	8002b7e <HAL_RCC_OscConfig+0xe02>
 8001f2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f30:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f34:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001f38:	fa93 f3a3 	rbit	r3, r3
 8001f3c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001f40:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f44:	fab3 f383 	clz	r3, r3
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d102      	bne.n	8001f5e <HAL_RCC_OscConfig+0x1e2>
 8001f58:	4b46      	ldr	r3, [pc, #280]	; (8002074 <HAL_RCC_OscConfig+0x2f8>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	e015      	b.n	8001f8a <HAL_RCC_OscConfig+0x20e>
 8001f5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f62:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f66:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001f72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f76:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001f7a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001f7e:	fa93 f3a3 	rbit	r3, r3
 8001f82:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001f86:	4b3b      	ldr	r3, [pc, #236]	; (8002074 <HAL_RCC_OscConfig+0x2f8>)
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f8e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001f92:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001f96:	fa92 f2a2 	rbit	r2, r2
 8001f9a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001f9e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001fa2:	fab2 f282 	clz	r2, r2
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	f042 0220 	orr.w	r2, r2, #32
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	f002 021f 	and.w	r2, r2, #31
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb8:	4013      	ands	r3, r2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0ab      	beq.n	8001f16 <HAL_RCC_OscConfig+0x19a>
 8001fbe:	e05c      	b.n	800207a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7ff fa02 	bl	80013c8 <HAL_GetTick>
 8001fc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fca:	f7ff f9fd 	bl	80013c8 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b64      	cmp	r3, #100	; 0x64
 8001fd8:	d902      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	f000 bdcf 	b.w	8002b7e <HAL_RCC_OscConfig+0xe02>
 8001fe0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fe4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001fec:	fa93 f3a3 	rbit	r3, r3
 8001ff0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001ff4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff8:	fab3 f383 	clz	r3, r3
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	095b      	lsrs	r3, r3, #5
 8002000:	b2db      	uxtb	r3, r3
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b01      	cmp	r3, #1
 800200a:	d102      	bne.n	8002012 <HAL_RCC_OscConfig+0x296>
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_RCC_OscConfig+0x2f8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	e015      	b.n	800203e <HAL_RCC_OscConfig+0x2c2>
 8002012:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002016:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800201e:	fa93 f3a3 	rbit	r3, r3
 8002022:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002026:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800202a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800202e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <HAL_RCC_OscConfig+0x2f8>)
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002042:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002046:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800204a:	fa92 f2a2 	rbit	r2, r2
 800204e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002052:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002056:	fab2 f282 	clz	r2, r2
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	f042 0220 	orr.w	r2, r2, #32
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	f002 021f 	and.w	r2, r2, #31
 8002066:	2101      	movs	r1, #1
 8002068:	fa01 f202 	lsl.w	r2, r1, r2
 800206c:	4013      	ands	r3, r2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1ab      	bne.n	8001fca <HAL_RCC_OscConfig+0x24e>
 8002072:	e002      	b.n	800207a <HAL_RCC_OscConfig+0x2fe>
 8002074:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 816f 	beq.w	8002368 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800208a:	4bd0      	ldr	r3, [pc, #832]	; (80023cc <HAL_RCC_OscConfig+0x650>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00b      	beq.n	80020ae <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002096:	4bcd      	ldr	r3, [pc, #820]	; (80023cc <HAL_RCC_OscConfig+0x650>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d16c      	bne.n	800217c <HAL_RCC_OscConfig+0x400>
 80020a2:	4bca      	ldr	r3, [pc, #808]	; (80023cc <HAL_RCC_OscConfig+0x650>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d166      	bne.n	800217c <HAL_RCC_OscConfig+0x400>
 80020ae:	2302      	movs	r3, #2
 80020b0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80020b8:	fa93 f3a3 	rbit	r3, r3
 80020bc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80020c0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c4:	fab3 f383 	clz	r3, r3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d102      	bne.n	80020de <HAL_RCC_OscConfig+0x362>
 80020d8:	4bbc      	ldr	r3, [pc, #752]	; (80023cc <HAL_RCC_OscConfig+0x650>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	e013      	b.n	8002106 <HAL_RCC_OscConfig+0x38a>
 80020de:	2302      	movs	r3, #2
 80020e0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80020e8:	fa93 f3a3 	rbit	r3, r3
 80020ec:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80020f0:	2302      	movs	r3, #2
 80020f2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80020f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002102:	4bb2      	ldr	r3, [pc, #712]	; (80023cc <HAL_RCC_OscConfig+0x650>)
 8002104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002106:	2202      	movs	r2, #2
 8002108:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800210c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002110:	fa92 f2a2 	rbit	r2, r2
 8002114:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002118:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800211c:	fab2 f282 	clz	r2, r2
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	f042 0220 	orr.w	r2, r2, #32
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	f002 021f 	and.w	r2, r2, #31
 800212c:	2101      	movs	r1, #1
 800212e:	fa01 f202 	lsl.w	r2, r1, r2
 8002132:	4013      	ands	r3, r2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d007      	beq.n	8002148 <HAL_RCC_OscConfig+0x3cc>
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d002      	beq.n	8002148 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	f000 bd1b 	b.w	8002b7e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002148:	4ba0      	ldr	r3, [pc, #640]	; (80023cc <HAL_RCC_OscConfig+0x650>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002150:	1d3b      	adds	r3, r7, #4
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	21f8      	movs	r1, #248	; 0xf8
 8002158:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002160:	fa91 f1a1 	rbit	r1, r1
 8002164:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002168:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800216c:	fab1 f181 	clz	r1, r1
 8002170:	b2c9      	uxtb	r1, r1
 8002172:	408b      	lsls	r3, r1
 8002174:	4995      	ldr	r1, [pc, #596]	; (80023cc <HAL_RCC_OscConfig+0x650>)
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217a:	e0f5      	b.n	8002368 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800217c:	1d3b      	adds	r3, r7, #4
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 8085 	beq.w	8002292 <HAL_RCC_OscConfig+0x516>
 8002188:	2301      	movs	r3, #1
 800218a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002192:	fa93 f3a3 	rbit	r3, r3
 8002196:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800219a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800219e:	fab3 f383 	clz	r3, r3
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	461a      	mov	r2, r3
 80021b0:	2301      	movs	r3, #1
 80021b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b4:	f7ff f908 	bl	80013c8 <HAL_GetTick>
 80021b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021bc:	e00a      	b.n	80021d4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021be:	f7ff f903 	bl	80013c8 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d902      	bls.n	80021d4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	f000 bcd5 	b.w	8002b7e <HAL_RCC_OscConfig+0xe02>
 80021d4:	2302      	movs	r3, #2
 80021d6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80021de:	fa93 f3a3 	rbit	r3, r3
 80021e2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80021e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ea:	fab3 f383 	clz	r3, r3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	095b      	lsrs	r3, r3, #5
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d102      	bne.n	8002204 <HAL_RCC_OscConfig+0x488>
 80021fe:	4b73      	ldr	r3, [pc, #460]	; (80023cc <HAL_RCC_OscConfig+0x650>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	e013      	b.n	800222c <HAL_RCC_OscConfig+0x4b0>
 8002204:	2302      	movs	r3, #2
 8002206:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800220e:	fa93 f3a3 	rbit	r3, r3
 8002212:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002216:	2302      	movs	r3, #2
 8002218:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800221c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002220:	fa93 f3a3 	rbit	r3, r3
 8002224:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002228:	4b68      	ldr	r3, [pc, #416]	; (80023cc <HAL_RCC_OscConfig+0x650>)
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	2202      	movs	r2, #2
 800222e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002232:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002236:	fa92 f2a2 	rbit	r2, r2
 800223a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800223e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002242:	fab2 f282 	clz	r2, r2
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	f042 0220 	orr.w	r2, r2, #32
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	f002 021f 	and.w	r2, r2, #31
 8002252:	2101      	movs	r1, #1
 8002254:	fa01 f202 	lsl.w	r2, r1, r2
 8002258:	4013      	ands	r3, r2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0af      	beq.n	80021be <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225e:	4b5b      	ldr	r3, [pc, #364]	; (80023cc <HAL_RCC_OscConfig+0x650>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002266:	1d3b      	adds	r3, r7, #4
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	21f8      	movs	r1, #248	; 0xf8
 800226e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002276:	fa91 f1a1 	rbit	r1, r1
 800227a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800227e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002282:	fab1 f181 	clz	r1, r1
 8002286:	b2c9      	uxtb	r1, r1
 8002288:	408b      	lsls	r3, r1
 800228a:	4950      	ldr	r1, [pc, #320]	; (80023cc <HAL_RCC_OscConfig+0x650>)
 800228c:	4313      	orrs	r3, r2
 800228e:	600b      	str	r3, [r1, #0]
 8002290:	e06a      	b.n	8002368 <HAL_RCC_OscConfig+0x5ec>
 8002292:	2301      	movs	r3, #1
 8002294:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800229c:	fa93 f3a3 	rbit	r3, r3
 80022a0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80022a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a8:	fab3 f383 	clz	r3, r3
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	461a      	mov	r2, r3
 80022ba:	2300      	movs	r3, #0
 80022bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022be:	f7ff f883 	bl	80013c8 <HAL_GetTick>
 80022c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c6:	e00a      	b.n	80022de <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c8:	f7ff f87e 	bl	80013c8 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d902      	bls.n	80022de <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	f000 bc50 	b.w	8002b7e <HAL_RCC_OscConfig+0xe02>
 80022de:	2302      	movs	r3, #2
 80022e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80022f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f4:	fab3 f383 	clz	r3, r3
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b01      	cmp	r3, #1
 8002306:	d102      	bne.n	800230e <HAL_RCC_OscConfig+0x592>
 8002308:	4b30      	ldr	r3, [pc, #192]	; (80023cc <HAL_RCC_OscConfig+0x650>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	e013      	b.n	8002336 <HAL_RCC_OscConfig+0x5ba>
 800230e:	2302      	movs	r3, #2
 8002310:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002314:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002318:	fa93 f3a3 	rbit	r3, r3
 800231c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002320:	2302      	movs	r3, #2
 8002322:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002326:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002332:	4b26      	ldr	r3, [pc, #152]	; (80023cc <HAL_RCC_OscConfig+0x650>)
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	2202      	movs	r2, #2
 8002338:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800233c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002340:	fa92 f2a2 	rbit	r2, r2
 8002344:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002348:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800234c:	fab2 f282 	clz	r2, r2
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	f042 0220 	orr.w	r2, r2, #32
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	f002 021f 	and.w	r2, r2, #31
 800235c:	2101      	movs	r1, #1
 800235e:	fa01 f202 	lsl.w	r2, r1, r2
 8002362:	4013      	ands	r3, r2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1af      	bne.n	80022c8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002368:	1d3b      	adds	r3, r7, #4
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 80da 	beq.w	800252c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002378:	1d3b      	adds	r3, r7, #4
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d069      	beq.n	8002456 <HAL_RCC_OscConfig+0x6da>
 8002382:	2301      	movs	r3, #1
 8002384:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002388:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800238c:	fa93 f3a3 	rbit	r3, r3
 8002390:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002398:	fab3 f383 	clz	r3, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_RCC_OscConfig+0x654>)
 80023a2:	4413      	add	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	461a      	mov	r2, r3
 80023a8:	2301      	movs	r3, #1
 80023aa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ac:	f7ff f80c 	bl	80013c8 <HAL_GetTick>
 80023b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b4:	e00e      	b.n	80023d4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023b6:	f7ff f807 	bl	80013c8 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d906      	bls.n	80023d4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e3d9      	b.n	8002b7e <HAL_RCC_OscConfig+0xe02>
 80023ca:	bf00      	nop
 80023cc:	40021000 	.word	0x40021000
 80023d0:	10908120 	.word	0x10908120
 80023d4:	2302      	movs	r3, #2
 80023d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80023de:	fa93 f3a3 	rbit	r3, r3
 80023e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80023e6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80023ea:	2202      	movs	r2, #2
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	fa93 f2a3 	rbit	r2, r3
 80023f8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002402:	2202      	movs	r2, #2
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	fa93 f2a3 	rbit	r2, r3
 8002410:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002414:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002416:	4ba5      	ldr	r3, [pc, #660]	; (80026ac <HAL_RCC_OscConfig+0x930>)
 8002418:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800241a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800241e:	2102      	movs	r1, #2
 8002420:	6019      	str	r1, [r3, #0]
 8002422:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	fa93 f1a3 	rbit	r1, r3
 800242c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002430:	6019      	str	r1, [r3, #0]
  return result;
 8002432:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002442:	b2db      	uxtb	r3, r3
 8002444:	f003 031f 	and.w	r3, r3, #31
 8002448:	2101      	movs	r1, #1
 800244a:	fa01 f303 	lsl.w	r3, r1, r3
 800244e:	4013      	ands	r3, r2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0b0      	beq.n	80023b6 <HAL_RCC_OscConfig+0x63a>
 8002454:	e06a      	b.n	800252c <HAL_RCC_OscConfig+0x7b0>
 8002456:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	fa93 f2a3 	rbit	r2, r3
 8002468:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800246c:	601a      	str	r2, [r3, #0]
  return result;
 800246e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002472:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002474:	fab3 f383 	clz	r3, r3
 8002478:	b2db      	uxtb	r3, r3
 800247a:	461a      	mov	r2, r3
 800247c:	4b8c      	ldr	r3, [pc, #560]	; (80026b0 <HAL_RCC_OscConfig+0x934>)
 800247e:	4413      	add	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	461a      	mov	r2, r3
 8002484:	2300      	movs	r3, #0
 8002486:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002488:	f7fe ff9e 	bl	80013c8 <HAL_GetTick>
 800248c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002490:	e009      	b.n	80024a6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002492:	f7fe ff99 	bl	80013c8 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e36b      	b.n	8002b7e <HAL_RCC_OscConfig+0xe02>
 80024a6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80024aa:	2202      	movs	r2, #2
 80024ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ae:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	fa93 f2a3 	rbit	r2, r3
 80024b8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80024c2:	2202      	movs	r2, #2
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	fa93 f2a3 	rbit	r2, r3
 80024d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80024da:	2202      	movs	r2, #2
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	fa93 f2a3 	rbit	r2, r3
 80024e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ee:	4b6f      	ldr	r3, [pc, #444]	; (80026ac <HAL_RCC_OscConfig+0x930>)
 80024f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024f2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80024f6:	2102      	movs	r1, #2
 80024f8:	6019      	str	r1, [r3, #0]
 80024fa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	fa93 f1a3 	rbit	r1, r3
 8002504:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002508:	6019      	str	r1, [r3, #0]
  return result;
 800250a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	fab3 f383 	clz	r3, r3
 8002514:	b2db      	uxtb	r3, r3
 8002516:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800251a:	b2db      	uxtb	r3, r3
 800251c:	f003 031f 	and.w	r3, r3, #31
 8002520:	2101      	movs	r1, #1
 8002522:	fa01 f303 	lsl.w	r3, r1, r3
 8002526:	4013      	ands	r3, r2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1b2      	bne.n	8002492 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 8158 	beq.w	80027ec <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800253c:	2300      	movs	r3, #0
 800253e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002542:	4b5a      	ldr	r3, [pc, #360]	; (80026ac <HAL_RCC_OscConfig+0x930>)
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d112      	bne.n	8002574 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800254e:	4b57      	ldr	r3, [pc, #348]	; (80026ac <HAL_RCC_OscConfig+0x930>)
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	4a56      	ldr	r2, [pc, #344]	; (80026ac <HAL_RCC_OscConfig+0x930>)
 8002554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002558:	61d3      	str	r3, [r2, #28]
 800255a:	4b54      	ldr	r3, [pc, #336]	; (80026ac <HAL_RCC_OscConfig+0x930>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002562:	f107 0308 	add.w	r3, r7, #8
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	f107 0308 	add.w	r3, r7, #8
 800256c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800256e:	2301      	movs	r3, #1
 8002570:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002574:	4b4f      	ldr	r3, [pc, #316]	; (80026b4 <HAL_RCC_OscConfig+0x938>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257c:	2b00      	cmp	r3, #0
 800257e:	d11a      	bne.n	80025b6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002580:	4b4c      	ldr	r3, [pc, #304]	; (80026b4 <HAL_RCC_OscConfig+0x938>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a4b      	ldr	r2, [pc, #300]	; (80026b4 <HAL_RCC_OscConfig+0x938>)
 8002586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258c:	f7fe ff1c 	bl	80013c8 <HAL_GetTick>
 8002590:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002594:	e009      	b.n	80025aa <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002596:	f7fe ff17 	bl	80013c8 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b64      	cmp	r3, #100	; 0x64
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e2e9      	b.n	8002b7e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025aa:	4b42      	ldr	r3, [pc, #264]	; (80026b4 <HAL_RCC_OscConfig+0x938>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0ef      	beq.n	8002596 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b6:	1d3b      	adds	r3, r7, #4
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d106      	bne.n	80025ce <HAL_RCC_OscConfig+0x852>
 80025c0:	4b3a      	ldr	r3, [pc, #232]	; (80026ac <HAL_RCC_OscConfig+0x930>)
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	4a39      	ldr	r2, [pc, #228]	; (80026ac <HAL_RCC_OscConfig+0x930>)
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	6213      	str	r3, [r2, #32]
 80025cc:	e02f      	b.n	800262e <HAL_RCC_OscConfig+0x8b2>
 80025ce:	1d3b      	adds	r3, r7, #4
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10c      	bne.n	80025f2 <HAL_RCC_OscConfig+0x876>
 80025d8:	4b34      	ldr	r3, [pc, #208]	; (80026ac <HAL_RCC_OscConfig+0x930>)
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	4a33      	ldr	r2, [pc, #204]	; (80026ac <HAL_RCC_OscConfig+0x930>)
 80025de:	f023 0301 	bic.w	r3, r3, #1
 80025e2:	6213      	str	r3, [r2, #32]
 80025e4:	4b31      	ldr	r3, [pc, #196]	; (80026ac <HAL_RCC_OscConfig+0x930>)
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	4a30      	ldr	r2, [pc, #192]	; (80026ac <HAL_RCC_OscConfig+0x930>)
 80025ea:	f023 0304 	bic.w	r3, r3, #4
 80025ee:	6213      	str	r3, [r2, #32]
 80025f0:	e01d      	b.n	800262e <HAL_RCC_OscConfig+0x8b2>
 80025f2:	1d3b      	adds	r3, r7, #4
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	2b05      	cmp	r3, #5
 80025fa:	d10c      	bne.n	8002616 <HAL_RCC_OscConfig+0x89a>
 80025fc:	4b2b      	ldr	r3, [pc, #172]	; (80026ac <HAL_RCC_OscConfig+0x930>)
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	4a2a      	ldr	r2, [pc, #168]	; (80026ac <HAL_RCC_OscConfig+0x930>)
 8002602:	f043 0304 	orr.w	r3, r3, #4
 8002606:	6213      	str	r3, [r2, #32]
 8002608:	4b28      	ldr	r3, [pc, #160]	; (80026ac <HAL_RCC_OscConfig+0x930>)
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	4a27      	ldr	r2, [pc, #156]	; (80026ac <HAL_RCC_OscConfig+0x930>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	6213      	str	r3, [r2, #32]
 8002614:	e00b      	b.n	800262e <HAL_RCC_OscConfig+0x8b2>
 8002616:	4b25      	ldr	r3, [pc, #148]	; (80026ac <HAL_RCC_OscConfig+0x930>)
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	4a24      	ldr	r2, [pc, #144]	; (80026ac <HAL_RCC_OscConfig+0x930>)
 800261c:	f023 0301 	bic.w	r3, r3, #1
 8002620:	6213      	str	r3, [r2, #32]
 8002622:	4b22      	ldr	r3, [pc, #136]	; (80026ac <HAL_RCC_OscConfig+0x930>)
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	4a21      	ldr	r2, [pc, #132]	; (80026ac <HAL_RCC_OscConfig+0x930>)
 8002628:	f023 0304 	bic.w	r3, r3, #4
 800262c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800262e:	1d3b      	adds	r3, r7, #4
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d06b      	beq.n	8002710 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002638:	f7fe fec6 	bl	80013c8 <HAL_GetTick>
 800263c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002640:	e00b      	b.n	800265a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002642:	f7fe fec1 	bl	80013c8 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002652:	4293      	cmp	r3, r2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e291      	b.n	8002b7e <HAL_RCC_OscConfig+0xe02>
 800265a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800265e:	2202      	movs	r2, #2
 8002660:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	fa93 f2a3 	rbit	r2, r3
 800266c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002676:	2202      	movs	r2, #2
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	fa93 f2a3 	rbit	r2, r3
 8002684:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002688:	601a      	str	r2, [r3, #0]
  return result;
 800268a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800268e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002690:	fab3 f383 	clz	r3, r3
 8002694:	b2db      	uxtb	r3, r3
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	b2db      	uxtb	r3, r3
 800269a:	f043 0302 	orr.w	r3, r3, #2
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d109      	bne.n	80026b8 <HAL_RCC_OscConfig+0x93c>
 80026a4:	4b01      	ldr	r3, [pc, #4]	; (80026ac <HAL_RCC_OscConfig+0x930>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	e014      	b.n	80026d4 <HAL_RCC_OscConfig+0x958>
 80026aa:	bf00      	nop
 80026ac:	40021000 	.word	0x40021000
 80026b0:	10908120 	.word	0x10908120
 80026b4:	40007000 	.word	0x40007000
 80026b8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80026bc:	2202      	movs	r2, #2
 80026be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	fa93 f2a3 	rbit	r2, r3
 80026ca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	4bbb      	ldr	r3, [pc, #748]	; (80029c0 <HAL_RCC_OscConfig+0xc44>)
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80026d8:	2102      	movs	r1, #2
 80026da:	6011      	str	r1, [r2, #0]
 80026dc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	fa92 f1a2 	rbit	r1, r2
 80026e6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80026ea:	6011      	str	r1, [r2, #0]
  return result;
 80026ec:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	fab2 f282 	clz	r2, r2
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	f002 021f 	and.w	r2, r2, #31
 8002702:	2101      	movs	r1, #1
 8002704:	fa01 f202 	lsl.w	r2, r1, r2
 8002708:	4013      	ands	r3, r2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d099      	beq.n	8002642 <HAL_RCC_OscConfig+0x8c6>
 800270e:	e063      	b.n	80027d8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002710:	f7fe fe5a 	bl	80013c8 <HAL_GetTick>
 8002714:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002718:	e00b      	b.n	8002732 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800271a:	f7fe fe55 	bl	80013c8 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f241 3288 	movw	r2, #5000	; 0x1388
 800272a:	4293      	cmp	r3, r2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e225      	b.n	8002b7e <HAL_RCC_OscConfig+0xe02>
 8002732:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002736:	2202      	movs	r2, #2
 8002738:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	fa93 f2a3 	rbit	r2, r3
 8002744:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800274e:	2202      	movs	r2, #2
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	fa93 f2a3 	rbit	r2, r3
 800275c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002760:	601a      	str	r2, [r3, #0]
  return result;
 8002762:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002766:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002768:	fab3 f383 	clz	r3, r3
 800276c:	b2db      	uxtb	r3, r3
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f043 0302 	orr.w	r3, r3, #2
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d102      	bne.n	8002782 <HAL_RCC_OscConfig+0xa06>
 800277c:	4b90      	ldr	r3, [pc, #576]	; (80029c0 <HAL_RCC_OscConfig+0xc44>)
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	e00d      	b.n	800279e <HAL_RCC_OscConfig+0xa22>
 8002782:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002786:	2202      	movs	r2, #2
 8002788:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	fa93 f2a3 	rbit	r2, r3
 8002794:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	4b89      	ldr	r3, [pc, #548]	; (80029c0 <HAL_RCC_OscConfig+0xc44>)
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80027a2:	2102      	movs	r1, #2
 80027a4:	6011      	str	r1, [r2, #0]
 80027a6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80027aa:	6812      	ldr	r2, [r2, #0]
 80027ac:	fa92 f1a2 	rbit	r1, r2
 80027b0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80027b4:	6011      	str	r1, [r2, #0]
  return result;
 80027b6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	fab2 f282 	clz	r2, r2
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	f002 021f 	and.w	r2, r2, #31
 80027cc:	2101      	movs	r1, #1
 80027ce:	fa01 f202 	lsl.w	r2, r1, r2
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1a0      	bne.n	800271a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027d8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d105      	bne.n	80027ec <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e0:	4b77      	ldr	r3, [pc, #476]	; (80029c0 <HAL_RCC_OscConfig+0xc44>)
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	4a76      	ldr	r2, [pc, #472]	; (80029c0 <HAL_RCC_OscConfig+0xc44>)
 80027e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ec:	1d3b      	adds	r3, r7, #4
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 81c2 	beq.w	8002b7c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027f8:	4b71      	ldr	r3, [pc, #452]	; (80029c0 <HAL_RCC_OscConfig+0xc44>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 030c 	and.w	r3, r3, #12
 8002800:	2b08      	cmp	r3, #8
 8002802:	f000 819c 	beq.w	8002b3e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002806:	1d3b      	adds	r3, r7, #4
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	2b02      	cmp	r3, #2
 800280e:	f040 8114 	bne.w	8002a3a <HAL_RCC_OscConfig+0xcbe>
 8002812:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002816:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800281a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	fa93 f2a3 	rbit	r2, r3
 8002826:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800282a:	601a      	str	r2, [r3, #0]
  return result;
 800282c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002830:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002832:	fab3 f383 	clz	r3, r3
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800283c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	461a      	mov	r2, r3
 8002844:	2300      	movs	r3, #0
 8002846:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7fe fdbe 	bl	80013c8 <HAL_GetTick>
 800284c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002850:	e009      	b.n	8002866 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002852:	f7fe fdb9 	bl	80013c8 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e18b      	b.n	8002b7e <HAL_RCC_OscConfig+0xe02>
 8002866:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800286a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800286e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	fa93 f2a3 	rbit	r2, r3
 800287a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800287e:	601a      	str	r2, [r3, #0]
  return result;
 8002880:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002884:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	095b      	lsrs	r3, r3, #5
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b01      	cmp	r3, #1
 8002898:	d102      	bne.n	80028a0 <HAL_RCC_OscConfig+0xb24>
 800289a:	4b49      	ldr	r3, [pc, #292]	; (80029c0 <HAL_RCC_OscConfig+0xc44>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	e01b      	b.n	80028d8 <HAL_RCC_OscConfig+0xb5c>
 80028a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80028a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	fa93 f2a3 	rbit	r2, r3
 80028b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80028be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	fa93 f2a3 	rbit	r2, r3
 80028ce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	4b3a      	ldr	r3, [pc, #232]	; (80029c0 <HAL_RCC_OscConfig+0xc44>)
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80028dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028e0:	6011      	str	r1, [r2, #0]
 80028e2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	fa92 f1a2 	rbit	r1, r2
 80028ec:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80028f0:	6011      	str	r1, [r2, #0]
  return result;
 80028f2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	fab2 f282 	clz	r2, r2
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	f042 0220 	orr.w	r2, r2, #32
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	f002 021f 	and.w	r2, r2, #31
 8002908:	2101      	movs	r1, #1
 800290a:	fa01 f202 	lsl.w	r2, r1, r2
 800290e:	4013      	ands	r3, r2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d19e      	bne.n	8002852 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002914:	4b2a      	ldr	r3, [pc, #168]	; (80029c0 <HAL_RCC_OscConfig+0xc44>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800291c:	1d3b      	adds	r3, r7, #4
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002922:	1d3b      	adds	r3, r7, #4
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	430b      	orrs	r3, r1
 800292a:	4925      	ldr	r1, [pc, #148]	; (80029c0 <HAL_RCC_OscConfig+0xc44>)
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]
 8002930:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002934:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002938:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	fa93 f2a3 	rbit	r2, r3
 8002944:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002948:	601a      	str	r2, [r3, #0]
  return result;
 800294a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800294e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002950:	fab3 f383 	clz	r3, r3
 8002954:	b2db      	uxtb	r3, r3
 8002956:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800295a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	461a      	mov	r2, r3
 8002962:	2301      	movs	r3, #1
 8002964:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002966:	f7fe fd2f 	bl	80013c8 <HAL_GetTick>
 800296a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800296e:	e009      	b.n	8002984 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002970:	f7fe fd2a 	bl	80013c8 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e0fc      	b.n	8002b7e <HAL_RCC_OscConfig+0xe02>
 8002984:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002988:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800298c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	fa93 f2a3 	rbit	r2, r3
 8002998:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800299c:	601a      	str	r2, [r3, #0]
  return result;
 800299e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029a4:	fab3 f383 	clz	r3, r3
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	095b      	lsrs	r3, r3, #5
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d105      	bne.n	80029c4 <HAL_RCC_OscConfig+0xc48>
 80029b8:	4b01      	ldr	r3, [pc, #4]	; (80029c0 <HAL_RCC_OscConfig+0xc44>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	e01e      	b.n	80029fc <HAL_RCC_OscConfig+0xc80>
 80029be:	bf00      	nop
 80029c0:	40021000 	.word	0x40021000
 80029c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80029c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	fa93 f2a3 	rbit	r2, r3
 80029d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80029e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	fa93 f2a3 	rbit	r2, r3
 80029f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	4b63      	ldr	r3, [pc, #396]	; (8002b88 <HAL_RCC_OscConfig+0xe0c>)
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002a00:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a04:	6011      	str	r1, [r2, #0]
 8002a06:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	fa92 f1a2 	rbit	r1, r2
 8002a10:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002a14:	6011      	str	r1, [r2, #0]
  return result;
 8002a16:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	fab2 f282 	clz	r2, r2
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	f042 0220 	orr.w	r2, r2, #32
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	f002 021f 	and.w	r2, r2, #31
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d09b      	beq.n	8002970 <HAL_RCC_OscConfig+0xbf4>
 8002a38:	e0a0      	b.n	8002b7c <HAL_RCC_OscConfig+0xe00>
 8002a3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	fa93 f2a3 	rbit	r2, r3
 8002a4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a52:	601a      	str	r2, [r3, #0]
  return result;
 8002a54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a58:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5a:	fab3 f383 	clz	r3, r3
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7fe fcaa 	bl	80013c8 <HAL_GetTick>
 8002a74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a78:	e009      	b.n	8002a8e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a7a:	f7fe fca5 	bl	80013c8 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e077      	b.n	8002b7e <HAL_RCC_OscConfig+0xe02>
 8002a8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	fa93 f2a3 	rbit	r2, r3
 8002aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aa6:	601a      	str	r2, [r3, #0]
  return result;
 8002aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aae:	fab3 f383 	clz	r3, r3
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	095b      	lsrs	r3, r3, #5
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d102      	bne.n	8002ac8 <HAL_RCC_OscConfig+0xd4c>
 8002ac2:	4b31      	ldr	r3, [pc, #196]	; (8002b88 <HAL_RCC_OscConfig+0xe0c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	e01b      	b.n	8002b00 <HAL_RCC_OscConfig+0xd84>
 8002ac8:	f107 0320 	add.w	r3, r7, #32
 8002acc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ad0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	f107 0320 	add.w	r3, r7, #32
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	fa93 f2a3 	rbit	r2, r3
 8002adc:	f107 031c 	add.w	r3, r7, #28
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	f107 0318 	add.w	r3, r7, #24
 8002ae6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	f107 0318 	add.w	r3, r7, #24
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	fa93 f2a3 	rbit	r2, r3
 8002af6:	f107 0314 	add.w	r3, r7, #20
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	4b22      	ldr	r3, [pc, #136]	; (8002b88 <HAL_RCC_OscConfig+0xe0c>)
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	f107 0210 	add.w	r2, r7, #16
 8002b04:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b08:	6011      	str	r1, [r2, #0]
 8002b0a:	f107 0210 	add.w	r2, r7, #16
 8002b0e:	6812      	ldr	r2, [r2, #0]
 8002b10:	fa92 f1a2 	rbit	r1, r2
 8002b14:	f107 020c 	add.w	r2, r7, #12
 8002b18:	6011      	str	r1, [r2, #0]
  return result;
 8002b1a:	f107 020c 	add.w	r2, r7, #12
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	fab2 f282 	clz	r2, r2
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	f042 0220 	orr.w	r2, r2, #32
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	f002 021f 	and.w	r2, r2, #31
 8002b30:	2101      	movs	r1, #1
 8002b32:	fa01 f202 	lsl.w	r2, r1, r2
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d19e      	bne.n	8002a7a <HAL_RCC_OscConfig+0xcfe>
 8002b3c:	e01e      	b.n	8002b7c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e018      	b.n	8002b7e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b4c:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <HAL_RCC_OscConfig+0xe0c>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b54:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b5c:	1d3b      	adds	r3, r7, #4
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d108      	bne.n	8002b78 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002b66:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b6e:	1d3b      	adds	r3, r7, #4
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d001      	beq.n	8002b7c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40021000 	.word	0x40021000

08002b8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b09e      	sub	sp, #120	; 0x78
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e162      	b.n	8002e6a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba4:	4b90      	ldr	r3, [pc, #576]	; (8002de8 <HAL_RCC_ClockConfig+0x25c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d910      	bls.n	8002bd4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb2:	4b8d      	ldr	r3, [pc, #564]	; (8002de8 <HAL_RCC_ClockConfig+0x25c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 0207 	bic.w	r2, r3, #7
 8002bba:	498b      	ldr	r1, [pc, #556]	; (8002de8 <HAL_RCC_ClockConfig+0x25c>)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	4b89      	ldr	r3, [pc, #548]	; (8002de8 <HAL_RCC_ClockConfig+0x25c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e14a      	b.n	8002e6a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be0:	4b82      	ldr	r3, [pc, #520]	; (8002dec <HAL_RCC_ClockConfig+0x260>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	497f      	ldr	r1, [pc, #508]	; (8002dec <HAL_RCC_ClockConfig+0x260>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 80dc 	beq.w	8002db8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d13c      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xf6>
 8002c08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c0c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c10:	fa93 f3a3 	rbit	r3, r3
 8002c14:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c18:	fab3 f383 	clz	r3, r3
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	095b      	lsrs	r3, r3, #5
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d102      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xa6>
 8002c2c:	4b6f      	ldr	r3, [pc, #444]	; (8002dec <HAL_RCC_ClockConfig+0x260>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	e00f      	b.n	8002c52 <HAL_RCC_ClockConfig+0xc6>
 8002c32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c36:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	667b      	str	r3, [r7, #100]	; 0x64
 8002c40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c44:	663b      	str	r3, [r7, #96]	; 0x60
 8002c46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c48:	fa93 f3a3 	rbit	r3, r3
 8002c4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c4e:	4b67      	ldr	r3, [pc, #412]	; (8002dec <HAL_RCC_ClockConfig+0x260>)
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c56:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c5a:	fa92 f2a2 	rbit	r2, r2
 8002c5e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002c60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c62:	fab2 f282 	clz	r2, r2
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	f042 0220 	orr.w	r2, r2, #32
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	f002 021f 	and.w	r2, r2, #31
 8002c72:	2101      	movs	r1, #1
 8002c74:	fa01 f202 	lsl.w	r2, r1, r2
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d17b      	bne.n	8002d76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e0f3      	b.n	8002e6a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d13c      	bne.n	8002d04 <HAL_RCC_ClockConfig+0x178>
 8002c8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c8e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9a:	fab3 f383 	clz	r3, r3
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	095b      	lsrs	r3, r3, #5
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d102      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0x128>
 8002cae:	4b4f      	ldr	r3, [pc, #316]	; (8002dec <HAL_RCC_ClockConfig+0x260>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	e00f      	b.n	8002cd4 <HAL_RCC_ClockConfig+0x148>
 8002cb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cb8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cbc:	fa93 f3a3 	rbit	r3, r3
 8002cc0:	647b      	str	r3, [r7, #68]	; 0x44
 8002cc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cc6:	643b      	str	r3, [r7, #64]	; 0x40
 8002cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cd0:	4b46      	ldr	r3, [pc, #280]	; (8002dec <HAL_RCC_ClockConfig+0x260>)
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cd8:	63ba      	str	r2, [r7, #56]	; 0x38
 8002cda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cdc:	fa92 f2a2 	rbit	r2, r2
 8002ce0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002ce2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ce4:	fab2 f282 	clz	r2, r2
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	f042 0220 	orr.w	r2, r2, #32
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	f002 021f 	and.w	r2, r2, #31
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d13a      	bne.n	8002d76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0b2      	b.n	8002e6a <HAL_RCC_ClockConfig+0x2de>
 8002d04:	2302      	movs	r3, #2
 8002d06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0a:	fa93 f3a3 	rbit	r3, r3
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d12:	fab3 f383 	clz	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	095b      	lsrs	r3, r3, #5
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d102      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x1a0>
 8002d26:	4b31      	ldr	r3, [pc, #196]	; (8002dec <HAL_RCC_ClockConfig+0x260>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	e00d      	b.n	8002d48 <HAL_RCC_ClockConfig+0x1bc>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d32:	fa93 f3a3 	rbit	r3, r3
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
 8002d38:	2302      	movs	r3, #2
 8002d3a:	623b      	str	r3, [r7, #32]
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	61fb      	str	r3, [r7, #28]
 8002d44:	4b29      	ldr	r3, [pc, #164]	; (8002dec <HAL_RCC_ClockConfig+0x260>)
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	2202      	movs	r2, #2
 8002d4a:	61ba      	str	r2, [r7, #24]
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	fa92 f2a2 	rbit	r2, r2
 8002d52:	617a      	str	r2, [r7, #20]
  return result;
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	fab2 f282 	clz	r2, r2
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	f042 0220 	orr.w	r2, r2, #32
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	f002 021f 	and.w	r2, r2, #31
 8002d66:	2101      	movs	r1, #1
 8002d68:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e079      	b.n	8002e6a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d76:	4b1d      	ldr	r3, [pc, #116]	; (8002dec <HAL_RCC_ClockConfig+0x260>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f023 0203 	bic.w	r2, r3, #3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	491a      	ldr	r1, [pc, #104]	; (8002dec <HAL_RCC_ClockConfig+0x260>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d88:	f7fe fb1e 	bl	80013c8 <HAL_GetTick>
 8002d8c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8e:	e00a      	b.n	8002da6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d90:	f7fe fb1a 	bl	80013c8 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e061      	b.n	8002e6a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da6:	4b11      	ldr	r3, [pc, #68]	; (8002dec <HAL_RCC_ClockConfig+0x260>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f003 020c 	and.w	r2, r3, #12
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d1eb      	bne.n	8002d90 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002db8:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <HAL_RCC_ClockConfig+0x25c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d214      	bcs.n	8002df0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc6:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <HAL_RCC_ClockConfig+0x25c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f023 0207 	bic.w	r2, r3, #7
 8002dce:	4906      	ldr	r1, [pc, #24]	; (8002de8 <HAL_RCC_ClockConfig+0x25c>)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd6:	4b04      	ldr	r3, [pc, #16]	; (8002de8 <HAL_RCC_ClockConfig+0x25c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d005      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e040      	b.n	8002e6a <HAL_RCC_ClockConfig+0x2de>
 8002de8:	40022000 	.word	0x40022000
 8002dec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d008      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dfc:	4b1d      	ldr	r3, [pc, #116]	; (8002e74 <HAL_RCC_ClockConfig+0x2e8>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	491a      	ldr	r1, [pc, #104]	; (8002e74 <HAL_RCC_ClockConfig+0x2e8>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d009      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e1a:	4b16      	ldr	r3, [pc, #88]	; (8002e74 <HAL_RCC_ClockConfig+0x2e8>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	4912      	ldr	r1, [pc, #72]	; (8002e74 <HAL_RCC_ClockConfig+0x2e8>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e2e:	f000 f829 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8002e32:	4601      	mov	r1, r0
 8002e34:	4b0f      	ldr	r3, [pc, #60]	; (8002e74 <HAL_RCC_ClockConfig+0x2e8>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e3c:	22f0      	movs	r2, #240	; 0xf0
 8002e3e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	fa92 f2a2 	rbit	r2, r2
 8002e46:	60fa      	str	r2, [r7, #12]
  return result;
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	fab2 f282 	clz	r2, r2
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	40d3      	lsrs	r3, r2
 8002e52:	4a09      	ldr	r2, [pc, #36]	; (8002e78 <HAL_RCC_ClockConfig+0x2ec>)
 8002e54:	5cd3      	ldrb	r3, [r2, r3]
 8002e56:	fa21 f303 	lsr.w	r3, r1, r3
 8002e5a:	4a08      	ldr	r2, [pc, #32]	; (8002e7c <HAL_RCC_ClockConfig+0x2f0>)
 8002e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e5e:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <HAL_RCC_ClockConfig+0x2f4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe fa6c 	bl	8001340 <HAL_InitTick>
  
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3778      	adds	r7, #120	; 0x78
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40021000 	.word	0x40021000
 8002e78:	080054e4 	.word	0x080054e4
 8002e7c:	20000004 	.word	0x20000004
 8002e80:	20000008 	.word	0x20000008

08002e84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b08b      	sub	sp, #44	; 0x2c
 8002e88:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	2300      	movs	r3, #0
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
 8002e96:	2300      	movs	r3, #0
 8002e98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002e9e:	4b29      	ldr	r3, [pc, #164]	; (8002f44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f003 030c 	and.w	r3, r3, #12
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d002      	beq.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x30>
 8002eae:	2b08      	cmp	r3, #8
 8002eb0:	d003      	beq.n	8002eba <HAL_RCC_GetSysClockFreq+0x36>
 8002eb2:	e03c      	b.n	8002f2e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002eb4:	4b24      	ldr	r3, [pc, #144]	; (8002f48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002eb6:	623b      	str	r3, [r7, #32]
      break;
 8002eb8:	e03c      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002ec0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002ec4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	fa92 f2a2 	rbit	r2, r2
 8002ecc:	607a      	str	r2, [r7, #4]
  return result;
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	fab2 f282 	clz	r2, r2
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	40d3      	lsrs	r3, r2
 8002ed8:	4a1c      	ldr	r2, [pc, #112]	; (8002f4c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002eda:	5cd3      	ldrb	r3, [r2, r3]
 8002edc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002ede:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	220f      	movs	r2, #15
 8002ee8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	fa92 f2a2 	rbit	r2, r2
 8002ef0:	60fa      	str	r2, [r7, #12]
  return result;
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	fab2 f282 	clz	r2, r2
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	40d3      	lsrs	r3, r2
 8002efc:	4a14      	ldr	r2, [pc, #80]	; (8002f50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002efe:	5cd3      	ldrb	r3, [r2, r3]
 8002f00:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f0c:	4a0e      	ldr	r2, [pc, #56]	; (8002f48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	fb02 f303 	mul.w	r3, r2, r3
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1c:	e004      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	4a0c      	ldr	r2, [pc, #48]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f22:	fb02 f303 	mul.w	r3, r2, r3
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	623b      	str	r3, [r7, #32]
      break;
 8002f2c:	e002      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f2e:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002f30:	623b      	str	r3, [r7, #32]
      break;
 8002f32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f34:	6a3b      	ldr	r3, [r7, #32]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	372c      	adds	r7, #44	; 0x2c
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40021000 	.word	0x40021000
 8002f48:	00f42400 	.word	0x00f42400
 8002f4c:	080054fc 	.word	0x080054fc
 8002f50:	0800550c 	.word	0x0800550c
 8002f54:	003d0900 	.word	0x003d0900
 8002f58:	007a1200 	.word	0x007a1200

08002f5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f60:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f62:	681b      	ldr	r3, [r3, #0]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	20000004 	.word	0x20000004

08002f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002f7a:	f7ff ffef 	bl	8002f5c <HAL_RCC_GetHCLKFreq>
 8002f7e:	4601      	mov	r1, r0
 8002f80:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f88:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002f8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	fa92 f2a2 	rbit	r2, r2
 8002f94:	603a      	str	r2, [r7, #0]
  return result;
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	fab2 f282 	clz	r2, r2
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	40d3      	lsrs	r3, r2
 8002fa0:	4a04      	ldr	r2, [pc, #16]	; (8002fb4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002fa2:	5cd3      	ldrb	r3, [r2, r3]
 8002fa4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	080054f4 	.word	0x080054f4

08002fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002fbe:	f7ff ffcd 	bl	8002f5c <HAL_RCC_GetHCLKFreq>
 8002fc2:	4601      	mov	r1, r0
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002fcc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002fd0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	fa92 f2a2 	rbit	r2, r2
 8002fd8:	603a      	str	r2, [r7, #0]
  return result;
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	fab2 f282 	clz	r2, r2
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	40d3      	lsrs	r3, r2
 8002fe4:	4a04      	ldr	r2, [pc, #16]	; (8002ff8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002fe6:	5cd3      	ldrb	r3, [r2, r3]
 8002fe8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002fec:	4618      	mov	r0, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	080054f4 	.word	0x080054f4

08002ffc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b092      	sub	sp, #72	; 0x48
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800300c:	2300      	movs	r3, #0
 800300e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 80cd 	beq.w	80031ba <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003020:	4b86      	ldr	r3, [pc, #536]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10e      	bne.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800302c:	4b83      	ldr	r3, [pc, #524]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	4a82      	ldr	r2, [pc, #520]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003036:	61d3      	str	r3, [r2, #28]
 8003038:	4b80      	ldr	r3, [pc, #512]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003044:	2301      	movs	r3, #1
 8003046:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304a:	4b7d      	ldr	r3, [pc, #500]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003052:	2b00      	cmp	r3, #0
 8003054:	d118      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003056:	4b7a      	ldr	r3, [pc, #488]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a79      	ldr	r2, [pc, #484]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800305c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003060:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003062:	f7fe f9b1 	bl	80013c8 <HAL_GetTick>
 8003066:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003068:	e008      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800306a:	f7fe f9ad 	bl	80013c8 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b64      	cmp	r3, #100	; 0x64
 8003076:	d901      	bls.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e0db      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307c:	4b70      	ldr	r3, [pc, #448]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0f0      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003088:	4b6c      	ldr	r3, [pc, #432]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003090:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003094:	2b00      	cmp	r3, #0
 8003096:	d07d      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d076      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030a6:	4b65      	ldr	r3, [pc, #404]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030b4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b8:	fa93 f3a3 	rbit	r3, r3
 80030bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80030be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030c0:	fab3 f383 	clz	r3, r3
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	461a      	mov	r2, r3
 80030c8:	4b5e      	ldr	r3, [pc, #376]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030ca:	4413      	add	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	461a      	mov	r2, r3
 80030d0:	2301      	movs	r3, #1
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030dc:	fa93 f3a3 	rbit	r3, r3
 80030e0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80030e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030e4:	fab3 f383 	clz	r3, r3
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	461a      	mov	r2, r3
 80030ec:	4b55      	ldr	r3, [pc, #340]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	461a      	mov	r2, r3
 80030f4:	2300      	movs	r3, #0
 80030f6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030f8:	4a50      	ldr	r2, [pc, #320]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030fc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b00      	cmp	r3, #0
 8003106:	d045      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7fe f95e 	bl	80013c8 <HAL_GetTick>
 800310c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800310e:	e00a      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003110:	f7fe f95a 	bl	80013c8 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	f241 3288 	movw	r2, #5000	; 0x1388
 800311e:	4293      	cmp	r3, r2
 8003120:	d901      	bls.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e086      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003126:	2302      	movs	r3, #2
 8003128:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312c:	fa93 f3a3 	rbit	r3, r3
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
 8003132:	2302      	movs	r3, #2
 8003134:	623b      	str	r3, [r7, #32]
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	61fb      	str	r3, [r7, #28]
  return result;
 800313e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003140:	fab3 f383 	clz	r3, r3
 8003144:	b2db      	uxtb	r3, r3
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	b2db      	uxtb	r3, r3
 800314a:	f043 0302 	orr.w	r3, r3, #2
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d102      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003154:	4b39      	ldr	r3, [pc, #228]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	e007      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800315a:	2302      	movs	r3, #2
 800315c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	fa93 f3a3 	rbit	r3, r3
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	4b35      	ldr	r3, [pc, #212]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	2202      	movs	r2, #2
 800316c:	613a      	str	r2, [r7, #16]
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	fa92 f2a2 	rbit	r2, r2
 8003174:	60fa      	str	r2, [r7, #12]
  return result;
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	fab2 f282 	clz	r2, r2
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	f002 021f 	and.w	r2, r2, #31
 8003188:	2101      	movs	r1, #1
 800318a:	fa01 f202 	lsl.w	r2, r1, r2
 800318e:	4013      	ands	r3, r2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0bd      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003194:	4b29      	ldr	r3, [pc, #164]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	4926      	ldr	r1, [pc, #152]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d105      	bne.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ae:	4b23      	ldr	r3, [pc, #140]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	4a22      	ldr	r2, [pc, #136]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d008      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031c6:	4b1d      	ldr	r3, [pc, #116]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	f023 0203 	bic.w	r2, r3, #3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	491a      	ldr	r1, [pc, #104]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031e4:	4b15      	ldr	r3, [pc, #84]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e8:	f023 0210 	bic.w	r2, r3, #16
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	4912      	ldr	r1, [pc, #72]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d008      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003202:	4b0e      	ldr	r3, [pc, #56]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003206:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	490b      	ldr	r1, [pc, #44]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003210:	4313      	orrs	r3, r2
 8003212:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d008      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003220:	4b06      	ldr	r3, [pc, #24]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	4903      	ldr	r1, [pc, #12]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800322e:	4313      	orrs	r3, r2
 8003230:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3748      	adds	r7, #72	; 0x48
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40021000 	.word	0x40021000
 8003240:	40007000 	.word	0x40007000
 8003244:	10908100 	.word	0x10908100

08003248 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e049      	b.n	80032ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d106      	bne.n	8003274 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7fd fe26 	bl	8000ec0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3304      	adds	r3, #4
 8003284:	4619      	mov	r1, r3
 8003286:	4610      	mov	r0, r2
 8003288:	f000 fbea 	bl	8003a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b01      	cmp	r3, #1
 800330a:	d001      	beq.n	8003310 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e040      	b.n	8003392 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a1c      	ldr	r2, [pc, #112]	; (80033a0 <HAL_TIM_Base_Start_IT+0xa8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d00e      	beq.n	8003350 <HAL_TIM_Base_Start_IT+0x58>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800333a:	d009      	beq.n	8003350 <HAL_TIM_Base_Start_IT+0x58>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a18      	ldr	r2, [pc, #96]	; (80033a4 <HAL_TIM_Base_Start_IT+0xac>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d004      	beq.n	8003350 <HAL_TIM_Base_Start_IT+0x58>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a17      	ldr	r2, [pc, #92]	; (80033a8 <HAL_TIM_Base_Start_IT+0xb0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d115      	bne.n	800337c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	4b15      	ldr	r3, [pc, #84]	; (80033ac <HAL_TIM_Base_Start_IT+0xb4>)
 8003358:	4013      	ands	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2b06      	cmp	r3, #6
 8003360:	d015      	beq.n	800338e <HAL_TIM_Base_Start_IT+0x96>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003368:	d011      	beq.n	800338e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f042 0201 	orr.w	r2, r2, #1
 8003378:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337a:	e008      	b.n	800338e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	e000      	b.n	8003390 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800338e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	40012c00 	.word	0x40012c00
 80033a4:	40000400 	.word	0x40000400
 80033a8:	40014000 	.word	0x40014000
 80033ac:	00010007 	.word	0x00010007

080033b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e049      	b.n	8003456 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d106      	bne.n	80033dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7fd fce0 	bl	8000d9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3304      	adds	r3, #4
 80033ec:	4619      	mov	r1, r3
 80033ee:	4610      	mov	r0, r2
 80033f0:	f000 fb36 	bl	8003a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b086      	sub	sp, #24
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e097      	b.n	80035a2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fd fca8 	bl	8000ddc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6812      	ldr	r2, [r2, #0]
 800349e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80034a2:	f023 0307 	bic.w	r3, r3, #7
 80034a6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3304      	adds	r3, #4
 80034b0:	4619      	mov	r1, r3
 80034b2:	4610      	mov	r0, r2
 80034b4:	f000 fad4 	bl	8003a60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e0:	f023 0303 	bic.w	r3, r3, #3
 80034e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	021b      	lsls	r3, r3, #8
 80034f0:	4313      	orrs	r3, r2
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80034fe:	f023 030c 	bic.w	r3, r3, #12
 8003502:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800350a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800350e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	021b      	lsls	r3, r3, #8
 800351a:	4313      	orrs	r3, r2
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	011a      	lsls	r2, r3, #4
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	031b      	lsls	r3, r3, #12
 800352e:	4313      	orrs	r3, r2
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	4313      	orrs	r3, r2
 8003534:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800353c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003544:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	4313      	orrs	r3, r2
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4313      	orrs	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d122      	bne.n	8003606 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d11b      	bne.n	8003606 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f06f 0202 	mvn.w	r2, #2
 80035d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fa19 	bl	8003a24 <HAL_TIM_IC_CaptureCallback>
 80035f2:	e005      	b.n	8003600 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 fa0b 	bl	8003a10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fa1c 	bl	8003a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b04      	cmp	r3, #4
 8003612:	d122      	bne.n	800365a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b04      	cmp	r3, #4
 8003620:	d11b      	bne.n	800365a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f06f 0204 	mvn.w	r2, #4
 800362a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f9ef 	bl	8003a24 <HAL_TIM_IC_CaptureCallback>
 8003646:	e005      	b.n	8003654 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f9e1 	bl	8003a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f9f2 	bl	8003a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	f003 0308 	and.w	r3, r3, #8
 8003664:	2b08      	cmp	r3, #8
 8003666:	d122      	bne.n	80036ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b08      	cmp	r3, #8
 8003674:	d11b      	bne.n	80036ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f06f 0208 	mvn.w	r2, #8
 800367e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2204      	movs	r2, #4
 8003684:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	f003 0303 	and.w	r3, r3, #3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f9c5 	bl	8003a24 <HAL_TIM_IC_CaptureCallback>
 800369a:	e005      	b.n	80036a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f9b7 	bl	8003a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f9c8 	bl	8003a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	f003 0310 	and.w	r3, r3, #16
 80036b8:	2b10      	cmp	r3, #16
 80036ba:	d122      	bne.n	8003702 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f003 0310 	and.w	r3, r3, #16
 80036c6:	2b10      	cmp	r3, #16
 80036c8:	d11b      	bne.n	8003702 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f06f 0210 	mvn.w	r2, #16
 80036d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2208      	movs	r2, #8
 80036d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f99b 	bl	8003a24 <HAL_TIM_IC_CaptureCallback>
 80036ee:	e005      	b.n	80036fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f98d 	bl	8003a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f99e 	bl	8003a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b01      	cmp	r3, #1
 800370e:	d10e      	bne.n	800372e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b01      	cmp	r3, #1
 800371c:	d107      	bne.n	800372e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f06f 0201 	mvn.w	r2, #1
 8003726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7fd f815 	bl	8000758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003738:	2b80      	cmp	r3, #128	; 0x80
 800373a:	d10e      	bne.n	800375a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003746:	2b80      	cmp	r3, #128	; 0x80
 8003748:	d107      	bne.n	800375a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 fd91 	bl	800427c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003768:	d10e      	bne.n	8003788 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003774:	2b80      	cmp	r3, #128	; 0x80
 8003776:	d107      	bne.n	8003788 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fd84 	bl	8004290 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003792:	2b40      	cmp	r3, #64	; 0x40
 8003794:	d10e      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a0:	2b40      	cmp	r3, #64	; 0x40
 80037a2:	d107      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f94c 	bl	8003a4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0320 	and.w	r3, r3, #32
 80037be:	2b20      	cmp	r3, #32
 80037c0:	d10e      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0320 	and.w	r3, r3, #32
 80037cc:	2b20      	cmp	r3, #32
 80037ce:	d107      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0220 	mvn.w	r2, #32
 80037d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fd44 	bl	8004268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037e0:	bf00      	nop
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003802:	2302      	movs	r3, #2
 8003804:	e0ff      	b.n	8003a06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b14      	cmp	r3, #20
 8003812:	f200 80f0 	bhi.w	80039f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003816:	a201      	add	r2, pc, #4	; (adr r2, 800381c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381c:	08003871 	.word	0x08003871
 8003820:	080039f7 	.word	0x080039f7
 8003824:	080039f7 	.word	0x080039f7
 8003828:	080039f7 	.word	0x080039f7
 800382c:	080038b1 	.word	0x080038b1
 8003830:	080039f7 	.word	0x080039f7
 8003834:	080039f7 	.word	0x080039f7
 8003838:	080039f7 	.word	0x080039f7
 800383c:	080038f3 	.word	0x080038f3
 8003840:	080039f7 	.word	0x080039f7
 8003844:	080039f7 	.word	0x080039f7
 8003848:	080039f7 	.word	0x080039f7
 800384c:	08003933 	.word	0x08003933
 8003850:	080039f7 	.word	0x080039f7
 8003854:	080039f7 	.word	0x080039f7
 8003858:	080039f7 	.word	0x080039f7
 800385c:	08003975 	.word	0x08003975
 8003860:	080039f7 	.word	0x080039f7
 8003864:	080039f7 	.word	0x080039f7
 8003868:	080039f7 	.word	0x080039f7
 800386c:	080039b5 	.word	0x080039b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68b9      	ldr	r1, [r7, #8]
 8003876:	4618      	mov	r0, r3
 8003878:	f000 f96a 	bl	8003b50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699a      	ldr	r2, [r3, #24]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0208 	orr.w	r2, r2, #8
 800388a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699a      	ldr	r2, [r3, #24]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0204 	bic.w	r2, r2, #4
 800389a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6999      	ldr	r1, [r3, #24]
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	619a      	str	r2, [r3, #24]
      break;
 80038ae:	e0a5      	b.n	80039fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68b9      	ldr	r1, [r7, #8]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 f9d0 	bl	8003c5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699a      	ldr	r2, [r3, #24]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699a      	ldr	r2, [r3, #24]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6999      	ldr	r1, [r3, #24]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	021a      	lsls	r2, r3, #8
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	619a      	str	r2, [r3, #24]
      break;
 80038f0:	e084      	b.n	80039fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68b9      	ldr	r1, [r7, #8]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 fa2f 	bl	8003d5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	69da      	ldr	r2, [r3, #28]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f042 0208 	orr.w	r2, r2, #8
 800390c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	69da      	ldr	r2, [r3, #28]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0204 	bic.w	r2, r2, #4
 800391c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69d9      	ldr	r1, [r3, #28]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	61da      	str	r2, [r3, #28]
      break;
 8003930:	e064      	b.n	80039fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68b9      	ldr	r1, [r7, #8]
 8003938:	4618      	mov	r0, r3
 800393a:	f000 fa8d 	bl	8003e58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	69da      	ldr	r2, [r3, #28]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800394c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	69da      	ldr	r2, [r3, #28]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800395c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	69d9      	ldr	r1, [r3, #28]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	021a      	lsls	r2, r3, #8
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	61da      	str	r2, [r3, #28]
      break;
 8003972:	e043      	b.n	80039fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fad0 	bl	8003f20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0208 	orr.w	r2, r2, #8
 800398e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0204 	bic.w	r2, r2, #4
 800399e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80039b2:	e023      	b.n	80039fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68b9      	ldr	r1, [r7, #8]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 fb0e 	bl	8003fdc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	021a      	lsls	r2, r3, #8
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80039f4:	e002      	b.n	80039fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	75fb      	strb	r3, [r7, #23]
      break;
 80039fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop

08003a10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a32      	ldr	r2, [pc, #200]	; (8003b3c <TIM_Base_SetConfig+0xdc>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d007      	beq.n	8003a88 <TIM_Base_SetConfig+0x28>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a7e:	d003      	beq.n	8003a88 <TIM_Base_SetConfig+0x28>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a2f      	ldr	r2, [pc, #188]	; (8003b40 <TIM_Base_SetConfig+0xe0>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d108      	bne.n	8003a9a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a27      	ldr	r2, [pc, #156]	; (8003b3c <TIM_Base_SetConfig+0xdc>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d013      	beq.n	8003aca <TIM_Base_SetConfig+0x6a>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa8:	d00f      	beq.n	8003aca <TIM_Base_SetConfig+0x6a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a24      	ldr	r2, [pc, #144]	; (8003b40 <TIM_Base_SetConfig+0xe0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00b      	beq.n	8003aca <TIM_Base_SetConfig+0x6a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a23      	ldr	r2, [pc, #140]	; (8003b44 <TIM_Base_SetConfig+0xe4>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d007      	beq.n	8003aca <TIM_Base_SetConfig+0x6a>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a22      	ldr	r2, [pc, #136]	; (8003b48 <TIM_Base_SetConfig+0xe8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d003      	beq.n	8003aca <TIM_Base_SetConfig+0x6a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a21      	ldr	r2, [pc, #132]	; (8003b4c <TIM_Base_SetConfig+0xec>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d108      	bne.n	8003adc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a0e      	ldr	r2, [pc, #56]	; (8003b3c <TIM_Base_SetConfig+0xdc>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00b      	beq.n	8003b20 <TIM_Base_SetConfig+0xc0>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a0e      	ldr	r2, [pc, #56]	; (8003b44 <TIM_Base_SetConfig+0xe4>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d007      	beq.n	8003b20 <TIM_Base_SetConfig+0xc0>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a0d      	ldr	r2, [pc, #52]	; (8003b48 <TIM_Base_SetConfig+0xe8>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d003      	beq.n	8003b20 <TIM_Base_SetConfig+0xc0>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a0c      	ldr	r2, [pc, #48]	; (8003b4c <TIM_Base_SetConfig+0xec>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d103      	bne.n	8003b28 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	615a      	str	r2, [r3, #20]
}
 8003b2e:	bf00      	nop
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40012c00 	.word	0x40012c00
 8003b40:	40000400 	.word	0x40000400
 8003b44:	40014000 	.word	0x40014000
 8003b48:	40014400 	.word	0x40014400
 8003b4c:	40014800 	.word	0x40014800

08003b50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	f023 0201 	bic.w	r2, r3, #1
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f023 0303 	bic.w	r3, r3, #3
 8003b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f023 0302 	bic.w	r3, r3, #2
 8003b9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a28      	ldr	r2, [pc, #160]	; (8003c4c <TIM_OC1_SetConfig+0xfc>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d00b      	beq.n	8003bc8 <TIM_OC1_SetConfig+0x78>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a27      	ldr	r2, [pc, #156]	; (8003c50 <TIM_OC1_SetConfig+0x100>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d007      	beq.n	8003bc8 <TIM_OC1_SetConfig+0x78>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a26      	ldr	r2, [pc, #152]	; (8003c54 <TIM_OC1_SetConfig+0x104>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d003      	beq.n	8003bc8 <TIM_OC1_SetConfig+0x78>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a25      	ldr	r2, [pc, #148]	; (8003c58 <TIM_OC1_SetConfig+0x108>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d10c      	bne.n	8003be2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f023 0308 	bic.w	r3, r3, #8
 8003bce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f023 0304 	bic.w	r3, r3, #4
 8003be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a19      	ldr	r2, [pc, #100]	; (8003c4c <TIM_OC1_SetConfig+0xfc>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d00b      	beq.n	8003c02 <TIM_OC1_SetConfig+0xb2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a18      	ldr	r2, [pc, #96]	; (8003c50 <TIM_OC1_SetConfig+0x100>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d007      	beq.n	8003c02 <TIM_OC1_SetConfig+0xb2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a17      	ldr	r2, [pc, #92]	; (8003c54 <TIM_OC1_SetConfig+0x104>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d003      	beq.n	8003c02 <TIM_OC1_SetConfig+0xb2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a16      	ldr	r2, [pc, #88]	; (8003c58 <TIM_OC1_SetConfig+0x108>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d111      	bne.n	8003c26 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	621a      	str	r2, [r3, #32]
}
 8003c40:	bf00      	nop
 8003c42:	371c      	adds	r7, #28
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	40012c00 	.word	0x40012c00
 8003c50:	40014000 	.word	0x40014000
 8003c54:	40014400 	.word	0x40014400
 8003c58:	40014800 	.word	0x40014800

08003c5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	f023 0210 	bic.w	r2, r3, #16
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	021b      	lsls	r3, r3, #8
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	f023 0320 	bic.w	r3, r3, #32
 8003caa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a24      	ldr	r2, [pc, #144]	; (8003d4c <TIM_OC2_SetConfig+0xf0>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d10d      	bne.n	8003cdc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a1b      	ldr	r2, [pc, #108]	; (8003d4c <TIM_OC2_SetConfig+0xf0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d00b      	beq.n	8003cfc <TIM_OC2_SetConfig+0xa0>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a1a      	ldr	r2, [pc, #104]	; (8003d50 <TIM_OC2_SetConfig+0xf4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d007      	beq.n	8003cfc <TIM_OC2_SetConfig+0xa0>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a19      	ldr	r2, [pc, #100]	; (8003d54 <TIM_OC2_SetConfig+0xf8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d003      	beq.n	8003cfc <TIM_OC2_SetConfig+0xa0>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a18      	ldr	r2, [pc, #96]	; (8003d58 <TIM_OC2_SetConfig+0xfc>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d113      	bne.n	8003d24 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d02:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d0a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	621a      	str	r2, [r3, #32]
}
 8003d3e:	bf00      	nop
 8003d40:	371c      	adds	r7, #28
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40012c00 	.word	0x40012c00
 8003d50:	40014000 	.word	0x40014000
 8003d54:	40014400 	.word	0x40014400
 8003d58:	40014800 	.word	0x40014800

08003d5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0303 	bic.w	r3, r3, #3
 8003d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	021b      	lsls	r3, r3, #8
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a23      	ldr	r2, [pc, #140]	; (8003e48 <TIM_OC3_SetConfig+0xec>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d10d      	bne.n	8003dda <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	021b      	lsls	r3, r3, #8
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dd8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a1a      	ldr	r2, [pc, #104]	; (8003e48 <TIM_OC3_SetConfig+0xec>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00b      	beq.n	8003dfa <TIM_OC3_SetConfig+0x9e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a19      	ldr	r2, [pc, #100]	; (8003e4c <TIM_OC3_SetConfig+0xf0>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d007      	beq.n	8003dfa <TIM_OC3_SetConfig+0x9e>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a18      	ldr	r2, [pc, #96]	; (8003e50 <TIM_OC3_SetConfig+0xf4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d003      	beq.n	8003dfa <TIM_OC3_SetConfig+0x9e>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a17      	ldr	r2, [pc, #92]	; (8003e54 <TIM_OC3_SetConfig+0xf8>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d113      	bne.n	8003e22 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	011b      	lsls	r3, r3, #4
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	621a      	str	r2, [r3, #32]
}
 8003e3c:	bf00      	nop
 8003e3e:	371c      	adds	r7, #28
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	40012c00 	.word	0x40012c00
 8003e4c:	40014000 	.word	0x40014000
 8003e50:	40014400 	.word	0x40014400
 8003e54:	40014800 	.word	0x40014800

08003e58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	021b      	lsls	r3, r3, #8
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ea6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	031b      	lsls	r3, r3, #12
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a16      	ldr	r2, [pc, #88]	; (8003f10 <TIM_OC4_SetConfig+0xb8>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d00b      	beq.n	8003ed4 <TIM_OC4_SetConfig+0x7c>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a15      	ldr	r2, [pc, #84]	; (8003f14 <TIM_OC4_SetConfig+0xbc>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d007      	beq.n	8003ed4 <TIM_OC4_SetConfig+0x7c>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a14      	ldr	r2, [pc, #80]	; (8003f18 <TIM_OC4_SetConfig+0xc0>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d003      	beq.n	8003ed4 <TIM_OC4_SetConfig+0x7c>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a13      	ldr	r2, [pc, #76]	; (8003f1c <TIM_OC4_SetConfig+0xc4>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d109      	bne.n	8003ee8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	019b      	lsls	r3, r3, #6
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	621a      	str	r2, [r3, #32]
}
 8003f02:	bf00      	nop
 8003f04:	371c      	adds	r7, #28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40012c00 	.word	0x40012c00
 8003f14:	40014000 	.word	0x40014000
 8003f18:	40014400 	.word	0x40014400
 8003f1c:	40014800 	.word	0x40014800

08003f20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	041b      	lsls	r3, r3, #16
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a15      	ldr	r2, [pc, #84]	; (8003fcc <TIM_OC5_SetConfig+0xac>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d00b      	beq.n	8003f92 <TIM_OC5_SetConfig+0x72>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a14      	ldr	r2, [pc, #80]	; (8003fd0 <TIM_OC5_SetConfig+0xb0>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d007      	beq.n	8003f92 <TIM_OC5_SetConfig+0x72>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a13      	ldr	r2, [pc, #76]	; (8003fd4 <TIM_OC5_SetConfig+0xb4>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d003      	beq.n	8003f92 <TIM_OC5_SetConfig+0x72>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a12      	ldr	r2, [pc, #72]	; (8003fd8 <TIM_OC5_SetConfig+0xb8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d109      	bne.n	8003fa6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	021b      	lsls	r3, r3, #8
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	621a      	str	r2, [r3, #32]
}
 8003fc0:	bf00      	nop
 8003fc2:	371c      	adds	r7, #28
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	40012c00 	.word	0x40012c00
 8003fd0:	40014000 	.word	0x40014000
 8003fd4:	40014400 	.word	0x40014400
 8003fd8:	40014800 	.word	0x40014800

08003fdc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800400a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800400e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	021b      	lsls	r3, r3, #8
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4313      	orrs	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004022:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	051b      	lsls	r3, r3, #20
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	4313      	orrs	r3, r2
 800402e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a16      	ldr	r2, [pc, #88]	; (800408c <TIM_OC6_SetConfig+0xb0>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d00b      	beq.n	8004050 <TIM_OC6_SetConfig+0x74>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a15      	ldr	r2, [pc, #84]	; (8004090 <TIM_OC6_SetConfig+0xb4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d007      	beq.n	8004050 <TIM_OC6_SetConfig+0x74>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a14      	ldr	r2, [pc, #80]	; (8004094 <TIM_OC6_SetConfig+0xb8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d003      	beq.n	8004050 <TIM_OC6_SetConfig+0x74>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a13      	ldr	r2, [pc, #76]	; (8004098 <TIM_OC6_SetConfig+0xbc>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d109      	bne.n	8004064 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004056:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	029b      	lsls	r3, r3, #10
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	4313      	orrs	r3, r2
 8004062:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	621a      	str	r2, [r3, #32]
}
 800407e:	bf00      	nop
 8004080:	371c      	adds	r7, #28
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40012c00 	.word	0x40012c00
 8004090:	40014000 	.word	0x40014000
 8004094:	40014400 	.word	0x40014400
 8004098:	40014800 	.word	0x40014800

0800409c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e054      	b.n	800415e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a24      	ldr	r2, [pc, #144]	; (800416c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d108      	bne.n	80040f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80040e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	4313      	orrs	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a17      	ldr	r2, [pc, #92]	; (800416c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d00e      	beq.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411c:	d009      	beq.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a13      	ldr	r2, [pc, #76]	; (8004170 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d004      	beq.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a11      	ldr	r2, [pc, #68]	; (8004174 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d10c      	bne.n	800414c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004138:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	4313      	orrs	r3, r2
 8004142:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	40012c00 	.word	0x40012c00
 8004170:	40000400 	.word	0x40000400
 8004174:	40014000 	.word	0x40014000

08004178 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004190:	2302      	movs	r3, #2
 8004192:	e060      	b.n	8004256 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	041b      	lsls	r3, r3, #16
 800420a:	4313      	orrs	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a14      	ldr	r2, [pc, #80]	; (8004264 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d115      	bne.n	8004244 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	051b      	lsls	r3, r3, #20
 8004224:	4313      	orrs	r3, r2
 8004226:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	4313      	orrs	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	4313      	orrs	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	40012c00 	.word	0x40012c00

08004268 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e040      	b.n	8004338 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7fc ff20 	bl	800110c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2224      	movs	r2, #36	; 0x24
 80042d0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0201 	bic.w	r2, r2, #1
 80042e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 fb82 	bl	80049ec <UART_SetConfig>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d101      	bne.n	80042f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e022      	b.n	8004338 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fcac 	bl	8004c58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800430e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800431e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 fd33 	bl	8004d9c <UART_CheckIdleState>
 8004336:	4603      	mov	r3, r0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08a      	sub	sp, #40	; 0x28
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	4613      	mov	r3, r2
 800434c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004352:	2b20      	cmp	r3, #32
 8004354:	d13d      	bne.n	80043d2 <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <HAL_UART_Receive_DMA+0x22>
 800435c:	88fb      	ldrh	r3, [r7, #6]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e036      	b.n	80043d4 <HAL_UART_Receive_DMA+0x94>
    }

    __HAL_LOCK(huart);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_UART_Receive_DMA+0x34>
 8004370:	2302      	movs	r3, #2
 8004372:	e02f      	b.n	80043d4 <HAL_UART_Receive_DMA+0x94>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d018      	beq.n	80043c2 <HAL_UART_Receive_DMA+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	e853 3f00 	ldrex	r3, [r3]
 800439c:	613b      	str	r3, [r7, #16]
   return(result);
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043a4:	627b      	str	r3, [r7, #36]	; 0x24
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	461a      	mov	r2, r3
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	623b      	str	r3, [r7, #32]
 80043b0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b2:	69f9      	ldr	r1, [r7, #28]
 80043b4:	6a3a      	ldr	r2, [r7, #32]
 80043b6:	e841 2300 	strex	r3, r2, [r1]
 80043ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1e6      	bne.n	8004390 <HAL_UART_Receive_DMA+0x50>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80043c2:	88fb      	ldrh	r3, [r7, #6]
 80043c4:	461a      	mov	r2, r3
 80043c6:	68b9      	ldr	r1, [r7, #8]
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 fdf5 	bl	8004fb8 <UART_Start_Receive_DMA>
 80043ce:	4603      	mov	r3, r0
 80043d0:	e000      	b.n	80043d4 <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043d2:	2302      	movs	r3, #2
  }
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3728      	adds	r7, #40	; 0x28
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b0ba      	sub	sp, #232	; 0xe8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004402:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004406:	f640 030f 	movw	r3, #2063	; 0x80f
 800440a:	4013      	ands	r3, r2
 800440c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004410:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004414:	2b00      	cmp	r3, #0
 8004416:	d115      	bne.n	8004444 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800441c:	f003 0320 	and.w	r3, r3, #32
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00f      	beq.n	8004444 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004428:	f003 0320 	and.w	r3, r3, #32
 800442c:	2b00      	cmp	r3, #0
 800442e:	d009      	beq.n	8004444 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 82a3 	beq.w	8004980 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	4798      	blx	r3
      }
      return;
 8004442:	e29d      	b.n	8004980 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004444:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 8117 	beq.w	800467c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800444e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d106      	bne.n	8004468 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800445a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800445e:	4b85      	ldr	r3, [pc, #532]	; (8004674 <HAL_UART_IRQHandler+0x298>)
 8004460:	4013      	ands	r3, r2
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 810a 	beq.w	800467c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d011      	beq.n	8004498 <HAL_UART_IRQHandler+0xbc>
 8004474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00b      	beq.n	8004498 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2201      	movs	r2, #1
 8004486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800448e:	f043 0201 	orr.w	r2, r3, #1
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d011      	beq.n	80044c8 <HAL_UART_IRQHandler+0xec>
 80044a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00b      	beq.n	80044c8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2202      	movs	r2, #2
 80044b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044be:	f043 0204 	orr.w	r2, r3, #4
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d011      	beq.n	80044f8 <HAL_UART_IRQHandler+0x11c>
 80044d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00b      	beq.n	80044f8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2204      	movs	r2, #4
 80044e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044ee:	f043 0202 	orr.w	r2, r3, #2
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80044f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044fc:	f003 0308 	and.w	r3, r3, #8
 8004500:	2b00      	cmp	r3, #0
 8004502:	d017      	beq.n	8004534 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b00      	cmp	r3, #0
 800450e:	d105      	bne.n	800451c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004510:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004514:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00b      	beq.n	8004534 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2208      	movs	r2, #8
 8004522:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800452a:	f043 0208 	orr.w	r2, r3, #8
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800453c:	2b00      	cmp	r3, #0
 800453e:	d012      	beq.n	8004566 <HAL_UART_IRQHandler+0x18a>
 8004540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004544:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00c      	beq.n	8004566 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004554:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800455c:	f043 0220 	orr.w	r2, r3, #32
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 8209 	beq.w	8004984 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004576:	f003 0320 	and.w	r3, r3, #32
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00d      	beq.n	800459a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800457e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004582:	f003 0320 	and.w	r3, r3, #32
 8004586:	2b00      	cmp	r3, #0
 8004588:	d007      	beq.n	800459a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ae:	2b40      	cmp	r3, #64	; 0x40
 80045b0:	d005      	beq.n	80045be <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80045b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d04f      	beq.n	800465e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 fdc2 	bl	8005148 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ce:	2b40      	cmp	r3, #64	; 0x40
 80045d0:	d141      	bne.n	8004656 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3308      	adds	r3, #8
 80045d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045e0:	e853 3f00 	ldrex	r3, [r3]
 80045e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80045e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3308      	adds	r3, #8
 80045fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80045fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004602:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004606:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800460a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800460e:	e841 2300 	strex	r3, r2, [r1]
 8004612:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004616:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1d9      	bne.n	80045d2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004622:	2b00      	cmp	r3, #0
 8004624:	d013      	beq.n	800464e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462a:	4a13      	ldr	r2, [pc, #76]	; (8004678 <HAL_UART_IRQHandler+0x29c>)
 800462c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004632:	4618      	mov	r0, r3
 8004634:	f7fd f8c4 	bl	80017c0 <HAL_DMA_Abort_IT>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d017      	beq.n	800466e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004648:	4610      	mov	r0, r2
 800464a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800464c:	e00f      	b.n	800466e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f9b6 	bl	80049c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004654:	e00b      	b.n	800466e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f9b2 	bl	80049c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800465c:	e007      	b.n	800466e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f9ae 	bl	80049c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800466c:	e18a      	b.n	8004984 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800466e:	bf00      	nop
    return;
 8004670:	e188      	b.n	8004984 <HAL_UART_IRQHandler+0x5a8>
 8004672:	bf00      	nop
 8004674:	04000120 	.word	0x04000120
 8004678:	080053e1 	.word	0x080053e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004680:	2b01      	cmp	r3, #1
 8004682:	f040 8143 	bne.w	800490c <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800468a:	f003 0310 	and.w	r3, r3, #16
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 813c 	beq.w	800490c <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004698:	f003 0310 	and.w	r3, r3, #16
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 8135 	beq.w	800490c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2210      	movs	r2, #16
 80046a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b4:	2b40      	cmp	r3, #64	; 0x40
 80046b6:	f040 80b1 	bne.w	800481c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 815c 	beq.w	8004988 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80046d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046da:	429a      	cmp	r2, r3
 80046dc:	f080 8154 	bcs.w	8004988 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	2b20      	cmp	r3, #32
 80046f2:	f000 8085 	beq.w	8004800 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800470a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800470e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004712:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004720:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004724:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004728:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800472c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004730:	e841 2300 	strex	r3, r2, [r1]
 8004734:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004738:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1da      	bne.n	80046f6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3308      	adds	r3, #8
 8004746:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004748:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800474a:	e853 3f00 	ldrex	r3, [r3]
 800474e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004750:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004752:	f023 0301 	bic.w	r3, r3, #1
 8004756:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3308      	adds	r3, #8
 8004760:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004764:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004768:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800476c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004770:	e841 2300 	strex	r3, r2, [r1]
 8004774:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004776:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1e1      	bne.n	8004740 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3308      	adds	r3, #8
 8004782:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004784:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004786:	e853 3f00 	ldrex	r3, [r3]
 800478a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800478c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800478e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004792:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	3308      	adds	r3, #8
 800479c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80047a0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047a8:	e841 2300 	strex	r3, r2, [r1]
 80047ac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80047ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1e3      	bne.n	800477c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c8:	e853 3f00 	ldrex	r3, [r3]
 80047cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80047ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047d0:	f023 0310 	bic.w	r3, r3, #16
 80047d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	461a      	mov	r2, r3
 80047de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80047e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047ea:	e841 2300 	strex	r3, r2, [r1]
 80047ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80047f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1e4      	bne.n	80047c0 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fc ffa7 	bl	800174e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800480c:	b29b      	uxth	r3, r3
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	b29b      	uxth	r3, r3
 8004812:	4619      	mov	r1, r3
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f8dd 	bl	80049d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800481a:	e0b5      	b.n	8004988 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004828:	b29b      	uxth	r3, r3
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004836:	b29b      	uxth	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80a7 	beq.w	800498c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800483e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 80a2 	beq.w	800498c <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004850:	e853 3f00 	ldrex	r3, [r3]
 8004854:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004858:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800485c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	461a      	mov	r2, r3
 8004866:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800486a:	647b      	str	r3, [r7, #68]	; 0x44
 800486c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004870:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004872:	e841 2300 	strex	r3, r2, [r1]
 8004876:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1e4      	bne.n	8004848 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	3308      	adds	r3, #8
 8004884:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	e853 3f00 	ldrex	r3, [r3]
 800488c:	623b      	str	r3, [r7, #32]
   return(result);
 800488e:	6a3b      	ldr	r3, [r7, #32]
 8004890:	f023 0301 	bic.w	r3, r3, #1
 8004894:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3308      	adds	r3, #8
 800489e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80048a2:	633a      	str	r2, [r7, #48]	; 0x30
 80048a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048aa:	e841 2300 	strex	r3, r2, [r1]
 80048ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1e3      	bne.n	800487e <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2220      	movs	r2, #32
 80048ba:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	e853 3f00 	ldrex	r3, [r3]
 80048d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f023 0310 	bic.w	r3, r3, #16
 80048dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	461a      	mov	r2, r3
 80048e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048ea:	61fb      	str	r3, [r7, #28]
 80048ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ee:	69b9      	ldr	r1, [r7, #24]
 80048f0:	69fa      	ldr	r2, [r7, #28]
 80048f2:	e841 2300 	strex	r3, r2, [r1]
 80048f6:	617b      	str	r3, [r7, #20]
   return(result);
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1e4      	bne.n	80048c8 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004902:	4619      	mov	r1, r3
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f865 	bl	80049d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800490a:	e03f      	b.n	800498c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800490c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00e      	beq.n	8004936 <HAL_UART_IRQHandler+0x55a>
 8004918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800491c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d008      	beq.n	8004936 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800492c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fd96 	bl	8005460 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004934:	e02d      	b.n	8004992 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800493a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00e      	beq.n	8004960 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494a:	2b00      	cmp	r3, #0
 800494c:	d008      	beq.n	8004960 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004952:	2b00      	cmp	r3, #0
 8004954:	d01c      	beq.n	8004990 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	4798      	blx	r3
    }
    return;
 800495e:	e017      	b.n	8004990 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004968:	2b00      	cmp	r3, #0
 800496a:	d012      	beq.n	8004992 <HAL_UART_IRQHandler+0x5b6>
 800496c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00c      	beq.n	8004992 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 fd47 	bl	800540c <UART_EndTransmit_IT>
    return;
 800497e:	e008      	b.n	8004992 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004980:	bf00      	nop
 8004982:	e006      	b.n	8004992 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004984:	bf00      	nop
 8004986:	e004      	b.n	8004992 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004988:	bf00      	nop
 800498a:	e002      	b.n	8004992 <HAL_UART_IRQHandler+0x5b6>
      return;
 800498c:	bf00      	nop
 800498e:	e000      	b.n	8004992 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004990:	bf00      	nop
  }

}
 8004992:	37e8      	adds	r7, #232	; 0xe8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b088      	sub	sp, #32
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	4b8a      	ldr	r3, [pc, #552]	; (8004c40 <UART_SetConfig+0x254>)
 8004a18:	4013      	ands	r3, r2
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6812      	ldr	r2, [r2, #0]
 8004a1e:	6979      	ldr	r1, [r7, #20]
 8004a20:	430b      	orrs	r3, r1
 8004a22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a78      	ldr	r2, [pc, #480]	; (8004c44 <UART_SetConfig+0x258>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d120      	bne.n	8004aaa <UART_SetConfig+0xbe>
 8004a68:	4b77      	ldr	r3, [pc, #476]	; (8004c48 <UART_SetConfig+0x25c>)
 8004a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6c:	f003 0303 	and.w	r3, r3, #3
 8004a70:	2b03      	cmp	r3, #3
 8004a72:	d817      	bhi.n	8004aa4 <UART_SetConfig+0xb8>
 8004a74:	a201      	add	r2, pc, #4	; (adr r2, 8004a7c <UART_SetConfig+0x90>)
 8004a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7a:	bf00      	nop
 8004a7c:	08004a8d 	.word	0x08004a8d
 8004a80:	08004a99 	.word	0x08004a99
 8004a84:	08004a9f 	.word	0x08004a9f
 8004a88:	08004a93 	.word	0x08004a93
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	77fb      	strb	r3, [r7, #31]
 8004a90:	e01d      	b.n	8004ace <UART_SetConfig+0xe2>
 8004a92:	2302      	movs	r3, #2
 8004a94:	77fb      	strb	r3, [r7, #31]
 8004a96:	e01a      	b.n	8004ace <UART_SetConfig+0xe2>
 8004a98:	2304      	movs	r3, #4
 8004a9a:	77fb      	strb	r3, [r7, #31]
 8004a9c:	e017      	b.n	8004ace <UART_SetConfig+0xe2>
 8004a9e:	2308      	movs	r3, #8
 8004aa0:	77fb      	strb	r3, [r7, #31]
 8004aa2:	e014      	b.n	8004ace <UART_SetConfig+0xe2>
 8004aa4:	2310      	movs	r3, #16
 8004aa6:	77fb      	strb	r3, [r7, #31]
 8004aa8:	e011      	b.n	8004ace <UART_SetConfig+0xe2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a67      	ldr	r2, [pc, #412]	; (8004c4c <UART_SetConfig+0x260>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d102      	bne.n	8004aba <UART_SetConfig+0xce>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	77fb      	strb	r3, [r7, #31]
 8004ab8:	e009      	b.n	8004ace <UART_SetConfig+0xe2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a64      	ldr	r2, [pc, #400]	; (8004c50 <UART_SetConfig+0x264>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d102      	bne.n	8004aca <UART_SetConfig+0xde>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	77fb      	strb	r3, [r7, #31]
 8004ac8:	e001      	b.n	8004ace <UART_SetConfig+0xe2>
 8004aca:	2310      	movs	r3, #16
 8004acc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad6:	d15b      	bne.n	8004b90 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004ad8:	7ffb      	ldrb	r3, [r7, #31]
 8004ada:	2b08      	cmp	r3, #8
 8004adc:	d827      	bhi.n	8004b2e <UART_SetConfig+0x142>
 8004ade:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <UART_SetConfig+0xf8>)
 8004ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae4:	08004b09 	.word	0x08004b09
 8004ae8:	08004b11 	.word	0x08004b11
 8004aec:	08004b19 	.word	0x08004b19
 8004af0:	08004b2f 	.word	0x08004b2f
 8004af4:	08004b1f 	.word	0x08004b1f
 8004af8:	08004b2f 	.word	0x08004b2f
 8004afc:	08004b2f 	.word	0x08004b2f
 8004b00:	08004b2f 	.word	0x08004b2f
 8004b04:	08004b27 	.word	0x08004b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b08:	f7fe fa34 	bl	8002f74 <HAL_RCC_GetPCLK1Freq>
 8004b0c:	61b8      	str	r0, [r7, #24]
        break;
 8004b0e:	e013      	b.n	8004b38 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b10:	f7fe fa52 	bl	8002fb8 <HAL_RCC_GetPCLK2Freq>
 8004b14:	61b8      	str	r0, [r7, #24]
        break;
 8004b16:	e00f      	b.n	8004b38 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b18:	4b4e      	ldr	r3, [pc, #312]	; (8004c54 <UART_SetConfig+0x268>)
 8004b1a:	61bb      	str	r3, [r7, #24]
        break;
 8004b1c:	e00c      	b.n	8004b38 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b1e:	f7fe f9b1 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8004b22:	61b8      	str	r0, [r7, #24]
        break;
 8004b24:	e008      	b.n	8004b38 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b2a:	61bb      	str	r3, [r7, #24]
        break;
 8004b2c:	e004      	b.n	8004b38 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	77bb      	strb	r3, [r7, #30]
        break;
 8004b36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d074      	beq.n	8004c28 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	005a      	lsls	r2, r3, #1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	085b      	lsrs	r3, r3, #1
 8004b48:	441a      	add	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	2b0f      	cmp	r3, #15
 8004b5a:	d916      	bls.n	8004b8a <UART_SetConfig+0x19e>
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b62:	d212      	bcs.n	8004b8a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	f023 030f 	bic.w	r3, r3, #15
 8004b6c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	085b      	lsrs	r3, r3, #1
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	89fb      	ldrh	r3, [r7, #14]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	89fa      	ldrh	r2, [r7, #14]
 8004b86:	60da      	str	r2, [r3, #12]
 8004b88:	e04e      	b.n	8004c28 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	77bb      	strb	r3, [r7, #30]
 8004b8e:	e04b      	b.n	8004c28 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b90:	7ffb      	ldrb	r3, [r7, #31]
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d827      	bhi.n	8004be6 <UART_SetConfig+0x1fa>
 8004b96:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <UART_SetConfig+0x1b0>)
 8004b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9c:	08004bc1 	.word	0x08004bc1
 8004ba0:	08004bc9 	.word	0x08004bc9
 8004ba4:	08004bd1 	.word	0x08004bd1
 8004ba8:	08004be7 	.word	0x08004be7
 8004bac:	08004bd7 	.word	0x08004bd7
 8004bb0:	08004be7 	.word	0x08004be7
 8004bb4:	08004be7 	.word	0x08004be7
 8004bb8:	08004be7 	.word	0x08004be7
 8004bbc:	08004bdf 	.word	0x08004bdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bc0:	f7fe f9d8 	bl	8002f74 <HAL_RCC_GetPCLK1Freq>
 8004bc4:	61b8      	str	r0, [r7, #24]
        break;
 8004bc6:	e013      	b.n	8004bf0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bc8:	f7fe f9f6 	bl	8002fb8 <HAL_RCC_GetPCLK2Freq>
 8004bcc:	61b8      	str	r0, [r7, #24]
        break;
 8004bce:	e00f      	b.n	8004bf0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bd0:	4b20      	ldr	r3, [pc, #128]	; (8004c54 <UART_SetConfig+0x268>)
 8004bd2:	61bb      	str	r3, [r7, #24]
        break;
 8004bd4:	e00c      	b.n	8004bf0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bd6:	f7fe f955 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8004bda:	61b8      	str	r0, [r7, #24]
        break;
 8004bdc:	e008      	b.n	8004bf0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004be2:	61bb      	str	r3, [r7, #24]
        break;
 8004be4:	e004      	b.n	8004bf0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	77bb      	strb	r3, [r7, #30]
        break;
 8004bee:	bf00      	nop
    }

    if (pclk != 0U)
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d018      	beq.n	8004c28 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	085a      	lsrs	r2, r3, #1
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	441a      	add	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	2b0f      	cmp	r3, #15
 8004c10:	d908      	bls.n	8004c24 <UART_SetConfig+0x238>
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c18:	d204      	bcs.n	8004c24 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	60da      	str	r2, [r3, #12]
 8004c22:	e001      	b.n	8004c28 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c34:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3720      	adds	r7, #32
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	efff69f3 	.word	0xefff69f3
 8004c44:	40013800 	.word	0x40013800
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	40004400 	.word	0x40004400
 8004c50:	40004800 	.word	0x40004800
 8004c54:	007a1200 	.word	0x007a1200

08004c58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00a      	beq.n	8004c82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	f003 0310 	and.w	r3, r3, #16
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00a      	beq.n	8004d0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	f003 0320 	and.w	r3, r3, #32
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01a      	beq.n	8004d6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d56:	d10a      	bne.n	8004d6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	605a      	str	r2, [r3, #4]
  }
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af02      	add	r7, sp, #8
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dac:	f7fc fb0c 	bl	80013c8 <HAL_GetTick>
 8004db0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0308 	and.w	r3, r3, #8
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d10e      	bne.n	8004dde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f82d 	bl	8004e2e <UART_WaitOnFlagUntilTimeout>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e023      	b.n	8004e26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d10e      	bne.n	8004e0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f817 	bl	8004e2e <UART_WaitOnFlagUntilTimeout>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e00d      	b.n	8004e26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2220      	movs	r2, #32
 8004e14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b09c      	sub	sp, #112	; 0x70
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	60f8      	str	r0, [r7, #12]
 8004e36:	60b9      	str	r1, [r7, #8]
 8004e38:	603b      	str	r3, [r7, #0]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e3e:	e0a5      	b.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e46:	f000 80a1 	beq.w	8004f8c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e4a:	f7fc fabd 	bl	80013c8 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d302      	bcc.n	8004e60 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d13e      	bne.n	8004ede <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e68:	e853 3f00 	ldrex	r3, [r3]
 8004e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e74:	667b      	str	r3, [r7, #100]	; 0x64
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e80:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e86:	e841 2300 	strex	r3, r2, [r1]
 8004e8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1e6      	bne.n	8004e60 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3308      	adds	r3, #8
 8004e98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e9c:	e853 3f00 	ldrex	r3, [r3]
 8004ea0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea4:	f023 0301 	bic.w	r3, r3, #1
 8004ea8:	663b      	str	r3, [r7, #96]	; 0x60
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3308      	adds	r3, #8
 8004eb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004eb2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004eb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004eb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eba:	e841 2300 	strex	r3, r2, [r1]
 8004ebe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1e5      	bne.n	8004e92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e067      	b.n	8004fae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d04f      	beq.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004efa:	d147      	bne.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f04:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0e:	e853 3f00 	ldrex	r3, [r3]
 8004f12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	461a      	mov	r2, r3
 8004f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f24:	637b      	str	r3, [r7, #52]	; 0x34
 8004f26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f2c:	e841 2300 	strex	r3, r2, [r1]
 8004f30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1e6      	bne.n	8004f06 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3308      	adds	r3, #8
 8004f3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	e853 3f00 	ldrex	r3, [r3]
 8004f46:	613b      	str	r3, [r7, #16]
   return(result);
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f023 0301 	bic.w	r3, r3, #1
 8004f4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3308      	adds	r3, #8
 8004f56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f58:	623a      	str	r2, [r7, #32]
 8004f5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5c:	69f9      	ldr	r1, [r7, #28]
 8004f5e:	6a3a      	ldr	r2, [r7, #32]
 8004f60:	e841 2300 	strex	r3, r2, [r1]
 8004f64:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1e5      	bne.n	8004f38 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2220      	movs	r2, #32
 8004f76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e010      	b.n	8004fae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	69da      	ldr	r2, [r3, #28]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	4013      	ands	r3, r2
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	bf0c      	ite	eq
 8004f9c:	2301      	moveq	r3, #1
 8004f9e:	2300      	movne	r3, #0
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	79fb      	ldrb	r3, [r7, #7]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	f43f af4a 	beq.w	8004e40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3770      	adds	r7, #112	; 0x70
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
	...

08004fb8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b096      	sub	sp, #88	; 0x58
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	88fa      	ldrh	r2, [r7, #6]
 8004fd0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2222      	movs	r2, #34	; 0x22
 8004fe0:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d02b      	beq.n	8005042 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fee:	4a40      	ldr	r2, [pc, #256]	; (80050f0 <UART_Start_Receive_DMA+0x138>)
 8004ff0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff6:	4a3f      	ldr	r2, [pc, #252]	; (80050f4 <UART_Start_Receive_DMA+0x13c>)
 8004ff8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffe:	4a3e      	ldr	r2, [pc, #248]	; (80050f8 <UART_Start_Receive_DMA+0x140>)
 8005000:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005006:	2200      	movs	r2, #0
 8005008:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	3324      	adds	r3, #36	; 0x24
 8005014:	4619      	mov	r1, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501a:	461a      	mov	r2, r3
 800501c:	88fb      	ldrh	r3, [r7, #6]
 800501e:	f7fc fb37 	bl	8001690 <HAL_DMA_Start_IT>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00c      	beq.n	8005042 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2210      	movs	r2, #16
 800502c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2220      	movs	r2, #32
 800503c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e051      	b.n	80050e6 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005052:	e853 3f00 	ldrex	r3, [r3]
 8005056:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800505e:	657b      	str	r3, [r7, #84]	; 0x54
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	461a      	mov	r2, r3
 8005066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005068:	64bb      	str	r3, [r7, #72]	; 0x48
 800506a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800506e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005070:	e841 2300 	strex	r3, r2, [r1]
 8005074:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1e6      	bne.n	800504a <UART_Start_Receive_DMA+0x92>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	3308      	adds	r3, #8
 8005082:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005086:	e853 3f00 	ldrex	r3, [r3]
 800508a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	f043 0301 	orr.w	r3, r3, #1
 8005092:	653b      	str	r3, [r7, #80]	; 0x50
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3308      	adds	r3, #8
 800509a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800509c:	637a      	str	r2, [r7, #52]	; 0x34
 800509e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050a4:	e841 2300 	strex	r3, r2, [r1]
 80050a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1e5      	bne.n	800507c <UART_Start_Receive_DMA+0xc4>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	3308      	adds	r3, #8
 80050b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	e853 3f00 	ldrex	r3, [r3]
 80050be:	613b      	str	r3, [r7, #16]
   return(result);
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3308      	adds	r3, #8
 80050ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050d0:	623a      	str	r2, [r7, #32]
 80050d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d4:	69f9      	ldr	r1, [r7, #28]
 80050d6:	6a3a      	ldr	r2, [r7, #32]
 80050d8:	e841 2300 	strex	r3, r2, [r1]
 80050dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1e5      	bne.n	80050b0 <UART_Start_Receive_DMA+0xf8>

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3758      	adds	r7, #88	; 0x58
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	0800520f 	.word	0x0800520f
 80050f4:	0800532d 	.word	0x0800532d
 80050f8:	08005365 	.word	0x08005365

080050fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b089      	sub	sp, #36	; 0x24
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	e853 3f00 	ldrex	r3, [r3]
 8005110:	60bb      	str	r3, [r7, #8]
   return(result);
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005118:	61fb      	str	r3, [r7, #28]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	461a      	mov	r2, r3
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	61bb      	str	r3, [r7, #24]
 8005124:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005126:	6979      	ldr	r1, [r7, #20]
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	e841 2300 	strex	r3, r2, [r1]
 800512e:	613b      	str	r3, [r7, #16]
   return(result);
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1e6      	bne.n	8005104 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2220      	movs	r2, #32
 800513a:	679a      	str	r2, [r3, #120]	; 0x78
}
 800513c:	bf00      	nop
 800513e:	3724      	adds	r7, #36	; 0x24
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005148:	b480      	push	{r7}
 800514a:	b095      	sub	sp, #84	; 0x54
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005158:	e853 3f00 	ldrex	r3, [r3]
 800515c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005164:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800516e:	643b      	str	r3, [r7, #64]	; 0x40
 8005170:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005172:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005174:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005176:	e841 2300 	strex	r3, r2, [r1]
 800517a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800517c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1e6      	bne.n	8005150 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	3308      	adds	r3, #8
 8005188:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	61fb      	str	r3, [r7, #28]
   return(result);
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	f023 0301 	bic.w	r3, r3, #1
 8005198:	64bb      	str	r3, [r7, #72]	; 0x48
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3308      	adds	r3, #8
 80051a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e5      	bne.n	8005182 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d118      	bne.n	80051f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	e853 3f00 	ldrex	r3, [r3]
 80051ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f023 0310 	bic.w	r3, r3, #16
 80051d2:	647b      	str	r3, [r7, #68]	; 0x44
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	461a      	mov	r2, r3
 80051da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051dc:	61bb      	str	r3, [r7, #24]
 80051de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e0:	6979      	ldr	r1, [r7, #20]
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	e841 2300 	strex	r3, r2, [r1]
 80051e8:	613b      	str	r3, [r7, #16]
   return(result);
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1e6      	bne.n	80051be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005202:	bf00      	nop
 8005204:	3754      	adds	r7, #84	; 0x54
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b09c      	sub	sp, #112	; 0x70
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	2b20      	cmp	r3, #32
 8005222:	d070      	beq.n	8005306 <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 8005224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005226:	2200      	movs	r2, #0
 8005228:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800522c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005234:	e853 3f00 	ldrex	r3, [r3]
 8005238:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800523a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800523c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005240:	66bb      	str	r3, [r7, #104]	; 0x68
 8005242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	461a      	mov	r2, r3
 8005248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800524a:	65bb      	str	r3, [r7, #88]	; 0x58
 800524c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005250:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005252:	e841 2300 	strex	r3, r2, [r1]
 8005256:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1e6      	bne.n	800522c <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800525e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3308      	adds	r3, #8
 8005264:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005268:	e853 3f00 	ldrex	r3, [r3]
 800526c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800526e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005270:	f023 0301 	bic.w	r3, r3, #1
 8005274:	667b      	str	r3, [r7, #100]	; 0x64
 8005276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	3308      	adds	r3, #8
 800527c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800527e:	647a      	str	r2, [r7, #68]	; 0x44
 8005280:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005282:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005284:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005286:	e841 2300 	strex	r3, r2, [r1]
 800528a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800528c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1e5      	bne.n	800525e <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3308      	adds	r3, #8
 8005298:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	e853 3f00 	ldrex	r3, [r3]
 80052a0:	623b      	str	r3, [r7, #32]
   return(result);
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052a8:	663b      	str	r3, [r7, #96]	; 0x60
 80052aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3308      	adds	r3, #8
 80052b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052b2:	633a      	str	r2, [r7, #48]	; 0x30
 80052b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ba:	e841 2300 	strex	r3, r2, [r1]
 80052be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1e5      	bne.n	8005292 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80052c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052c8:	2220      	movs	r2, #32
 80052ca:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d118      	bne.n	8005306 <UART_DMAReceiveCplt+0xf8>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	e853 3f00 	ldrex	r3, [r3]
 80052e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f023 0310 	bic.w	r3, r3, #16
 80052e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	461a      	mov	r2, r3
 80052f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052f2:	61fb      	str	r3, [r7, #28]
 80052f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f6:	69b9      	ldr	r1, [r7, #24]
 80052f8:	69fa      	ldr	r2, [r7, #28]
 80052fa:	e841 2300 	strex	r3, r2, [r1]
 80052fe:	617b      	str	r3, [r7, #20]
   return(result);
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1e6      	bne.n	80052d4 <UART_DMAReceiveCplt+0xc6>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800530a:	2b01      	cmp	r3, #1
 800530c:	d107      	bne.n	800531e <UART_DMAReceiveCplt+0x110>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800530e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005310:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005314:	4619      	mov	r1, r3
 8005316:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005318:	f7ff fb5c 	bl	80049d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800531c:	e002      	b.n	8005324 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 800531e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005320:	f7fb fa0a 	bl	8000738 <HAL_UART_RxCpltCallback>
}
 8005324:	bf00      	nop
 8005326:	3770      	adds	r7, #112	; 0x70
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800533e:	2b01      	cmp	r3, #1
 8005340:	d109      	bne.n	8005356 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005348:	085b      	lsrs	r3, r3, #1
 800534a:	b29b      	uxth	r3, r3
 800534c:	4619      	mov	r1, r3
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f7ff fb40 	bl	80049d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005354:	e002      	b.n	800535c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f7ff fb28 	bl	80049ac <HAL_UART_RxHalfCpltCallback>
}
 800535c:	bf00      	nop
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005376:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800537c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005388:	2b80      	cmp	r3, #128	; 0x80
 800538a:	d109      	bne.n	80053a0 <UART_DMAError+0x3c>
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	2b21      	cmp	r3, #33	; 0x21
 8005390:	d106      	bne.n	80053a0 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	2200      	movs	r2, #0
 8005396:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800539a:	6978      	ldr	r0, [r7, #20]
 800539c:	f7ff feae 	bl	80050fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053aa:	2b40      	cmp	r3, #64	; 0x40
 80053ac:	d109      	bne.n	80053c2 <UART_DMAError+0x5e>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2b22      	cmp	r3, #34	; 0x22
 80053b2:	d106      	bne.n	80053c2 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80053bc:	6978      	ldr	r0, [r7, #20]
 80053be:	f7ff fec3 	bl	8005148 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053c8:	f043 0210 	orr.w	r2, r3, #16
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053d2:	6978      	ldr	r0, [r7, #20]
 80053d4:	f7ff faf4 	bl	80049c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053d8:	bf00      	nop
 80053da:	3718      	adds	r7, #24
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f7ff fade 	bl	80049c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005404:	bf00      	nop
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	e853 3f00 	ldrex	r3, [r3]
 8005420:	60bb      	str	r3, [r7, #8]
   return(result);
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005428:	61fb      	str	r3, [r7, #28]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	61bb      	str	r3, [r7, #24]
 8005434:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005436:	6979      	ldr	r1, [r7, #20]
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	e841 2300 	strex	r3, r2, [r1]
 800543e:	613b      	str	r3, [r7, #16]
   return(result);
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1e6      	bne.n	8005414 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2220      	movs	r2, #32
 800544a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7ff faa0 	bl	8004998 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005458:	bf00      	nop
 800545a:	3720      	adds	r7, #32
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <__libc_init_array>:
 8005474:	b570      	push	{r4, r5, r6, lr}
 8005476:	4d0d      	ldr	r5, [pc, #52]	; (80054ac <__libc_init_array+0x38>)
 8005478:	4c0d      	ldr	r4, [pc, #52]	; (80054b0 <__libc_init_array+0x3c>)
 800547a:	1b64      	subs	r4, r4, r5
 800547c:	10a4      	asrs	r4, r4, #2
 800547e:	2600      	movs	r6, #0
 8005480:	42a6      	cmp	r6, r4
 8005482:	d109      	bne.n	8005498 <__libc_init_array+0x24>
 8005484:	4d0b      	ldr	r5, [pc, #44]	; (80054b4 <__libc_init_array+0x40>)
 8005486:	4c0c      	ldr	r4, [pc, #48]	; (80054b8 <__libc_init_array+0x44>)
 8005488:	f000 f820 	bl	80054cc <_init>
 800548c:	1b64      	subs	r4, r4, r5
 800548e:	10a4      	asrs	r4, r4, #2
 8005490:	2600      	movs	r6, #0
 8005492:	42a6      	cmp	r6, r4
 8005494:	d105      	bne.n	80054a2 <__libc_init_array+0x2e>
 8005496:	bd70      	pop	{r4, r5, r6, pc}
 8005498:	f855 3b04 	ldr.w	r3, [r5], #4
 800549c:	4798      	blx	r3
 800549e:	3601      	adds	r6, #1
 80054a0:	e7ee      	b.n	8005480 <__libc_init_array+0xc>
 80054a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054a6:	4798      	blx	r3
 80054a8:	3601      	adds	r6, #1
 80054aa:	e7f2      	b.n	8005492 <__libc_init_array+0x1e>
 80054ac:	0800551c 	.word	0x0800551c
 80054b0:	0800551c 	.word	0x0800551c
 80054b4:	0800551c 	.word	0x0800551c
 80054b8:	08005520 	.word	0x08005520

080054bc <memset>:
 80054bc:	4402      	add	r2, r0
 80054be:	4603      	mov	r3, r0
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d100      	bne.n	80054c6 <memset+0xa>
 80054c4:	4770      	bx	lr
 80054c6:	f803 1b01 	strb.w	r1, [r3], #1
 80054ca:	e7f9      	b.n	80054c0 <memset+0x4>

080054cc <_init>:
 80054cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ce:	bf00      	nop
 80054d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054d2:	bc08      	pop	{r3}
 80054d4:	469e      	mov	lr, r3
 80054d6:	4770      	bx	lr

080054d8 <_fini>:
 80054d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054da:	bf00      	nop
 80054dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054de:	bc08      	pop	{r3}
 80054e0:	469e      	mov	lr, r3
 80054e2:	4770      	bx	lr
